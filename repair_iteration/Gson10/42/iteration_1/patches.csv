bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.put(name,  fieldNames);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.put(name,  fieldNames);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.put(name,  fieldNames);	  BoundField    replaced    =    fieldNames.put(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
2	[BUG]  [BUGGY]  BoundField  replaced  =  boundFields.put(name,  fieldNames);  [CE]  cannot  find  symbol  boundFields  [FE]          ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundFields.put(name,  fieldNames);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundFields.put(name,  fieldNames);	  BoundField    replaced    =    fieldNames.put(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol  boundFields	10	None	replace
3	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.put(name,  fieldName);  [CE]  cannot  find  symbol  fieldName  [FE]            ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.put(name,  fieldName);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.put(name,  fieldName);	  BoundField    replaced    =    fieldNames.put(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol  fieldName	10	None	replace
4	[BUG]  [BUGGY]  BoundField  replaced  =  boundFields.put(name,  fieldName);  [CE]  cannot  find  symbol  fieldName  [FE]              ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundFields.put(name,  fieldName);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundFields.put(name,  fieldName);	  BoundField    replaced    =    fieldNames.put(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol  fieldName	10	None	replace
5	[BUG]  [BUGGY]  BoundField  replacement  =  boundField.put(name,  fieldNames);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replacement  =  boundField.put(name,  fieldNames);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replacement  =  boundField.put(name,  fieldNames);	  BoundField    replaced    =    fieldNames.put(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
6	[BUG]  [BUGGY]  BoundField  replaced  =  bindingField.put(name,  fieldNames);  [CE]  cannot  find  symbol  bindingField  [FE]                  ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  bindingField.put(name,  fieldNames);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  bindingField.put(name,  fieldNames);	  BoundField    replaced    =    fieldNames.put(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol  bindingField	10	None	replace
7	[BUG]  [BUGGY]  BoundField  replaced  =  boundFields.get(name,  result);  [CE]  cannot  find  symbol  boundFields  [FE]              ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundFields.get(name,  result);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundFields.get(name,  result);	  BoundField    replaced    =    result.get(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol  boundFields	4	None	replace
8	[BUG]  [BUGGY]  BoundField  replacement  =  boundField.get(name,  result);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replacement  =  boundField.get(name,  result);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replacement  =  boundField.get(name,  result);	  BoundField    replaced    =    result.get(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
9	[BUG]  [BUGGY]  BoundField  replace  =  boundField.get(name,  result);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replace  =  boundField.get(name,  result);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replace  =  boundField.get(name,  result);	  BoundField    replaced    =    result.get(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
10	[BUG]  [BUGGY]  BoundField  replaced  =  bindingField.get(name,  result);  [CE]  cannot  find  symbol  bindingField  [FE]                    ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  bindingField.get(name,  result);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  bindingField.get(name,  result);	  BoundField    replaced    =    result.get(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol  bindingField	4	None	replace
11	[BUG]  [BUGGY]  BoundField  returned  =  boundField.get(name,  result);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  returned  =  boundField.get(name,  result);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  returned  =  boundField.get(name,  result);	  BoundField    replaced    =    result.get(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
12	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.get(name,  results);  [CE]  cannot  find  symbol  results  [FE]                        ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.get(name,  results);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.get(name,  results);	  BoundField    replaced    =    result.get(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol  results	4	None	replace
13	[BUG]  [BUGGY]  BoundField  replacement  =  boundField.put(name,  previous);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replacement  =  boundField.put(name,  previous);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replacement  =  boundField.put(name,  previous);	  BoundField    replacement    =    boundField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
14	[BUG]  [BUGGY]  BoundField  replacement  =  result.put(name,  boundField);  [CE]  cannot  find  symbol  replaced  [FE]                  ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replacement  =  result.put(name,  boundField);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replacement  =  result.put(name,  boundField);	  BoundField    replacement    =    boundField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol  replaced	5	None	replace
15	[BUG]  [BUGGY]  BoundField  replacement  =  boundField.put(name,  original);  [CE]  cannot  find  symbol  original  [FE]                    ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replacement  =  boundField.put(name,  original);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replacement  =  boundField.put(name,  original);	  BoundField    replacement    =    boundField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol  original	5	None	replace
16	[BUG]  [BUGGY]  BoundField  replacement  =  boundField.put(name,  name);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replacement  =  boundField.put(name,  name);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replacement  =  boundField.put(name,  name);	  BoundField    replacement    =    boundField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
17	[BUG]  [BUGGY]  BoundField  replacement  =  boundField.put(name,  field);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replacement  =  boundField.put(name,  field);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replacement  =  boundField.put(name,  field);	  BoundField    replacement    =    boundField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
18	[BUG]  [BUGGY]  BoundField  replacement  =  boundField.put(name,  first);  [CE]  cannot  find  symbol  first  [FE]                          ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replacement  =  boundField.put(name,  first);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replacement  =  boundField.put(name,  first);	  BoundField    replacement    =    boundField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol  first	5	None	replace
19	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.get(name,  name);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.get(name,  name);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.get(name,  name);	  BoundField    replaced    =    boundField.get(name);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
20	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.get(name,  fieldType);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.get(name,  fieldType);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.get(name,  fieldType);	  BoundField    replaced    =    boundField.get(name);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
21	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.get(name,  field);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.get(name,  field);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.get(name,  field);	  BoundField    replaced    =    boundField.get(name);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
22	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.get(name,  previous);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.get(name,  previous);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.get(name,  previous);	  BoundField    replaced    =    boundField.get(name);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
23	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.get(name,  i);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.get(name,  i);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.get(name,  i);	  BoundField    replaced    =    boundField.get(name);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
24	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.get(name,  false);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.get(name,  false);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.get(name,  false);	  BoundField    replaced    =    boundField.get(name);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
25	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.remove(name,  name);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.remove(name,  name);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.remove(name,  name);	  BoundField    replaced    =    boundField.remove(name);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
26	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.remove(name,  previous);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.remove(name,  previous);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.remove(name,  previous);	  BoundField    replaced    =    boundField.remove(name);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
27	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.remove(name,  fieldType);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.remove(name,  fieldType);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.remove(name,  fieldType);	  BoundField    replaced    =    boundField.remove(name);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
28	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.remove(field.name);  [CE]  name  has  private  access  in  Field  [FE]                        ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.remove(field.name);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.remove(field.name);	  BoundField    replaced    =    boundField.remove(name);    	non-compiled	[CE]  name  has  private  access  in  Field	6	None	replace
29	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.remove(name,  field);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.remove(name,  field);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.remove(name,  field);	  BoundField    replaced    =    boundField.remove(name);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
30	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.get(name,  fieldNames);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.get(name,  fieldNames);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.get(name,  fieldNames);	  BoundField    replaced    =    boundField.get(name,    result);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
31	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.put(name,  previous);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.put(name,  previous);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.put(name,  previous);	  BoundField    replaced    =    bindingField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
32	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.put(name,  new  BoundField(fieldNames[i]));  [CE]  array  required,  but  List<String>  found  [FE]            ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.put(name,  new  BoundField(fieldNames[i]));  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.put(name,  new  BoundField(fieldNames[i]));	  BoundField    replaced    =    bindingField.put(name,    result);    	non-compiled	[CE]  array  required,  but  List<String>  found	9	None	replace
33	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.put(name,  new  BoundField(fieldType));  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]              ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.put(name,  new  BoundField(fieldType));  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.put(name,  new  BoundField(fieldType));	  BoundField    replaced    =    bindingField.put(name,    result);    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	9	None	replace
34	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.put(name,  new  BoundField(result));  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]                ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.put(name,  new  BoundField(result));  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.put(name,  new  BoundField(result));	  BoundField    replaced    =    bindingField.put(name,    result);    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	9	None	replace
35	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.put(name,  new  BoundField(fieldType,  result));  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]                  ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.put(name,  new  BoundField(fieldType,  result));  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.put(name,  new  BoundField(fieldType,  result));	  BoundField    replaced    =    bindingField.put(name,    result);    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	9	None	replace
36	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.put(name,  new  BoundField(result.name));  [CE]  cannot  find  symbol  name  [FE]                    ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.put(name,  new  BoundField(result.name));  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.put(name,  new  BoundField(result.name));	  BoundField    replaced    =    bindingField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol  name	9	None	replace
37	[BUG]  [BUGGY]  BoundField  replaced  =  result.remove(name,  boundField);  [CE]  incompatible  types  [FE]          ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  result.remove(name,  boundField);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  result.remove(name,  boundField);	  BoundField    replaced    =    boundField.remove(name,    result);    	non-compiled	[CE]  incompatible  types	11	None	replace
38	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.put(name,  field);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.put(name,  field);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.put(name,  field);	  BoundField    replaced    =    boundField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
39	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.put(name,  original);  [CE]  cannot  find  symbol  original  [FE]          ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.put(name,  original);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.put(name,  original);	  BoundField    replaced    =    boundField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol  original	1	None	replace
40	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.put(name,  name);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.put(name,  name);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.put(name,  name);	  BoundField    replaced    =    boundField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
41	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.put(name,  first);  [CE]  cannot  find  symbol  first  [FE]              ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.put(name,  first);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.put(name,  first);	  BoundField    replaced    =    boundField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol  first	1	None	replace
42	[BUG]  [BUGGY]  BoundField  previous  =  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  previous  =  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  previous  =  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	      	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
43	[BUG]  [BUGGY]  BoundField  previous  =  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType));  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  previous  =  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType));  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  previous  =  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType));	      	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
44	[BUG]  [BUGGY]  Field[]  previous  =  boundFields.toArray(new  Field[fields.size()  ]);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  Field[]  previous  =  boundFields.toArray(new  Field[fields.size()  ]);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	Field[]  previous  =  boundFields.toArray(new  Field[fields.size()  ]);	      	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
45	[BUG]  [BUGGY]  Field[]  previous  =  boundField.getFields();  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  Field[]  previous  =  boundField.getFields();  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	Field[]  previous  =  boundField.getFields();	      	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
46	[BUG]  [BUGGY]  BoundField  previous  =  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  previous  =  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  previous  =  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	      	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
47	[BUG]  [BUGGY]  BoundField  previous  =  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  previous  =  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  previous  =  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize);	      	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
48	[BUG]  [BUGGY]  BoundField  replaced  =  boundFields.put(name,  previous);  [CE]  cannot  find  symbol  boundFields  [FE]            ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundFields.put(name,  previous);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundFields.put(name,  previous);	  BoundField    replaced    =    boundFields.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol  boundFields	3	None	replace
49	[BUG]  [BUGGY]  BoundField  replaced  =  boundFields.put(name,  original);  [CE]  cannot  find  symbol  original  [FE]              ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundFields.put(name,  original);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundFields.put(name,  original);	  BoundField    replaced    =    boundFields.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol  original	3	None	replace
50	[BUG]  [BUGGY]  BoundField  replaced  =  fieldNames.put(name,  result);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  fieldNames.put(name,  result);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  fieldNames.put(name,  result);	  BoundField    replaced    =    boundFields.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
51	[BUG]  [BUGGY]  BoundField  replaced  =  boundFields.put(name,  first);  [CE]  cannot  find  symbol  first  [FE]                  ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundFields.put(name,  first);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundFields.put(name,  first);	  BoundField    replaced    =    boundFields.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol  first	3	None	replace
52	[BUG]  [BUGGY]  BoundField  replaced  =  boundFields.put(name,  new  BoundField(i,  result));  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]                    ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundFields.put(name,  new  BoundField(i,  result));  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundFields.put(name,  new  BoundField(i,  result));	  BoundField    replaced    =    boundFields.put(name,    result);    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	3	None	replace
53	[BUG]  [BUGGY]  BoundField  replaced  =  result.get(name,  boundField,  i);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  result.get(name,  boundField,  i);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  result.get(name,  boundField,  i);	  BoundField    replaced    =    result.get(name,    boundField);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	4	None	replace
54	[BUG]  [BUGGY]  BoundField  replaced  =  result.get(name,  boundField,  fieldNames);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  result.get(name,  boundField,  fieldNames);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  result.get(name,  boundField,  fieldNames);	  BoundField    replaced    =    result.get(name,    boundField);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	4	None	replace
55	[BUG]  [BUGGY]  BoundField  replaced  =  result.get(name,  boundField,  previous);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  result.get(name,  boundField,  previous);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  result.get(name,  boundField,  previous);	  BoundField    replaced    =    result.get(name,    boundField);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	4	None	replace
56	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.remove(name,  fieldName);  [CE]  cannot  find  symbol  fieldName  [FE]          ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.remove(name,  fieldName);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.remove(name,  fieldName);	  BoundField    replaced    =    boundField.remove(name,    result);    	non-compiled	[CE]  cannot  find  symbol  fieldName	11	None	replace
57	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.remove(name,  i);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.remove(name,  i);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.remove(name,  i);	  BoundField    replaced    =    boundField.remove(name,    result);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
58	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.put(name,  i);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.put(name,  i);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.put(name,  i);	  BoundField    replaced    =    bindingField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
59	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.put(name,  new  JSONField(fieldNames[i]));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.put(name,  new  JSONField(fieldNames[i]));  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.put(name,  new  JSONField(fieldNames[i]));	  BoundField    replaced    =    bindingField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
60	[BUG]  [BUGGY]  BoundField  replaced  =  results.put(name,  boundField);  [CE]  cannot  find  symbol  results  [FE]            ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  results.put(name,  boundField);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  results.put(name,  boundField);	  BoundField    replaced    =    boundFields.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol  results	3	None	replace
61	[BUG]  [BUGGY]  BoundField  replaced  =  boundFields.put(name,  i);  [CE]  cannot  find  symbol  boundFields  [FE]              ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundFields.put(name,  i);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundFields.put(name,  i);	  BoundField    replaced    =    boundFields.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol  boundFields	3	None	replace
62	[BUG]  [BUGGY]  BoundField  replaced  =  results.get(name,  boundField);  [CE]  cannot  find  symbol  results  [FE]        ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  results.get(name,  boundField);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  results.get(name,  boundField);	  BoundField    replaced    =    boundField.get(name,    result);    	non-compiled	[CE]  cannot  find  symbol  results	8	None	replace
63	[BUG]  [BUGGY]  Field[]  previous  =  boundFields.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  Field[]  previous  =  boundFields.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	Field[]  previous  =  boundFields.toArray(new  Field[fieldNames.size()  ]);	      	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
64	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);	      	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
65	[BUG]  [BUGGY]  Field[]  result  =  boundFields.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  Field[]  result  =  boundFields.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	Field[]  result  =  boundFields.toArray(new  Field[fieldNames.size()  ]);	      	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
66	[BUG]  [BUGGY]  BoundField  previous  =  boundField.createBoundField(context,  field,  name);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  previous  =  boundField.createBoundField(context,  field,  name);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  previous  =  boundField.createBoundField(context,  field,  name);	      	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
67	[BUG]  [BUGGY]  BoundField  replacement  =  results.put(name,  boundField);  [CE]  cannot  find  symbol  results  [FE]                ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replacement  =  results.put(name,  boundField);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replacement  =  results.put(name,  boundField);	  BoundField    replacement    =    boundField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol  results	5	None	replace
68	[BUG]  [BUGGY]  BoundField  replacement  =  boundField.put(name,  new  JSONReference(field.getType()));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replacement  =  boundField.put(name,  new  JSONReference(field.getType()));  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replacement  =  boundField.put(name,  new  JSONReference(field.getType()));	  BoundField    replacement    =    boundField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
69	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.get(i);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.get(i);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.get(i);	  BoundField    replaced    =    boundField.get(name);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
70	[BUG]  [BUGGY]  BoundField  replaced  =  boundFields.get(name);  [CE]  cannot  find  symbol  boundFields  [FE]            ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundFields.get(name);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundFields.get(name);	  BoundField    replaced    =    boundField.get(name);    	non-compiled	[CE]  cannot  find  symbol  boundFields	2	None	replace
71	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.get(name,  null);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.get(name,  null);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.get(name,  null);	  BoundField    replaced    =    boundField.get(name);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
72	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.put(name,  current);  [CE]  cannot  find  symbol  current  [FE]        ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.put(name,  current);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.put(name,  current);	  BoundField    replaced    =    boundField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol  current	1	None	replace
73	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.put(name,  new  Object[]  {  result  }  );  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.put(name,  new  Object[]  {  result  }  );  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.put(name,  new  Object[]  {  result  }  );	  BoundField    replaced    =    boundField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
74	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.remove(serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.remove(serializedName);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.remove(serializedName);	  BoundField    replaced    =    boundField.remove(name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	6	None	replace
75	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.put(name,  new  BoundField(serializedName));  [CE]  cannot  find  symbol  serializedName  [FE]          ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.put(name,  new  BoundField(serializedName));  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.put(name,  new  BoundField(serializedName));	  BoundField    replaced    =    bindingField.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol  serializedName	9	None	replace
76	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.get(serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]          ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.get(serializedName);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.get(serializedName);	  BoundField    replaced    =    boundField.get(name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	2	None	replace
77	[BUG]  [BUGGY]  BoundField  replaced  =  fieldNames.get(name);  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  fieldNames.get(name);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  fieldNames.get(name);	  BoundField    replaced    =    boundField.get(name);    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	2	None	replace
78	[BUG]  [BUGGY]  Field[]  previous  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  Field[]  previous  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	Field[]  previous  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);	      	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
79	[BUG]  [BUGGY]  BoundField  previous  =  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialized);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  previous  =  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialized);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  previous  =  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialized);	      	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
80	[BUG]  [BUGGY]  BoundField  previous  =  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  previous  =  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  previous  =  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);	      	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
81	[BUG]  [BUGGY]  BoundField  replaced  =  fields.put(name,  result);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  fields.put(name,  result);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  fields.put(name,  result);	  BoundField    replaced    =    boundFields.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
82	[BUG]  [BUGGY]  BoundField  replaced  =  boundFields.put(name,  new  Integer(i));  [CE]  cannot  find  symbol  boundFields  [FE]              ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundFields.put(name,  new  Integer(i));  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundFields.put(name,  new  Integer(i));	  BoundField    replaced    =    boundFields.put(name,    result);    	non-compiled	[CE]  cannot  find  symbol  boundFields	3	None	replace
83	[BUG]  [BUGGY]  BoundField  replaced  =  fields.put(name,  boundField);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  fields.put(name,  boundField);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  fields.put(name,  boundField);	  BoundField    replaced    =    fieldNames.put(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
84	[BUG]  [BUGGY]  BoundField  replaced  =  results.remove(name,  boundField);  [CE]  cannot  find  symbol  results  [FE]          ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  results.remove(name,  boundField);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  results.remove(name,  boundField);	  BoundField    replaced    =    boundField.remove(name,    result);    	non-compiled	[CE]  cannot  find  symbol  results	11	None	replace
85	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.remove(name,  current);  [CE]  cannot  find  symbol  current  [FE]            ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  boundField.remove(name,  current);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.remove(name,  current);	  BoundField    replaced    =    boundField.remove(name,    result);    	non-compiled	[CE]  cannot  find  symbol  current	11	None	replace
86	[BUG]  [BUGGY]  BoundField  replaced  =  result.get(name,  boundField,  fieldType);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);    [BUGGY]  BoundField  replaced  =  result.get(name,  boundField,  fieldType);  [BUGGY]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  result.get(name,  boundField,  fieldType);	  BoundField    replaced    =    result.get(name,    boundField);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	4	None	replace
