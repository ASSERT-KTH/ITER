bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.put(name,  result);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]  BoundField  replaced  =  boundField.put(name,  result);  [BUGGY]  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.put(name,  result);	BoundField  replaced  =  result.put(name,  boundField);  	non-compiled	[CE]  cannot  find  symbol	83	None	replace
2	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.get(name);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]  BoundField  replaced  =  boundField.get(name);  [BUGGY]  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.get(name);	BoundField  replaced  =  result.put(name,  boundField);  	non-compiled	[CE]  cannot  find  symbol	83	None	replace
3	[BUG]  [BUGGY]  BoundField  replaced  =  boundFields.put(name,  result);  [CE]  cannot  find  symbol  boundFields  [FE]        ComparisonFailure  [CONTEXT]  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]  BoundField  replaced  =  boundFields.put(name,  result);  [BUGGY]  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundFields.put(name,  result);	BoundField  replaced  =  result.put(name,  boundField);  	non-compiled	[CE]  cannot  find  symbol  boundFields	83	None	replace
4	[BUG]  [BUGGY]  BoundField  replaced  =  result.get(name,  boundField);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure  [CONTEXT]  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]  BoundField  replaced  =  result.get(name,  boundField);  [BUGGY]  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  result.get(name,  boundField);	BoundField  replaced  =  result.put(name,  boundField);  	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	83	None	replace
5	[BUG]  [BUGGY]  BoundField  replacement  =  boundField.put(name,  result);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure  [CONTEXT]  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]  BoundField  replacement  =  boundField.put(name,  result);  [BUGGY]  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replacement  =  boundField.put(name,  result);	BoundField  replaced  =  result.put(name,  boundField);  	non-compiled	[CE]  cannot  find  symbol	83	None	replace
6	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.remove(name);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure  [CONTEXT]  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]  BoundField  replaced  =  boundField.remove(name);  [BUGGY]  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.remove(name);	BoundField  replaced  =  result.put(name,  boundField);  	non-compiled	[CE]  cannot  find  symbol	83	None	replace
7	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  replaced  [FE]                ComparisonFailure  [CONTEXT]  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    [BUGGY]  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	  	BoundField  replaced  =  result.put(name,  boundField);  	non-compiled	[CE]  cannot  find  symbol  replaced	83	None	replace
8	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.get(name,  result);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]  BoundField  replaced  =  boundField.get(name,  result);  [BUGGY]  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.get(name,  result);	BoundField  replaced  =  result.put(name,  boundField);  	non-compiled	[CE]  cannot  find  symbol	83	None	replace
9	[BUG]  [BUGGY]  BoundField  replaced  =  bindingField.put(name,  result);  [CE]  cannot  find  symbol  bindingField  [FE]      ComparisonFailure  [CONTEXT]  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]  BoundField  replaced  =  bindingField.put(name,  result);  [BUGGY]  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  bindingField.put(name,  result);	BoundField  replaced  =  result.put(name,  boundField);  	non-compiled	[CE]  cannot  find  symbol  bindingField	83	None	replace
10	[BUG]  [BUGGY]  BoundField  replaced  =  fieldNames.put(name,  boundField);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]  BoundField  replaced  =  fieldNames.put(name,  boundField);  [BUGGY]  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  fieldNames.put(name,  boundField);	BoundField  replaced  =  result.put(name,  boundField);  	non-compiled	[CE]  cannot  find  symbol	83	None	replace
11	[BUG]  [BUGGY]  BoundField  replaced  =  boundField.remove(name,  result);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]  BoundField  replaced  =  boundField.remove(name,  result);  [BUGGY]  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	165	165	1	replace	BoundField  replaced  =  boundField.remove(name,  result);	BoundField  replaced  =  result.put(name,  boundField);  	non-compiled	[CE]  cannot  find  symbol	83	None	replace
