bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  nisipr  =  fieldNamingPolicy.translateName(f);  [CE]  cannot  find  symbol  nisipr  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  nisipr  =  fieldNamingPolicy.translateName(f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	nisipr  =  fieldNamingPolicy.translateName(f);	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(annotation    >>    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol  nisipr	36	None	replace
2	[BUG]  [BUGGY]  nisip  =  fieldNamingPolicy.translateName(f);  [CE]  cannot  find  symbol  nisip  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  nisip  =  fieldNamingPolicy.translateName(f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	nisip  =  fieldNamingPolicy.translateName(f);	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(annotation    >>    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol  nisip	36	None	replace
3	[BUG]  [BUGGY]  String  serializedName  =  methodNamingPolicy.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  methodNamingPolicy  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  methodNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  methodNamingPolicy.getAnnotation(SerializedName.class);	  String    serializedName    =    beanNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  methodNamingPolicy	133	None	replace
4	[BUG]  [BUGGY]  String  serializedName  =  annotation.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  annotation.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  annotation.getAnnotation(SerializedName.class);	  String    serializedName    =    beanNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
5	[BUG]  [BUGGY]  String  serializedName  =  scope.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  scope  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  scope.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  scope.getAnnotation(SerializedName.class);	  String    serializedName    =    beanNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  scope	133	None	replace
6	[BUG]  [BUGGY]  while(annotation!=  null  &&  annotation.value()  >  0)  {  String  serializedName  =  annotation.value();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null  &&  annotation.value()  >  0)  {  String  serializedName  =  annotation.value();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null  &&  annotation.value()  >  0)  {  String  serializedName  =  annotation.value();	  While(annotation!=    null    &&    annotation.value()    >    0)    {    String    serializedName    =    annotation.value();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
7	[BUG]  [BUGGY]  if(name!=  null)  {  while(annotation!=  null  &&  annotation.value()  >  0)  {  String  serializedName  =  annotation.value();  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  while(annotation!=  null  &&  annotation.value()  >  0)  {  String  serializedName  =  annotation.value();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  while(annotation!=  null  &&  annotation.value()  >  0)  {  String  serializedName  =  annotation.value();  }	  While(annotation!=    null    &&    annotation.value()    >    0)    {    String    serializedName    =    annotation.value();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
8	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  annotation.value();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	String  serializedName  =  annotation.value();	  While(annotation!=    null    &&    annotation.value()    >    0)    {    String    serializedName    =    annotation.value();    	compilable	  [FE]  NullPointerException  	4	9	replace
9	[BUG]  [BUGGY]  String  serializedName  =  annotation.value();  [FE]  NullPointerException  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  annotation.value();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  annotation.value();	  While(annotation!=    null    &&    annotation.value()    >    0)    {    String    serializedName    =    annotation.value();    	compilable	  [FE]  NullPointerException  	4	9	replace
10	[BUG]  [BUGGY]  if(name!=  null)  {  while(annotation!=  null  &&  annotation.value()  >  0)  {  serializedName  =  annotation.value();  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  while(annotation!=  null  &&  annotation.value()  >  0)  {  serializedName  =  annotation.value();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  while(annotation!=  null  &&  annotation.value()  >  0)  {  serializedName  =  annotation.value();  }	  While(annotation!=    null    &&    annotation.value()    >    0)    {    String    serializedName    =    annotation.value();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value()  <  0)  {  String  serializedName  =  annotation.value();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  annotation.value()  <  0)  {  String  serializedName  =  annotation.value();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value()  <  0)  {  String  serializedName  =  annotation.value();	  While(annotation!=    null    &&    annotation.value()    >    0)    {    String    serializedName    =    annotation.value();    	non-compiled	[CE]  ';'  expected	4	None	replace
12	[BUG]  [BUGGY]  if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation    >=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
13	[BUG]  [BUGGY]  if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation    >=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
14	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(Name.class);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(Name.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(Name.class);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
15	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(name.class);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(name.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(name.class);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
16	[BUG]  [BUGGY]  SerializedName  serializedName  =  name.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  name.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  name.getAnnotation(SerializedName.class);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
17	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(Serializable.class);  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(Serializable.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(Serializable.class);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
18	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(serializedName.class);  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(serializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(serializedName.class);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
19	[BUG]  [BUGGY]  if(name  ==  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation    ==    null)    {    return    Collections.emptyList();    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
20	[BUG]  [BUGGY]  if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation    ==    null)    {    return    Collections.emptyList();    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
21	[BUG]  [BUGGY]  if(name  ==  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation    ==    null)    {    return    Collections.emptyList();    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
22	[BUG]  [BUGGY]  While(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  While(annotation!=    null)    {    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	30	None	replace
23	[BUG]  [BUGGY]  while(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
24	[BUG]  [BUGGY]  While(annotation!=  null)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  While(annotation!=    null)    {    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	30	None	replace
25	[BUG]  [BUGGY]  Annotation  annotation  =  annotation.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  annotation.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  annotation.getAnnotation(SerializedName.class);	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation    >=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
26	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
27	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name,  serializedName);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name,  serializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name,  serializedName);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
28	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name,  f);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name,  f);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
29	[BUG]  [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class,  name);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class,  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  f.getAnnotation(SerializedName.class,  name);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
30	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name,  deserializedName);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name,  deserializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name,  deserializedName);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
31	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  serialize);  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  serialize);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  serialize);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
32	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializationName.class,  name);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializationName.class,  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializationName.class,  name);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializationName.class);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
33	[BUG]  [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializationName.class);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializationName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  f.getAnnotation(SerializationName.class);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializationName.class);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
34	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializationName,  name.class);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializationName,  name.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializationName,  name.class);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializationName.class);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
35	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializationName.class),  name);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializationName.class),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializationName.class),  name);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializationName.class);    	non-compiled	[CE]  ';'  expected	117	None	replace
36	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializationName.class));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializationName.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializationName.class));	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializationName.class);    	non-compiled	[CE]  ';'  expected	117	None	replace
37	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value()  >  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  annotation.value()  >  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value()  >  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  ';'  expected	80	None	replace
38	[BUG]  [BUGGY]  FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class);  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class);	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(name    >>    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  incompatible  types	69	None	replace
39	[BUG]  [BUGGY]  Name  name  =  fieldNamingPolicy.translateName(f);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Name  name  =  fieldNamingPolicy.translateName(f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Name  name  =  fieldNamingPolicy.translateName(f);	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(name    >>    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
40	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f);  [CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  name  =  fieldNamingPolicy.translateName(f);	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(name    >>    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)	69	None	replace
41	[BUG]  [BUGGY]  FieldNamingStrategy  factory  =  fieldNamingPolicy.getFunctionNamingStrategy();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy  factory  =  fieldNamingPolicy.getFunctionNamingStrategy();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy  factory  =  fieldNamingPolicy.getFunctionNamingStrategy();	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(name    >>    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
42	[BUG]  [BUGGY]  FieldNamingStrategy  factory  =  f.getFunctionNamingPolicy();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy  factory  =  f.getFunctionNamingPolicy();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy  factory  =  f.getFunctionNamingPolicy();	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(name    >>    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
43	[BUG]  [BUGGY]  FieldNamingStrategy  factory  =  fieldNamingPolicy.getFactory();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy  factory  =  fieldNamingPolicy.getFactory();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy  factory  =  fieldNamingPolicy.getFactory();	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(name    >>    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
44	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	82	8	replace
45	[BUG]  [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	82	8	replace
46	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  [CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;	82	None	replace
47	[BUG]  [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	135	None	replace
48	[BUG]  [BUGGY]  serialize.handleMissingName(name,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serialize  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  serialize.handleMissingName(name,  f.getAnnotation(SerializedName.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	serialize.handleMissingName(name,  f.getAnnotation(SerializedName.class));	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serialize	135	None	replace
49	[BUG]  [BUGGY]  serializedName.handleMissingName(name,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serializedName  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  serializedName.handleMissingName(name,  f.getAnnotation(SerializedName.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	serializedName.handleMissingName(name,  f.getAnnotation(SerializedName.class));	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serializedName	135	None	replace
50	[BUG]  [BUGGY]  handleMissingName(name,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  handleMissingName(name,  f.getAnnotation(SerializedName.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	handleMissingName(name,  f.getAnnotation(SerializedName.class));	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
51	[BUG]  [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	135	None	replace
52	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class);  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class);	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  incompatible  types	135	None	replace
53	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	55	1	add
54	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	55	1	add
55	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	55	1	add
56	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	55	1	add
57	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	55	1	add
58	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	55	1	add
59	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	55	1	add
60	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	55	1	add
61	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	55	None	add
62	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  If(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  If(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    If(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ';'  expected	55	None	add
63	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	55	1	add
64	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	55	1	add
65	[BUG]  [BUGGY]  if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
66	[BUG]  [BUGGY]  if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
67	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
68	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
69	[BUG]  [BUGGY]  if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [CE]  unclosed  string  literal  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  unclosed  string  literal	131	None	replace
70	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [CE]  unclosed  string  literal  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  unclosed  string  literal	131	None	replace
71	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	while(annotation!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    return    Collections.singletonList(name);    }    	compilable	  [FE]  NullPointerException  	5	9	replace
72	[BUG]  [BUGGY]  while(annotation!=  null)  {  return  Collections.singletonList(name);  }  [FE]  NullPointerException  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    return    Collections.singletonList(name);    }    	compilable	  [FE]  NullPointerException  	5	9	replace
73	[BUG]  [BUGGY]  While(annotation!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }	  While(annotation!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
74	[BUG]  [BUGGY]  While(annotation!=  null  &&  name.length()  >  0)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  name.length()  >  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  name.length()  >  0)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
75	[BUG]  [BUGGY]  While(annotation!=  null)  {  return  Collections.singletonList(name,  annotation.value());  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  return  Collections.singletonList(name,  annotation.value());  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  return  Collections.singletonList(name,  annotation.value());  }	  While(annotation!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
76	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
77	[BUG]  [BUGGY]  Annotation  serialized  =  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  serialized  =  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  serialized  =  f.getAnnotation(SerializedName.class);	  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
78	[BUG]  [BUGGY]  Annotation  serialize  =  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  serialize  =  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  serialize  =  f.getAnnotation(SerializedName.class);	  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
79	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  <?>  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  <?>  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
80	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  [CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation    >=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;	43	None	replace
81	[BUG]  [BUGGY]  Annotation  annotation  =  f.translateName(fieldNamingPolicy);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  f.translateName(fieldNamingPolicy);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  f.translateName(fieldNamingPolicy);	  Annotation    annotation    =    fieldNamingPolicy.translateName(name);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
82	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(name,  f);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.translateName(name,  f);	  Annotation    annotation    =    fieldNamingPolicy.translateName(name);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
83	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(f,  name);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(f,  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.translateName(f,  name);	  Annotation    annotation    =    fieldNamingPolicy.translateName(name);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
84	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(annotation);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(annotation);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.translateName(annotation);	  Annotation    annotation    =    fieldNamingPolicy.translateName(name);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
85	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(serializedName);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(serializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.translateName(serializedName);	  Annotation    annotation    =    fieldNamingPolicy.translateName(name);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
86	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }  [CE]  incompatible  types  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.unmodifiableList(serializedName);    }    	non-compiled	[CE]  incompatible  types	102	None	replace
87	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }  [CE]  method  unmodifiableList  in  class  Collections  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.unmodifiableList(serializedName);    }    	non-compiled	[CE]  method  unmodifiableList  in  class  Collections  cannot  be  applied  to  given  types;	102	None	replace
88	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.unmodifiableList(serializedName);  }  [CE]  incompatible  types  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.unmodifiableList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.unmodifiableList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.unmodifiableList(serializedName);    }    	non-compiled	[CE]  incompatible  types	102	None	replace
89	[BUG]  [BUGGY]  if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.unmodifiableList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
90	[BUG]  [BUGGY]  if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.unmodifiableList(serializedName);  }  [CE]  illegal  start  of  type  [FE]                        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.unmodifiableList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.unmodifiableList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.unmodifiableList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
91	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.unmodifiableList(serializedName);  }  [CE]  method  unmodifiableList  in  class  Collections  cannot  be  applied  to  given  types;  [FE]                          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.unmodifiableList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.unmodifiableList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.unmodifiableList(serializedName);    }    	non-compiled	[CE]  method  unmodifiableList  in  class  Collections  cannot  be  applied  to  given  types;	102	None	replace
92	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
93	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
94	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
95	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
96	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
97	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
98	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  >=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	73	None	add
99	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  If(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  If(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    If(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ';'  expected	73	None	add
100	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  If(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  If(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    If(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ';'  expected	73	None	add
101	[BUG]  [BUGGY]  while(annotation!=  null)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    if(name    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
102	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(name);  [CE]  incompatible  types  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(name);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    Collections.singletonList(serializedName);    	non-compiled	[CE]  incompatible  types	26	None	replace
103	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName,  name);  [CE]  incompatible  types  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName,  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName,  name);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    Collections.singletonList(serializedName);    	non-compiled	[CE]  incompatible  types	26	None	replace
104	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name);  return  Collections.singletonList(serializedName);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String)  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name);  return  Collections.singletonList(serializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  name);  return  Collections.singletonList(serializedName);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    Collections.singletonList(serializedName);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String)	26	None	replace
105	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(name,  serializedName);  [CE]  incompatible  types  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(name,  serializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(name,  serializedName);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    Collections.singletonList(serializedName);    	non-compiled	[CE]  incompatible  types	26	None	replace
106	[BUG]  [BUGGY]  if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
107	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
108	[BUG]  [BUGGY]  if(annotation  ==  null)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name    {    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
109	[BUG]  [BUGGY]  while(annotation!=  null  &&  annotation.value()  >  0)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null  &&  annotation.value()  >  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null  &&  annotation.value()  >  0)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null    &&    annotation.value()    >    0)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	90	None	replace
110	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value()  <  0)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  annotation.value()  <  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value()  <  0)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null    &&    annotation.value()    >    0)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
111	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value()  ==  0)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  annotation.value()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value()  ==  0)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null    &&    annotation.value()    >    0)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
112	[BUG]  [BUGGY]  While(annotation!=  null  ||  annotation.value()  >  0)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  ||  annotation.value()  >  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  ||  annotation.value()  >  0)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null    &&    annotation.value()    >    0)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
113	[BUG]  [BUGGY]  While(annotation  ==  null  &&  annotation.value()  >  0)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation  ==  null  &&  annotation.value()  >  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation  ==  null  &&  annotation.value()  >  0)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null    &&    annotation.value()    >    0)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
114	[BUG]  [BUGGY]  String  serializedName  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name);	  String    serializedName    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
115	[BUG]  [BUGGY]  String  serializedName  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f);	  String    serializedName    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
116	[BUG]  [BUGGY]  String  serializedName  =  dataArea.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  dataArea  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  dataArea.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  dataArea.getAnnotation(SerializedName.class);	  String    serializedName    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  dataArea	50	None	replace
117	[BUG]  [BUGGY]  if(name!=  null)  {  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(annotation    [Delete]    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
118	[BUG]  [BUGGY]  if(name!=  null)  {  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(annotation    [Delete]    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
119	[BUG]  [BUGGY]  while(annotation!=  null  &&  name.length()  >  0)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null  &&  name.length()  >  0)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null  &&  name.length()  >  0)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
120	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class),  name,  fieldNamingPolicy);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class),  name,  fieldNamingPolicy);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class),  name,  fieldNamingPolicy);	  String    serializedName    =    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  ';'  expected	51	None	replace
121	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class),  name  +  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class),  name  +  1);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class),  name  +  1);	  String    serializedName    =    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  ';'  expected	51	None	replace
122	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class),  name,  beanNamingPolicy);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class),  name,  beanNamingPolicy);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class),  name,  beanNamingPolicy);	  String    serializedName    =    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  ';'  expected	51	None	replace
123	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class),  name,  deserialize);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class),  name,  deserialize);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class),  name,  deserialize);	  String    serializedName    =    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  ';'  expected	51	None	replace
124	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class),  name,  null);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class),  name,  null);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class),  name,  null);	  String    serializedName    =    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
125	[BUG]  [BUGGY]  if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(annotation    ==    null)    {    return    Collections.singletonList(name;    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
126	[BUG]  [BUGGY]  if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
127	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
128	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }	  	compilable	  [FE]  ComparisonFailure  	21	1	add
129	[BUG]  [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }	  	compilable	  [FE]  ComparisonFailure  	21	1	add
130	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  if(name  ==  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    if(name  ==  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }	  	compilable	  [FE]  ComparisonFailure  	21	1	add
131	[BUG]  [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  if(name  ==  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  if(name  ==  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    if(name  ==  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }	  	compilable	  [FE]  ComparisonFailure  	21	1	add
132	[BUG]  [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  If(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  If(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    If(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }	  	non-compiled	[CE]  ';'  expected	21	None	add
133	[BUG]  [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  if(name  >=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  if(name  >=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    if(name  >=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	21	None	add
134	[BUG]  [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  if(name  >>  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  if(name  >>  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    if(name  >>  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	21	None	add
135	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  if(name!=  null)  {  String  serializedName  =  name.toUpperCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    if(name!=  null)  {  String  serializedName  =  name.toUpperCase();  return  Collections.singletonList(serializedName);  }	  	compilable	  [FE]  ComparisonFailure  	21	1	add
136	[BUG]  [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  if(name!=  null)  {  String  serializedName  =  name.toUpperCase();  return  Collections.singletonList(serializedName);  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  if(name!=  null)  {  String  serializedName  =  name.toUpperCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    if(name!=  null)  {  String  serializedName  =  name.toUpperCase();  return  Collections.singletonList(serializedName);  }	  	compilable	  [FE]  ComparisonFailure  	21	1	add
137	[BUG]  [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  if(name!=  null)  {  String  name  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)  [FE]                ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  if(name!=  null)  {  String  name  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    if(name!=  null)  {  String  name  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }	  	non-compiled	[CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)	21	None	add
138	[BUG]  [BUGGY]  serialize.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serialize  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  serialize.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	serialize.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serialize	127	None	replace
139	[BUG]  [BUGGY]  FrederickExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  FrederickExceptionHandler  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FrederickExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FrederickExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  FrederickExceptionHandler	127	None	replace
140	[BUG]  [BUGGY]  FieldUtils.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  FieldUtils  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldUtils.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldUtils.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  FieldUtils	127	None	replace
141	[BUG]  [BUGGY]  SerializedName  serialized  =  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serialized  =  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serialized  =  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  ';'  expected	127	None	replace
142	[BUG]  [BUGGY]  FrederickExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  serializedName.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serializedName  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FrederickExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  serializedName.getAnnotation(SerializedName.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FrederickExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  serializedName.getAnnotation(SerializedName.class));	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serializedName	127	None	replace
143	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class),  name.getAnnotation(SerializedName.class));  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class),  name.getAnnotation(SerializedName.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class),  name.getAnnotation(SerializedName.class));	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  ';'  expected	127	None	replace
144	[BUG]  [BUGGY]  DeserializedName  f  =  f.getAnnotation(SerializedName.class),  name.getAnnotation(SerializedName.class));  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  DeserializedName  f  =  f.getAnnotation(SerializedName.class),  name.getAnnotation(SerializedName.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	DeserializedName  f  =  f.getAnnotation(SerializedName.class),  name.getAnnotation(SerializedName.class));	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  ';'  expected	127	None	replace
145	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  name  =  f.getAnnotation(SerializedName.class);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  String  name  =  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  name  =  f.getAnnotation(SerializedName.class);	  While(annotation!=    null)    {    String    name    =    fieldNamingPolicy.translateName(f);    	non-compiled	[CE]  ';'  expected	31	None	replace
146	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);	  While(annotation!=    null)    {    String    name    =    fieldNamingPolicy.translateName(f);    	non-compiled	[CE]  ';'  expected	31	None	replace
147	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  name  =  fieldNamingPolicy.getName();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  String  name  =  fieldNamingPolicy.getName();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  name  =  fieldNamingPolicy.getName();	  While(annotation!=    null)    {    String    name    =    fieldNamingPolicy.translateName(f);    	non-compiled	[CE]  ';'  expected	31	None	replace
148	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  name  =  annotation.value();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  String  name  =  annotation.value();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  name  =  annotation.value();	  While(annotation!=    null)    {    String    name    =    fieldNamingPolicy.translateName(f);    	non-compiled	[CE]  ';'  expected	31	None	replace
149	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  fieldNamingPolicy.translateName(f);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  <?>  annotation  =  fieldNamingPolicy.translateName(f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  <?>  annotation  =  fieldNamingPolicy.translateName(f);	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
150	[BUG]  [BUGGY]  while(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }	  While(annotation!=    null)    {    String    serializedName    =    annotation.value();    if(serializedName!=    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
151	[BUG]  [BUGGY]  While(annotation!=  null  &&  name.length()  >  0)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  name.length()  >  0)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  name.length()  >  0)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }	  While(annotation!=    null)    {    String    serializedName    =    annotation.value();    if(serializedName!=    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  ';'  expected	110	None	replace
152	[BUG]  [BUGGY]  While(annotation  ==  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation  ==  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation  ==  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }	  While(annotation!=    null)    {    String    serializedName    =    annotation.value();    if(serializedName!=    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  ';'  expected	110	None	replace
153	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  +  1]);  [CE]  incompatible  types  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  +  1]);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  +  1]);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    fieldNames.toArray(new    String[fieldNames.size()    ]);    	non-compiled	[CE]  incompatible  types	25	None	replace
154	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNamingPolicy.size()  ]);  [CE]  incompatible  types  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNamingPolicy.size()  ]);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNamingPolicy.size()  ]);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    fieldNames.toArray(new    String[fieldNames.size()    ]);    	non-compiled	[CE]  incompatible  types	25	None	replace
155	[BUG]  [BUGGY]  String  serializedName  =  fieldNames.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  ]);  [CE]  cannot  find  symbol  fieldNames  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  fieldNames.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  ]);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  fieldNames.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  ]);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    fieldNames.toArray(new    String[fieldNames.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	25	None	replace
156	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name);  return  fieldNames.toArray(new  String[fieldNames.size()  ]);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String)  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name);  return  fieldNames.toArray(new  String[fieldNames.size()  ]);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  name);  return  fieldNames.toArray(new  String[fieldNames.size()  ]);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    fieldNames.toArray(new    String[fieldNames.size()    ]);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String)	25	None	replace
157	[BUG]  [BUGGY]  String  serializedName  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  ]);  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  ]);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  ]);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    fieldNames.toArray(new    String[fieldNames.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
158	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  -  1]);  [CE]  incompatible  types  [FE]                        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  -  1]);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  -  1]);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    fieldNames.toArray(new    String[fieldNames.size()    ]);    	non-compiled	[CE]  incompatible  types	25	None	replace
159	[BUG]  [BUGGY]  Constructor  constructor  =  f.getConstructor();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Constructor  constructor  =  f.getConstructor();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Constructor  constructor  =  f.getConstructor();	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(name    >=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
160	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	124	1	add
161	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	124	1	add
162	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	124	1	add
163	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	124	1	add
164	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	124	1	add
165	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	124	1	add
166	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null  ||  name.length()  >=  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null  ||  name.length()  >=  0)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	124	1	add
167	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null  ||  name.length()  >=  0)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null  ||  name.length()  >=  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null  ||  name.length()  >=  0)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	124	1	add
168	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  If(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  If(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    If(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ';'  expected	124	None	add
169	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    if(annotation  >=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	124	None	add
170	[BUG]  [BUGGY]  if(annotation  ==  null)  {  if(name!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  if(name!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  if(name!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name    [Delete]    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
171	[BUG]  [BUGGY]  Annotation  serialized  =  annotation.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  serialized  =  annotation.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  serialized  =  annotation.getAnnotation(SerializedName.class);	  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name    [Delete]    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
172	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  name);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String)  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  name);	  FieldNamingStrategy    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String)	23	None	replace
173	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy  constructor  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy  constructor  =  fieldNamingPolicy.getAnnotation(SerializedName.class);	  FieldNamingStrategy    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
174	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class),  name);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class),  name);	  FieldNamingStrategy    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	23	None	replace
175	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class)+  name;  [CE]  incompatible  types  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class)+  name;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class)+  name;	  FieldNamingStrategy    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  incompatible  types	23	None	replace
176	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  serializedName);	  FieldNamingStrategy    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	23	None	replace
177	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  typeFactory.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  typeFactory  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy  constructor  =  typeFactory.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy  constructor  =  typeFactory.getAnnotation(SerializedName.class);	  FieldNamingStrategy    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  typeFactory	23	None	replace
178	[BUG]  [BUGGY]  if(name  ==  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    If(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
179	[BUG]  [BUGGY]  while(annotation!=  null)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    if(annotation.value()    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
180	[BUG]  [BUGGY]  While(annotation!=  null)  {  if(annotation.value()!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  if(annotation.value()!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  if(annotation.value()!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    if(annotation.value()    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	114	None	replace
181	[BUG]  [BUGGY]  While(annotation!=  null)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }	  While(annotation!=    null)    {    if(annotation.value()    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	114	None	replace
182	[BUG]  [BUGGY]  While(annotation  ==  null)  {  if(annotation.value()!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation  ==  null)  {  if(annotation.value()!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation  ==  null)  {  if(annotation.value()!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    if(annotation.value()    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	114	None	replace
183	[BUG]  [BUGGY]  while(annotation!=  null  &&  annotation.value()  ==  null)  {  if(annotation.value().equals(name))  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null  &&  annotation.value()  ==  null)  {  if(annotation.value().equals(name))  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null  &&  annotation.value()  ==  null)  {  if(annotation.value().equals(name))  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    if(annotation.value()    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
184	[BUG]  [BUGGY]  if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
185	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	71	1	add
186	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	71	1	add
187	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	71	1	add
188	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	71	1	add
189	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	71	1	add
190	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	71	1	add
191	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	71	1	add
192	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	71	1	add
193	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	71	None	add
194	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  If(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  If(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    If(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ';'  expected	71	None	add
195	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  >=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	71	None	add
196	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	9	1	add
197	[BUG]  [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	9	1	add
198	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	9	1	add
199	[BUG]  [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	9	1	add
200	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	9	1	add
201	[BUG]  [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	9	1	add
202	[BUG]  [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	9	None	add
203	[BUG]  [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  >=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	9	None	add
204	[BUG]  [BUGGY]  aughtExceptionHandler(fieldNamingPolicy.translateName(name,  f));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtExceptionHandler(fieldNamingPolicy.translateName(name,  f));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtExceptionHandler(fieldNamingPolicy.translateName(name,  f));	  aughtExceptionHandler(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	140	None	replace
205	[BUG]  [BUGGY]  aughtExceptionHandler(fieldNamingPolicy.translateName(name,  serializedName));  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtExceptionHandler(fieldNamingPolicy.translateName(name,  serializedName));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtExceptionHandler(fieldNamingPolicy.translateName(name,  serializedName));	  aughtExceptionHandler(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  cannot  find  symbol  serializedName	140	None	replace
206	[BUG]  [BUGGY]  aughtExceptionHandler(annotation,  fieldNamingPolicy.translateName(name));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtExceptionHandler(annotation,  fieldNamingPolicy.translateName(name));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtExceptionHandler(annotation,  fieldNamingPolicy.translateName(name));	  aughtExceptionHandler(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	140	None	replace
207	[BUG]  [BUGGY]  aughtExceptionHandler(annotation.translateName(name));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtExceptionHandler(annotation.translateName(name));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtExceptionHandler(annotation.translateName(name));	  aughtExceptionHandler(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
208	[BUG]  [BUGGY]  aughtExceptionHandler(fieldNamingPolicy.translateName(name,  annotation));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtExceptionHandler(fieldNamingPolicy.translateName(name,  annotation));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtExceptionHandler(fieldNamingPolicy.translateName(name,  annotation));	  aughtExceptionHandler(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	140	None	replace
209	[BUG]  [BUGGY]  aughtExceptionHandler(fieldNamingPolicy.translateName(name),  f);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtExceptionHandler(fieldNamingPolicy.translateName(name),  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtExceptionHandler(fieldNamingPolicy.translateName(name),  f);	  aughtExceptionHandler(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	140	None	replace
210	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  [CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);	  	non-compiled	[CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)	48	None	add
211	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  serializedName  =  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    serializedName  =  f.getAnnotation(SerializedName.class);	  	compilable	  [FE]  ComparisonFailure  	48	1	add
212	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  serializedName  =  f.getAnnotation(SerializedName.class);  [FE]  ComparisonFailure  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  serializedName  =  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    serializedName  =  f.getAnnotation(SerializedName.class);	  	compilable	  [FE]  ComparisonFailure  	48	1	add
213	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name);  [CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)  [FE]        NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name);	  	non-compiled	[CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)	48	None	add
214	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  String  serializedName  =  f.getAnnotation(SerializedName.class);  [CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)  [FE]          NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  String  serializedName  =  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    String  serializedName  =  f.getAnnotation(SerializedName.class);	  	non-compiled	[CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)	48	None	add
215	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  incompatible  types  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  incompatible  types	103	None	replace
216	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  incompatible  types  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  incompatible  types	103	None	replace
217	[BUG]  [BUGGY]  if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
218	[BUG]  [BUGGY]  if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]                        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
219	[BUG]  [BUGGY]  Annotation  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
220	[BUG]  [BUGGY]  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  cannot  find  symbol  serializedName  [FE]                            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  cannot  find  symbol  serializedName	103	None	replace
221	[BUG]  [BUGGY]  Collections.  <  String>  boundFields  =  Lists.newArrayList();  [CE]  illegal  start  of  expression  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Collections.  <  String>  boundFields  =  Lists.newArrayList();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Collections.  <  String>  boundFields  =  Lists.newArrayList();	          Collections.    <    String>    boundFields    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
222	[BUG]  [BUGGY]  Collections.  <  String>  boundFields  =  Collections.EMPTY_LIST;  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Collections.  <  String>  boundFields  =  Collections.EMPTY_LIST;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Collections.  <  String>  boundFields  =  Collections.EMPTY_LIST;	          Collections.    <    String>    boundFields    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
223	[BUG]  [BUGGY]  Collections.  <  String>  boundFields  =  new  ArrayList  <  String>();  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Collections.  <  String>  boundFields  =  new  ArrayList  <  String>();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Collections.  <  String>  boundFields  =  new  ArrayList  <  String>();	          Collections.    <    String>    boundFields    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
224	[BUG]  [BUGGY]  Collections.  <  String>  boundFields  =  Collections.newArrayList();  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Collections.  <  String>  boundFields  =  Collections.newArrayList();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Collections.  <  String>  boundFields  =  Collections.newArrayList();	          Collections.    <    String>    boundFields    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
225	[BUG]  [BUGGY]  Collections.  <  String>  boundFields  =  Collections.synchronizedList(name);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Collections.  <  String>  boundFields  =  Collections.synchronizedList(name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Collections.  <  String>  boundFields  =  Collections.synchronizedList(name);	          Collections.    <    String>    boundFields    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
226	[BUG]  [BUGGY]  FieldNamingStrategy.handleMissingName(name);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy.handleMissingName(name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy.handleMissingName(name);	  aughtExceptionHandler.handleMissingName(name);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
227	[BUG]  [BUGGY]  fieldNamingPolicy.handleMissingName(name);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  fieldNamingPolicy.handleMissingName(name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	fieldNamingPolicy.handleMissingName(name);	  aughtExceptionHandler.handleMissingName(name);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
228	[BUG]  [BUGGY]  if(annotation.isExceptionHandler())  {  aughtExceptionHandler.handleMissingName(name);  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation.isExceptionHandler())  {  aughtExceptionHandler.handleMissingName(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation.isExceptionHandler())  {  aughtExceptionHandler.handleMissingName(name);  }	  aughtExceptionHandler.handleMissingName(name);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
229	[BUG]  [BUGGY]  if(annotation.isExceptionHandler())  {  aughtExceptionHandler.handleMissingName(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation.isExceptionHandler())  {  aughtExceptionHandler.handleMissingName(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation.isExceptionHandler())  {  aughtExceptionHandler.handleMissingName(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler.handleMissingName(name);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
230	[BUG]  [BUGGY]  ObjectConstructor  constructor.handleMissingName(name);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ObjectConstructor  constructor.handleMissingName(name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ObjectConstructor  constructor.handleMissingName(name);	  aughtExceptionHandler.handleMissingName(name);    	non-compiled	[CE]  ';'  expected	84	None	replace
231	[BUG]  [BUGGY]  serializedName.handleMissingName(name);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  serializedName.handleMissingName(name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	serializedName.handleMissingName(name);	  aughtExceptionHandler.handleMissingName(name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	84	None	replace
232	[BUG]  [BUGGY]  serialize.handleMissingName(name);  [CE]  cannot  find  symbol  serialize  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  serialize.handleMissingName(name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	serialize.handleMissingName(name);	  aughtExceptionHandler.handleMissingName(name);    	non-compiled	[CE]  cannot  find  symbol  serialize	84	None	replace
233	[BUG]  [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  if(serializedName.length()  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  if(serializedName.length()  ==  0)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  if(serializedName.length()  ==  0)  {  return  Collections.singletonList(serializedName);  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
234	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name.length()  ==  0)  {  return  Collections.singletonList(name);  }	  [Delete]    	compilable	  [FE]  NullPointerException  	126	9	replace
235	[BUG]  [BUGGY]  if(name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name.length()  ==  0)  {  return  Collections.singletonList(name);  }	  [Delete]    	compilable	  [FE]  NullPointerException  	126	9	replace
236	[BUG]  [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  if(serializedName.length()  ==  0)  {  return  Collections.unmodifiableList(serializedName);  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  if(serializedName.length()  ==  0)  {  return  Collections.unmodifiableList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  if(serializedName.length()  ==  0)  {  return  Collections.unmodifiableList(serializedName);  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
237	[BUG]  [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
238	[BUG]  [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
239	[BUG]  [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
240	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  +  1;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  +  1;	  String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    	compilable	  [FE]  NullPointerException  	116	9	replace
241	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  +  1;  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  +  1;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  +  1;	  String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    	compilable	  [FE]  NullPointerException  	116	9	replace
242	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + ", ";  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + ", ";	  String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    	compilable	  [FE]  NullPointerException  	116	9	replace
243	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + ", ";  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + ", ";  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + ", ";	  String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    	compilable	  [FE]  NullPointerException  	116	9	replace
244	[BUG]  [BUGGY]  String  serializedName  =  annotation.getAnnotation(SerializedName.class)+  name;  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  annotation.getAnnotation(SerializedName.class)+  name;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  annotation.getAnnotation(SerializedName.class)+  name;	  String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
245	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + ". ";  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + ". ";	  String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    	compilable	  [FE]  NullPointerException  	116	9	replace
246	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + ". ";  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + ". ";  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + ". ";	  String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    	compilable	  [FE]  NullPointerException  	116	9	replace
247	[BUG]  [BUGGY]  String  serializedName  =  name.getAnnotation(SerializedName.class)+  f;  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  name.getAnnotation(SerializedName.class)+  f;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  name.getAnnotation(SerializedName.class)+  f;	  String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
248	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + "_ ";  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + "_ ";	  String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    	compilable	  [FE]  NullPointerException  	116	9	replace
249	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + "_ ";  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + "_ ";  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + "_ ";	  String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    	compilable	  [FE]  NullPointerException  	116	9	replace
250	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  incompatible  types  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.    <    String>emptyList();    }    	non-compiled	[CE]  incompatible  types	98	None	replace
251	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.    <    String>emptyList();    }    	compilable	  [FE]  ComparisonFailure  	98	8	replace
252	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [FE]  ComparisonFailure  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.    <    String>emptyList();    }    	compilable	  [FE]  ComparisonFailure  	98	8	replace
253	[BUG]  [BUGGY]  if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.    <    String>emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
254	[BUG]  [BUGGY]  Annotation  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.    <    String>emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
255	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  incompatible  types  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.    <    String>emptyList();    }    	non-compiled	[CE]  incompatible  types	98	None	replace
256	[BUG]  [BUGGY]  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  cannot  find  symbol  serializedName  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.    <    String>emptyList();    }    	non-compiled	[CE]  cannot  find  symbol  serializedName	98	None	replace
257	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    	compilable	  [FE]  NullPointerException  	125	9	replace
258	[BUG]  [BUGGY]  if(name  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    	compilable	  [FE]  NullPointerException  	125	9	replace
259	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    	compilable	  [FE]  ComparisonFailure  	125	1	replace
260	[BUG]  [BUGGY]  if(name!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    	compilable	  [FE]  ComparisonFailure  	125	1	replace
261	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    	compilable	  [FE]  ComparisonFailure  	125	1	replace
262	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    	compilable	  [FE]  ComparisonFailure  	125	1	replace
263	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    	compilable	  [FE]  NullPointerException  	125	9	replace
264	[BUG]  [BUGGY]  if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [FE]  NullPointerException  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    	compilable	  [FE]  NullPointerException  	125	9	replace
265	[BUG]  [BUGGY]  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
266	[BUG]  [BUGGY]  FieldNamingPolicy.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingPolicy.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingPolicy.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name,    null);    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	141	None	replace
267	[BUG]  [BUGGY]  FieldNamingStrategy.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name,    null);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
268	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.translateName(f),  name,  null);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.translateName(f),  name,  null);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ObjectConstructor  constructor  =  fieldNamingPolicy.translateName(f),  name,  null);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name,    null);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
269	[BUG]  [BUGGY]  f.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  f.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	f.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name,    null);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
270	[BUG]  [BUGGY]  FieldNamingPolicy.printStackTrace(annotation.translateName(f),  name,  null);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingPolicy.printStackTrace(annotation.translateName(f),  name,  null);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingPolicy.printStackTrace(annotation.translateName(f),  name,  null);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name,    null);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
271	[BUG]  [BUGGY]  f.printStackTrace(fieldNamingPolicy.translateName(name),  null);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  f.printStackTrace(fieldNamingPolicy.translateName(name),  null);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	f.printStackTrace(fieldNamingPolicy.translateName(name),  null);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name,    null);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	141	None	replace
272	[BUG]  [BUGGY]  if(fieldNamingPolicy.translateName(f),  name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(fieldNamingPolicy.translateName(f),  name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(fieldNamingPolicy.translateName(f),  name!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name,    null);    	non-compiled	[CE]  	141	None	replace
273	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation        ==        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	38	1	add
274	[BUG]  [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation        ==        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	38	1	add
275	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation        ==        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	38	1	add
276	[BUG]  [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation        ==        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	38	1	add
277	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation        ==        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	38	1	add
278	[BUG]  [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation        ==        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	38	1	add
279	[BUG]  [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  If(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  If(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation        ==        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    If(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ';'  expected	38	None	add
280	[BUG]  [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation        ==        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	38	None	add
281	[BUG]  [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation        ==        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	38	None	add
282	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	123	1	replace
283	[BUG]  [BUGGY]  if(name!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	123	1	replace
284	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	123	8	replace
285	[BUG]  [BUGGY]  if(name  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	123	8	replace
286	[BUG]  [BUGGY]  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
287	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	123	1	replace
288	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	123	1	replace
289	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName,  name.class);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName,  name.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName,  name.class);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
290	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class),  name);  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class),  name);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	1	None	replace
291	[BUG]  [BUGGY]  Annotation  annotation  =  this.fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  this.fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  this.fieldNamingPolicy.getAnnotation(SerializedName.class);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
292	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class));	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	1	None	replace
293	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
294	[BUG]  [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  f.getAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
295	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
296	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
297	[BUG]  [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class);  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class);  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  f.getAnnotation(SerializedName.class);  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
298	[BUG]  [BUGGY]  While(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }	  While(annotation    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
299	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  While(annotation!=    null)    {    name    =    annotation.value();    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	111	None	replace
300	[BUG]  [BUGGY]  while(annotation!=  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    name    =    annotation.value();    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
301	[BUG]  [BUGGY]  while(annotation!=  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  While(annotation!=    null)    {    name    =    annotation.value();    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
302	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	53	1	add
303	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	53	1	add
304	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	53	1	add
305	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	53	1	add
306	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	53	1	add
307	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	53	1	add
308	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  If(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  If(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    If(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ';'  expected	53	None	add
309	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	53	None	add
310	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	53	None	add
311	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	53	1	add
312	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	53	1	add
313	[BUG]  [BUGGY]  while(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  While(annotation!=    null)    {    String    serializedName    =    annotation.value();    if(serializedName!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
314	[BUG]  [BUGGY]  while(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    String    serializedName    =    annotation.value();    if(serializedName!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
315	[BUG]  [BUGGY]  While(annotation  ==  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation  ==  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation  ==  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  While(annotation!=    null)    {    String    serializedName    =    annotation.value();    if(serializedName!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	108	None	replace
316	[BUG]  [BUGGY]  if(name  ==  null)  {  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null)  {  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    If(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
317	[BUG]  [BUGGY]  if(name  ==  null)  {  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null)  {  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    If(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
318	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation    {    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	143	1	replace
319	[BUG]  [BUGGY]  if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation    {    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	143	1	replace
320	[BUG]  [BUGGY]  if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    If(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
321	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    If(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
322	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    If(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	compilable	  [FE]  ComparisonFailure  	68	1	replace
323	[BUG]  [BUGGY]  if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  }  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    If(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	compilable	  [FE]  ComparisonFailure  	68	1	replace
324	[BUG]  [BUGGY]  FieldNamingStrategy.handleSerialization(name,  f);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy.handleSerialization(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy.handleSerialization(name,  f);	  aughtExceptionHandler.handleSerialization(name,    f);    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
325	[BUG]  [BUGGY]  serialize.handleSerialization(name,  f);  [CE]  cannot  find  symbol  serialize  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  serialize.handleSerialization(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	serialize.handleSerialization(name,  f);	  aughtExceptionHandler.handleSerialization(name,    f);    	non-compiled	[CE]  cannot  find  symbol  serialize	130	None	replace
326	[BUG]  [BUGGY]  Constructor  constructor.handleSerialization(name,  f);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Constructor  constructor.handleSerialization(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Constructor  constructor.handleSerialization(name,  f);	  aughtExceptionHandler.handleSerialization(name,    f);    	non-compiled	[CE]  ';'  expected	130	None	replace
327	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.handleSerialization(name,  f);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.handleSerialization(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ObjectConstructor  constructor  =  fieldNamingPolicy.handleSerialization(name,  f);	  aughtExceptionHandler.handleSerialization(name,    f);    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
328	[BUG]  [BUGGY]  f.handleSerialization(name,  annotation);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  f.handleSerialization(name,  annotation);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	f.handleSerialization(name,  annotation);	  aughtExceptionHandler.handleSerialization(name,    f);    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
329	[BUG]  [BUGGY]  ObjectConstructor  constructor.handleSerialization(name,  f);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ObjectConstructor  constructor.handleSerialization(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ObjectConstructor  constructor.handleSerialization(name,  f);	  aughtExceptionHandler.handleSerialization(name,    f);    	non-compiled	[CE]  ';'  expected	130	None	replace
330	[BUG]  [BUGGY]  Constructor.handleSerialization(name,  f);  [CE]  cannot  find  symbol  Constructor  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Constructor.handleSerialization(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Constructor.handleSerialization(name,  f);	  aughtExceptionHandler.handleSerialization(name,    f);    	non-compiled	[CE]  cannot  find  symbol  Constructor	130	None	replace
331	[BUG]  [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  name);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String)  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String[]  alternates  =  f.getAnnotation(SerializedName.class,  name);	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String)	24	None	replace
332	[BUG]  [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class),  name);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String[]  alternates  =  f.getAnnotation(SerializedName.class),  name);	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	24	None	replace
333	[BUG]  [BUGGY]  String[]  alternates  =  name.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String[]  alternates  =  name.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String[]  alternates  =  name.getAnnotation(SerializedName.class);	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
334	[BUG]  [BUGGY]  String[]  alternates  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String[]  alternates  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String[]  alternates  =  fieldNamingPolicy.getAnnotation(SerializedName.class);	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
335	[BUG]  [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class)+  name;  [CE]  incompatible  types  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class)+  name;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String[]  alternates  =  f.getAnnotation(SerializedName.class)+  name;	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  incompatible  types	24	None	replace
336	[BUG]  [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName,  name.class);  [CE]  cannot  find  symbol  SerializedName  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName,  name.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String[]  alternates  =  f.getAnnotation(SerializedName,  name.class);	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  SerializedName	24	None	replace
337	[BUG]  [BUGGY]  Annotation  annotation  =  getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  getAnnotation(SerializedName.class);	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
338	[BUG]  [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class),  serializedName.getAnnotation(SerializedName.class);  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class),  serializedName.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  f.getAnnotation(SerializedName.class),  serializedName.getAnnotation(SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	64	None	replace
339	[BUG]  [BUGGY]  Annotation  annotation  =  serializedName.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  serializedName.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  serializedName.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
340	[BUG]  [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class),  name.getAnnotation(SerializedName.class);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class),  name.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  f.getAnnotation(SerializedName.class),  name.getAnnotation(SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	64	None	replace
341	[BUG]  [BUGGY]  Annotation  annotation  =  serialize.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  serialize.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  serialize.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
342	[BUG]  [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class),  serialize.getAnnotation(SerializedName.class);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class),  serialize.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  f.getAnnotation(SerializedName.class),  serialize.getAnnotation(SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	64	None	replace
343	[BUG]  [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class),  fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class),  fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  f.getAnnotation(SerializedName.class),  fieldNamingPolicy.getAnnotation(SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	64	None	replace
344	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	79	None	add
345	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation!=  null)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation!=  null)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation!=  null)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	79	None	add
346	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	79	None	add
347	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  ==  null)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	79	None	add
348	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	79	None	add
349	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  If(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  If(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    If(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  ';'  expected	79	None	add
350	[BUG]  [BUGGY]  nisipr  =  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  nisipr  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  nisipr  =  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	nisipr  =  f.getAnnotation(SerializedName.class);	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation    >>    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol  nisipr	119	None	replace
351	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	122	None	add
352	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	122	None	add
353	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	122	None	add
354	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	122	None	add
355	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  If(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  If(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    If(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  ';'  expected	122	None	add
356	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null  ||  name.length()  >=  0)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null  ||  name.length()  >=  0)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  ==  null  ||  name.length()  >=  0)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	122	None	add
357	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]                ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	122	None	add
358	[BUG]  [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateValue(name));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateValue(name));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(fieldNamingPolicy.translateValue(name));	  aughtException.printStackTrace(fieldNamingPolicy.translateValue(f));    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
359	[BUG]  [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateValue(name,  f));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateValue(name,  f));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(fieldNamingPolicy.translateValue(name,  f));	  aughtException.printStackTrace(fieldNamingPolicy.translateValue(f));    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
360	[BUG]  [BUGGY]  if(aughtException.printStackTrace(fieldNamingPolicy.translateValue(name)));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(aughtException.printStackTrace(fieldNamingPolicy.translateValue(name)));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(aughtException.printStackTrace(fieldNamingPolicy.translateValue(name)));	  aughtException.printStackTrace(fieldNamingPolicy.translateValue(f));    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
361	[BUG]  [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateValue(name),  f);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateValue(name),  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(fieldNamingPolicy.translateValue(name),  f);	  aughtException.printStackTrace(fieldNamingPolicy.translateValue(f));    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
362	[BUG]  [BUGGY]  aughtException.printStackTrace(f.translateValue(fieldNamingPolicy));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtException.printStackTrace(f.translateValue(fieldNamingPolicy));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(f.translateValue(fieldNamingPolicy));	  aughtException.printStackTrace(fieldNamingPolicy.translateValue(f));    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
363	[BUG]  [BUGGY]  f.printStackTrace(fieldNamingPolicy.translateValue(name));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  f.printStackTrace(fieldNamingPolicy.translateValue(name));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	f.printStackTrace(fieldNamingPolicy.translateValue(name));	  aughtException.printStackTrace(fieldNamingPolicy.translateValue(f));    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
364	[BUG]  [BUGGY]  if(aughtException.printStackTrace(fieldNamingPolicy.translateValue(f)));  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(aughtException.printStackTrace(fieldNamingPolicy.translateValue(f)));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(aughtException.printStackTrace(fieldNamingPolicy.translateValue(f)));	  aughtException.printStackTrace(fieldNamingPolicy.translateValue(f));    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
365	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	81	None	add
366	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(name!=  null)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(name!=  null)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(name!=  null)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	81	None	add
367	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	81	None	add
368	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  If(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  If(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    If(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  ';'  expected	81	None	add
369	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(name  >=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	81	None	add
370	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(name  ==  null)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(name  ==  null)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(name  ==  null)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	81	None	add
371	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(name  >>  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(name  >>  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(name  >>  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	81	None	add
372	[BUG]  [BUGGY]  if(name!=  null)  {  if(annotation  ==  null  ||  annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  if(annotation  ==  null  ||  annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  if(annotation  ==  null  ||  annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation    ==    null    ||    annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
373	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);	  if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    	compilable	  [FE]  ComparisonFailure  	22	1	replace
374	[BUG]  [BUGGY]  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);	  if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    	compilable	  [FE]  ComparisonFailure  	22	1	replace
375	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation  ==  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }	  if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    	compilable	  [FE]  ComparisonFailure  	22	1	replace
376	[BUG]  [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }	  if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    	compilable	  [FE]  ComparisonFailure  	22	1	replace
377	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name  ==  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }	  if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    	compilable	  [FE]  NullPointerException  	22	9	replace
378	[BUG]  [BUGGY]  if(name  ==  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [FE]  NullPointerException  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }	  if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    	compilable	  [FE]  NullPointerException  	22	9	replace
379	[BUG]  [BUGGY]  SerializedName  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  [CE]  incompatible  types  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);	  if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  incompatible  types	22	None	replace
380	[BUG]  [BUGGY]  String  serializedName  =  f.toLowerCase();  return  Collections.singletonList(serializedName);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.toLowerCase();  return  Collections.singletonList(serializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.toLowerCase();  return  Collections.singletonList(serializedName);	  if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
381	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  name.toLowerCase();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	String  serializedName  =  name.toLowerCase();	  if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    	compilable	  [FE]  NullPointerException  	22	9	replace
382	[BUG]  [BUGGY]  String  serializedName  =  name.toLowerCase();  [FE]  NullPointerException  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  name.toLowerCase();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  name.toLowerCase();	  if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    	compilable	  [FE]  NullPointerException  	22	9	replace
383	[BUG]  [BUGGY]  FieldNamingPolicy.printStackTrace(fieldNamingPolicy.translateName(name));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingPolicy.printStackTrace(fieldNamingPolicy.translateName(name));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingPolicy.printStackTrace(fieldNamingPolicy.translateName(name));	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	138	None	replace
384	[BUG]  [BUGGY]  f.printStackTrace(fieldNamingPolicy.translateName(name));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  f.printStackTrace(fieldNamingPolicy.translateName(name));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	f.printStackTrace(fieldNamingPolicy.translateName(name));	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	138	None	replace
385	[BUG]  [BUGGY]  FieldNamingStrategy.printStackTrace(fieldNamingPolicy.translateName(name));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy.printStackTrace(fieldNamingPolicy.translateName(name));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy.printStackTrace(fieldNamingPolicy.translateName(name));	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	138	None	replace
386	[BUG]  [BUGGY]  Constructor.printStackTrace(fieldNamingPolicy.translateName(name));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Constructor.printStackTrace(fieldNamingPolicy.translateName(name));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Constructor.printStackTrace(fieldNamingPolicy.translateName(name));	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	138	None	replace
387	[BUG]  [BUGGY]  SerializationException.printStackTrace(fieldNamingPolicy.translateName(name));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializationException.printStackTrace(fieldNamingPolicy.translateName(name));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializationException.printStackTrace(fieldNamingPolicy.translateName(name));	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	138	None	replace
388	[BUG]  [BUGGY]  FieldNamingPolicy  fieldNamingPolicy  =  fieldNamingPolicy.translateName(f);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingPolicy  fieldNamingPolicy  =  fieldNamingPolicy.translateName(f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingPolicy  fieldNamingPolicy  =  fieldNamingPolicy.translateName(f);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f));    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
389	[BUG]  [BUGGY]  SerializedName  f  =  fieldNamingPolicy.translateName(f);  [CE]  variable  f  is  already  defined  in  method  getFieldNames(Field)  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  f  =  fieldNamingPolicy.translateName(f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  f  =  fieldNamingPolicy.translateName(f);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f));    	non-compiled	[CE]  variable  f  is  already  defined  in  method  getFieldNames(Field)	138	None	replace
390	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(Name.class,  name);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(Name.class,  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(Name.class,  name);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(Name.class);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
391	[BUG]  [BUGGY]  Annotation  annotation  =  f.getAnnotation(Name.class);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  f.getAnnotation(Name.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  f.getAnnotation(Name.class);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(Name.class);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
392	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(Name.class),  name);  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(Name.class),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(Name.class),  name);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(Name.class);    	non-compiled	[CE]  ';'  expected	105	None	replace
393	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(Name.class));  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(Name.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(Name.class));	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(Name.class);    	non-compiled	[CE]  ';'  expected	105	None	replace
394	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(Name.class,  f);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(Name.class,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(Name.class,  f);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(Name.class);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
395	[BUG]  [BUGGY]  While(annotation!=  null)  {  name  =  annotation.value();  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  name  =  annotation.value();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  name  =  annotation.value();  }	  While(annotation!=    null)    {    name    =    annotation.value();    	non-compiled	[CE]  ';'  expected	97	None	replace
396	[BUG]  [BUGGY]  While(annotation!=  null)  {  name  =  annotation.name();  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  name  =  annotation.name();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  name  =  annotation.name();  }	  While(annotation!=    null)    {    name    =    annotation.value();    	non-compiled	[CE]  ';'  expected	97	None	replace
397	[BUG]  [BUGGY]  while(annotation!=  null)  {  name  =  annotation.value();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null)  {  name  =  annotation.value();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null)  {  name  =  annotation.value();	  While(annotation!=    null)    {    name    =    annotation.value();    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
398	[BUG]  [BUGGY]  While(annotation!=  null)  {  name  =  annotation.name();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  name  =  annotation.name();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  name  =  annotation.name();	  While(annotation!=    null)    {    name    =    annotation.value();    	non-compiled	[CE]  ';'  expected	97	None	replace
399	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null)  {  name  =  annotation.value();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	while(annotation!=  null)  {  name  =  annotation.value();  }	  While(annotation!=    null)    {    name    =    annotation.value();    	compilable	  [FE]  NullPointerException  	97	9	replace
400	[BUG]  [BUGGY]  while(annotation!=  null)  {  name  =  annotation.value();  }  [FE]  NullPointerException  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null)  {  name  =  annotation.value();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null)  {  name  =  annotation.value();  }	  While(annotation!=    null)    {    name    =    annotation.value();    	compilable	  [FE]  NullPointerException  	97	9	replace
401	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  fieldNamingPolicy);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String,FieldNamingStrategy)  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  fieldNamingPolicy);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  fieldNamingPolicy);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String,FieldNamingStrategy)	52	None	replace
402	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  beanNamingPolicy);  [CE]  cannot  find  symbol  beanNamingPolicy  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  beanNamingPolicy);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  beanNamingPolicy);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  beanNamingPolicy	52	None	replace
403	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  arrayNamingPolicy);  [CE]  cannot  find  symbol  arrayNamingPolicy  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  arrayNamingPolicy);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  arrayNamingPolicy);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  arrayNamingPolicy	52	None	replace
404	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  methodNamingPolicy);  [CE]  cannot  find  symbol  methodNamingPolicy  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  methodNamingPolicy);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  methodNamingPolicy);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  methodNamingPolicy	52	None	replace
405	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  factory);  [CE]  cannot  find  symbol  factory  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  factory);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  factory);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  factory	52	None	replace
406	[BUG]  [BUGGY]  SerializedName  serializedName  =  name.getAnnotation(SerializedName.class,  f);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  name.getAnnotation(SerializedName.class,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  name.getAnnotation(SerializedName.class,  f);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
407	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  deserializedName);  [CE]  cannot  find  symbol  deserializedName  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  deserializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  deserializedName);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	52	None	replace
408	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [CE]  incompatible  types  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.emptyList();    }    	non-compiled	[CE]  incompatible  types	104	None	replace
409	[BUG]  [BUGGY]  if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
410	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.emptyList();    }    	compilable	  [FE]  NullPointerException  	104	9	replace
411	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [FE]  NullPointerException  [FE]                        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.emptyList();    }    	compilable	  [FE]  NullPointerException  	104	9	replace
412	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [CE]  incompatible  types  [FE]                          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.emptyList();    }    	non-compiled	[CE]  incompatible  types	104	None	replace
413	[BUG]  [BUGGY]  if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]                            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
414	[BUG]  [BUGGY]  Annotation  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
415	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class),  serializedName.getAnnotation(SerializedName.class);  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class),  serializedName.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class),  serializedName.getAnnotation(SerializedName.class);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	118	None	replace
416	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class),  name.getAnnotation(SerializedName.class);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class),  name.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class),  name.getAnnotation(SerializedName.class);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	118	None	replace
417	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	118	None	replace
418	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class),  serialize.getAnnotation(SerializedName.class);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class),  serialize.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class),  serialize.getAnnotation(SerializedName.class);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	118	None	replace
419	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name).getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name).getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name).getAnnotation(SerializedName.class);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
420	[BUG]  [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(name,  f));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(name,  f));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(fieldNamingPolicy.translateName(name,  f));	  aughtException.printStackTrace(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	137	None	replace
421	[BUG]  [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(name,  serializedName));  [CE]  cannot  find  symbol  serializedName  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(name,  serializedName));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(fieldNamingPolicy.translateName(name,  serializedName));	  aughtException.printStackTrace(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  cannot  find  symbol  serializedName	137	None	replace
422	[BUG]  [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(name,  annotation));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(name,  annotation));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(fieldNamingPolicy.translateName(name,  annotation));	  aughtException.printStackTrace(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	137	None	replace
423	[BUG]  [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(name,  name));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(name,  name));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(fieldNamingPolicy.translateName(name,  name));	  aughtException.printStackTrace(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	137	None	replace
424	[BUG]  [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(name),  name);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(name),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(fieldNamingPolicy.translateName(name),  name);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	137	None	replace
425	[BUG]  [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(name),  f);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(name),  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(fieldNamingPolicy.translateName(name),  f);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	137	None	replace
426	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name  ==  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation    ==    null)    {    return    Collections.singletonList(name;    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  NullPointerException  	107	9	replace
427	[BUG]  [BUGGY]  if(name  ==  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  }  [FE]  NullPointerException  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation    ==    null)    {    return    Collections.singletonList(name;    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  NullPointerException  	107	9	replace
428	[BUG]  [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	136	None	replace
429	[BUG]  [BUGGY]  serialize.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  [CE]  cannot  find  symbol  serialize  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  serialize.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	serialize.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  cannot  find  symbol  serialize	136	None	replace
430	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  serializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  serializedName);	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	136	None	replace
431	[BUG]  [BUGGY]  serializedName.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  serializedName.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	serializedName.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	136	None	replace
432	[BUG]  [BUGGY]  handleMissingName(name,  f.getAnnotation(SerializedName.class),  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  handleMissingName(name,  f.getAnnotation(SerializedName.class),  serializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	handleMissingName(name,  f.getAnnotation(SerializedName.class),  serializedName);	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	136	None	replace
433	[BUG]  [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	136	None	replace
434	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  deserializedName);  [CE]  cannot  find  symbol  deserializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  deserializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  deserializedName);	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	136	None	replace
435	[BUG]  [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  deserializedName);  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  deserializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  deserializedName);	  Collections.    <    String>    boundFields    =    Collections.unmodifiableList(name);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
436	[BUG]  [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  name);  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  name);	  Collections.    <    String>    boundFields    =    Collections.unmodifiableList(name);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
437	[BUG]  [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name  +  1);  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name  +  1);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name  +  1);	  Collections.    <    String>    boundFields    =    Collections.unmodifiableList(name);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
438	[BUG]  [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  f);  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  f);	  Collections.    <    String>    boundFields    =    Collections.unmodifiableList(name);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
439	[BUG]  [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  fieldNamingPolicy);  [CE]  illegal  start  of  expression  [FE]                          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  fieldNamingPolicy);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  fieldNamingPolicy);	  Collections.    <    String>    boundFields    =    Collections.unmodifiableList(name);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
440	[BUG]  [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  null);  [CE]  illegal  start  of  expression  [FE]                            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  null);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  null);	  Collections.    <    String>    boundFields    =    Collections.unmodifiableList(name);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
441	[BUG]  [BUGGY]  if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.    <    String>emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
442	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.    <    String>emptyList();    }    	compilable	  [FE]  NullPointerException  	101	9	replace
443	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.    <    String>emptyList();    }    	compilable	  [FE]  NullPointerException  	101	9	replace
444	[BUG]  [BUGGY]  Annotation  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.    <    String>emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
445	[BUG]  [BUGGY]  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  cannot  find  symbol  serializedName  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.    <    String>emptyList();    }    	non-compiled	[CE]  cannot  find  symbol  serializedName	101	None	replace
446	[BUG]  [BUGGY]  While(annotation  ==  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation  ==  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation  ==  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    name    =    annotation.value();    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	96	None	replace
447	[BUG]  [BUGGY]  While(annotation!=  null)  {  name  =  annotation.value();  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  name  =  annotation.value();  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  name  =  annotation.value();  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    name    =    annotation.value();    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	96	None	replace
448	[BUG]  [BUGGY]  While(annotation!=  null)  {  name  =  annotation.name();  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  name  =  annotation.name();  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  name  =  annotation.name();  if(name!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    name    =    annotation.value();    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	96	None	replace
449	[BUG]  [BUGGY]  While(annotation!=  null)  {  name  =  fieldNamingPolicy.translateName(f);  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  name  =  fieldNamingPolicy.translateName(f);  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  name  =  fieldNamingPolicy.translateName(f);  if(name!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    name    =    annotation.value();    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	96	None	replace
450	[BUG]  [BUGGY]  FieldNamingPolicy.printStackTrace(fieldNamingPolicy.translateName(f),  name);  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingPolicy.printStackTrace(fieldNamingPolicy.translateName(f),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingPolicy.printStackTrace(fieldNamingPolicy.translateName(f),  name);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name);    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	139	None	replace
451	[BUG]  [BUGGY]  FieldNamingStrategy.printStackTrace(fieldNamingPolicy.translateName(f),  name);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy.printStackTrace(fieldNamingPolicy.translateName(f),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy.printStackTrace(fieldNamingPolicy.translateName(f),  name);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
452	[BUG]  [BUGGY]  f.printStackTrace(fieldNamingPolicy.translateName(name),  name);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  f.printStackTrace(fieldNamingPolicy.translateName(name),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	f.printStackTrace(fieldNamingPolicy.translateName(name),  name);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	139	None	replace
453	[BUG]  [BUGGY]  FieldNamingPolicy.printStackTrace(annotation.translateName(f),  name);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingPolicy.printStackTrace(annotation.translateName(f),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingPolicy.printStackTrace(annotation.translateName(f),  name);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
454	[BUG]  [BUGGY]  FieldNamingPolicy.printStackTrace(fieldNamingPolicy.translateName(name),  name);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingPolicy.printStackTrace(fieldNamingPolicy.translateName(name),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingPolicy.printStackTrace(fieldNamingPolicy.translateName(name),  name);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	139	None	replace
455	[BUG]  [BUGGY]  Constructor.printStackTrace(fieldNamingPolicy.translateName(f),  name);  [CE]  cannot  find  symbol  Constructor  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Constructor.printStackTrace(fieldNamingPolicy.translateName(f),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Constructor.printStackTrace(fieldNamingPolicy.translateName(f),  name);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name);    	non-compiled	[CE]  cannot  find  symbol  Constructor	139	None	replace
456	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.translateName(f);  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.translateName(f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ObjectConstructor  constructor  =  fieldNamingPolicy.translateName(f);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name);    	non-compiled	[CE]  incompatible  types	139	None	replace
457	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  [CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    If(annotation    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;	42	None	replace
458	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  incompatible  types  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  incompatible  types	99	None	replace
459	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  incompatible  types  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  incompatible  types	99	None	replace
460	[BUG]  [BUGGY]  if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
461	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
462	[BUG]  [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
463	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
464	[BUG]  [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
465	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
466	[BUG]  [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
467	[BUG]  [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	7	None	add
468	[BUG]  [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  >=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	7	None	add
469	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name    ==    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
470	[BUG]  [BUGGY]  Annotation  annotation  =  serializedName.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  serializedName.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  serializedName.getAnnotation(SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
471	[BUG]  [BUGGY]  Annotation  annotation  =  serialize.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  serialize.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  serialize.getAnnotation(SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
472	[BUG]  [BUGGY]  Annotation  annotation  =  serialized.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  serialized.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  serialized.getAnnotation(SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
473	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  fieldNamingPolicy);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String,FieldNamingStrategy)  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  fieldNamingPolicy);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  fieldNamingPolicy);	  String    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String,FieldNamingStrategy)	46	None	replace
474	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  beanNamingPolicy);  [CE]  cannot  find  symbol  beanNamingPolicy  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  beanNamingPolicy);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  beanNamingPolicy);	  String    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  beanNamingPolicy	46	None	replace
475	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  name);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String,String)  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  name);	  String    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String,String)	46	None	replace
476	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  arrayNamingPolicy);  [CE]  cannot  find  symbol  arrayNamingPolicy  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  arrayNamingPolicy);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  arrayNamingPolicy);	  String    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  arrayNamingPolicy	46	None	replace
477	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  methodNamingPolicy);  [CE]  cannot  find  symbol  methodNamingPolicy  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  methodNamingPolicy);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  methodNamingPolicy);	  String    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  methodNamingPolicy	46	None	replace
478	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  deserialize);  [CE]  cannot  find  symbol  deserialize  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  deserialize);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  deserialize);	  String    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  deserialize	46	None	replace
479	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  factory);  [CE]  cannot  find  symbol  factory  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  factory);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  factory);	  String    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  factory	46	None	replace
480	[BUG]  [BUGGY]  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [CE]  for-each  not  applicable  to  expression  type  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    List    <    String>    fieldNames    =    new    ArrayList    <    String>();    for(String    serializedName    :    name)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	128	None	replace
481	[BUG]  [BUGGY]  Collection  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Collection  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Collection  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    List    <    String>    fieldNames    =    new    ArrayList    <    String>();    for(String    serializedName    :    name)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
482	[BUG]  [BUGGY]  if(name  ==  null)  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null)  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    List    <    String>    fieldNames    =    new    ArrayList    <    String>();    for(String    serializedName    :    name)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
483	[BUG]  [BUGGY]  List  <  String>  fields  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [CE]  for-each  not  applicable  to  expression  type  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  List  <  String>  fields  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	List  <  String>  fields  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    List    <    String>    fieldNames    =    new    ArrayList    <    String>();    for(String    serializedName    :    name)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	128	None	replace
484	[BUG]  [BUGGY]  if(name!=  null)  {  List  <  String>  fields  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  List  <  String>  fields  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  List  <  String>  fields  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    List    <    String>    fieldNames    =    new    ArrayList    <    String>();    for(String    serializedName    :    name)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
485	[BUG]  [BUGGY]  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [CE]  for-each  not  applicable  to  expression  type  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    List    <    String>    fieldNames    =    new    ArrayList    <    String>();    for(String    serializedName    :    name)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	128	None	replace
486	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	100	8	replace
487	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [FE]  ComparisonFailure  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	100	8	replace
488	[BUG]  [BUGGY]  if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
489	[BUG]  [BUGGY]  Annotation  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
490	[BUG]  [BUGGY]  Constructor  <  String>  constructor  =  f.getConstructor();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Constructor  <  String>  constructor  =  f.getConstructor();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Constructor  <  String>  constructor  =  f.getConstructor();	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    If(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
491	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  fieldNamingPolicy.translateName(f);  if(name!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  fieldNamingPolicy.translateName(f);  if(name!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  serializedName  =  fieldNamingPolicy.translateName(f);  if(name!=  null)  {  return  Collections.singletonList(serializedName);  }	  While(annotation!=    null)    {    String    name    =    fieldNamingPolicy.translateName(f);    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
492	[BUG]  [BUGGY]  while(annotation!=  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  if(name!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    String    name    =    fieldNamingPolicy.translateName(f);    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
493	[BUG]  [BUGGY]  if(annotation!=  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  if(name!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    String    name    =    fieldNamingPolicy.translateName(f);    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
494	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  fieldNamingPolicy.translateName(f);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  fieldNamingPolicy.translateName(f);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  serializedName  =  fieldNamingPolicy.translateName(f);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }	  While(annotation!=    null)    {    String    name    =    fieldNamingPolicy.translateName(f);    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
495	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  [CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;	  	non-compiled	[CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)	115	None	add
496	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  [CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    SerializedName  serializedName  =  f.getAnnotation(SerializedName.class)+  name;	  	non-compiled	[CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)	115	None	add
497	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name);  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    String  serializedName  =  f.getAnnotation(SerializedName.class)+  name);	  	non-compiled	[CE]  ';'  expected	115	None	add
498	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  String  serializedName  =  f.getAnnotation(SerializedName.Class)+  name;  [CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)  [FE]          NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  String  serializedName  =  f.getAnnotation(SerializedName.Class)+  name;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    String  serializedName  =  f.getAnnotation(SerializedName.Class)+  name;	  	non-compiled	[CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)	115	None	add
499	[BUG]  [BUGGY]  While(annotation!=  null  &&  name.length()  >  0)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  name.length()  >  0)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  name.length()  >  0)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    String    serializedName    =    annotation.value();    if(serializedName!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
500	[BUG]  [BUGGY]  While(annotation  ==  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation  ==  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation  ==  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    String    serializedName    =    annotation.value();    if(serializedName!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
501	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName  ==  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    String    serializedName    =    annotation.value();    if(serializedName!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
502	[BUG]  [BUGGY]  while(annotation!=  null  &&  name.length()  >  0)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null  &&  name.length()  >  0)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null  &&  name.length()  >  0)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    String    serializedName    =    annotation.value();    if(serializedName!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
503	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(serializedName,  f);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(serializedName,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.translateName(serializedName,  f);	  Annotation    annotation    =    fieldNamingPolicy.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
504	[BUG]  [BUGGY]  Annotation  annotation  =  this.fieldNamingPolicy.translateName(f);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  this.fieldNamingPolicy.translateName(f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  this.fieldNamingPolicy.translateName(f);	  Annotation    annotation    =    fieldNamingPolicy.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
505	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  fieldNamingStrategy.emptyList());  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  fieldNamingStrategy.emptyList());  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  fieldNamingStrategy.emptyList());  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name,    fieldNamingPolicy.translateName(f));    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	120	None	replace
506	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  name);  }  else  {  return  Collections.emptyList();  }  [CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name,    fieldNamingPolicy.translateName(f));    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;	120	None	replace
507	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  deserializedName);  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  deserializedName  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  deserializedName);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  deserializedName);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name,    fieldNamingPolicy.translateName(f));    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol  deserializedName	120	None	replace
508	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  fieldNamingStrategy.class);  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  fieldNamingStrategy.class);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  fieldNamingStrategy.class);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name,    fieldNamingPolicy.translateName(f));    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
509	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  fieldNamingStrategy.getAnnotation(SerializedName.class));  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  fieldNamingStrategy.getAnnotation(SerializedName.class));  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  fieldNamingStrategy.getAnnotation(SerializedName.class));  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name,    fieldNamingPolicy.translateName(f));    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	120	None	replace
510	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  type);  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  type  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  type);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  type);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name,    fieldNamingPolicy.translateName(f));    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol  type	120	None	replace
511	[BUG]  [BUGGY]  FieldNamingStrategy.handleMissingName(name,  f);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy.handleMissingName(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy.handleMissingName(name,  f);	  aughtExceptionHandler.handleMissingName(name,    f);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
512	[BUG]  [BUGGY]  fieldNamingPolicy.handleMissingName(name,  f);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  fieldNamingPolicy.handleMissingName(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	fieldNamingPolicy.handleMissingName(name,  f);	  aughtExceptionHandler.handleMissingName(name,    f);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
513	[BUG]  [BUGGY]  Constructor  constructor.handleMissingName(name,  f);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Constructor  constructor.handleMissingName(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Constructor  constructor.handleMissingName(name,  f);	  aughtExceptionHandler.handleMissingName(name,    f);    	non-compiled	[CE]  ';'  expected	132	None	replace
514	[BUG]  [BUGGY]  expérimentalExceptionHandler.handleMissingName(name,  f);  [CE]  cannot  find  symbol  exp  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  expérimentalExceptionHandler.handleMissingName(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	expérimentalExceptionHandler.handleMissingName(name,  f);	  aughtExceptionHandler.handleMissingName(name,    f);    	non-compiled	[CE]  cannot  find  symbol  exp	132	None	replace
515	[BUG]  [BUGGY]  f.handleMissingName(name,  annotation);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  f.handleMissingName(name,  annotation);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	f.handleMissingName(name,  annotation);	  aughtExceptionHandler.handleMissingName(name,    f);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
516	[BUG]  [BUGGY]  Constructor.handleMissingName(name,  f);  [CE]  cannot  find  symbol  Constructor  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Constructor.handleMissingName(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Constructor.handleMissingName(name,  f);	  aughtExceptionHandler.handleMissingName(name,    f);    	non-compiled	[CE]  cannot  find  symbol  Constructor	132	None	replace
517	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ObjectConstructor  constructor  =  fieldNamingPolicy.getAnnotation(SerializedName.class);	  aughtExceptionHandler.handleMissingName(name,    f);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
518	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(name    [Delete]    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	compilable	  [FE]  NullPointerException  	70	9	replace
519	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  }  [FE]  NullPointerException  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(name    [Delete]    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	compilable	  [FE]  NullPointerException  	70	9	replace
520	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation        ==        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	40	1	add
521	[BUG]  [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation        ==        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	40	1	add
522	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation        ==        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	40	1	add
523	[BUG]  [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation        ==        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	40	1	add
524	[BUG]  [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation        ==        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	40	None	add
525	[BUG]  [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  If(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  If(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation        ==        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    If(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ';'  expected	40	None	add
526	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation        ==        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	40	1	add
527	[BUG]  [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation        ==        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	40	1	add
528	[BUG]  [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  >>  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  >>  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation        ==        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  >>  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	40	None	add
529	[BUG]  [BUGGY]  String  serializedName  =  serialize.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serialize  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  serialize.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  serialize.getAnnotation(SerializedName.class);	  String    serializedName    =    name.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialize	47	None	replace
530	[BUG]  [BUGGY]  String  serializedName  =  serialized.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serialized  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  serialized.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  serialized.getAnnotation(SerializedName.class);	  String    serializedName    =    name.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialized	47	None	replace
531	[BUG]  [BUGGY]  String  serializedName  =  serializedName.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  serializedName.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  serializedName.getAnnotation(SerializedName.class);	  String    serializedName    =    name.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
532	[BUG]  [BUGGY]  String  serializedName  =  serialization.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serialization  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  serialization.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  serialization.getAnnotation(SerializedName.class);	  String    serializedName    =    name.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialization	47	None	replace
533	[BUG]  [BUGGY]  SerializedName  serializedName  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  fieldNamingPolicy.getAnnotation(SerializedName.class);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
534	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(String.class);  [CE]  no  suitable  method  found  for  getAnnotation(Class<String>)  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(String.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(String.class);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<String>)	49	None	replace
535	[BUG]  [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
536	[BUG]  [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
537	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  collection.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  collection  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  return  collection.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  return  collection.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation    ==    null)    {    return    collection.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol  collection	144	None	replace
538	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  fieldNamingPolicy.translateName(f);  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  fieldNamingPolicy.translateName(f);  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  serializedName  =  fieldNamingPolicy.translateName(f);  if(name!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    String    name    =    fieldNamingPolicy.translateName(f);    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
539	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(name!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    String    name    =    fieldNamingPolicy.translateName(f);    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
540	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  name  =  f.getAnnotation(SerializedName.class);  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  String  name  =  f.getAnnotation(SerializedName.class);  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  name  =  f.getAnnotation(SerializedName.class);  if(name!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    String    name    =    fieldNamingPolicy.translateName(f);    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
541	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(serializedName);  }	  While(annotation!=    null)    {    String    name    =    fieldNamingPolicy.translateName(f);    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
542	[BUG]  [BUGGY]  StaxUtil.printStackTrace(fieldNamingPolicy.translateName(f),  name);  [CE]  cannot  find  symbol  StaxUtil  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  StaxUtil.printStackTrace(fieldNamingPolicy.translateName(f),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	StaxUtil.printStackTrace(fieldNamingPolicy.translateName(f),  name);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name);    	non-compiled	[CE]  cannot  find  symbol  StaxUtil	139	None	replace
543	[BUG]  [BUGGY]  f.printStackTrace(fieldNamingPolicy.translateName(name),  f);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  f.printStackTrace(fieldNamingPolicy.translateName(name),  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	f.printStackTrace(fieldNamingPolicy.translateName(name),  f);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	139	None	replace
544	[BUG]  [BUGGY]  f.printStackTrace(fieldNamingPolicy.translateName(f),  name);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  f.printStackTrace(fieldNamingPolicy.translateName(f),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	f.printStackTrace(fieldNamingPolicy.translateName(f),  name);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
545	[BUG]  [BUGGY]  if(annotation!=  null)  {  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),  name);  }  [CE]  cannot  find  symbol  aughtException  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),  name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),  name);  }	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name);    	non-compiled	[CE]  cannot  find  symbol  aughtException	139	None	replace
546	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  >>  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  >>  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  >>  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	55	None	add
547	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(annotation,  name);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(annotation,  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.translateName(annotation,  name);	  Annotation    annotation    =    fieldNamingPolicy.translateName(name);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
548	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializationName.class,  f);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializationName.class,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializationName.class,  f);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializationName.class);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
549	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  else  {  return  Collections.emptyList();  }  [CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;	123	None	replace
550	[BUG]  [BUGGY]  if(fieldNamingPolicy.translateName(f),  name!=  null)  {  fieldNamingPolicy.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  }  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(fieldNamingPolicy.translateName(f),  name!=  null)  {  fieldNamingPolicy.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(fieldNamingPolicy.translateName(f),  name!=  null)  {  fieldNamingPolicy.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  }	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name,    null);    	non-compiled	[CE]  ')'  expected	141	None	replace
551	[BUG]  [BUGGY]  if(annotation!=  null)  {  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  }  [CE]  cannot  find  symbol  aughtException  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  }	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name,    null);    	non-compiled	[CE]  cannot  find  symbol  aughtException	141	None	replace
552	[BUG]  [BUGGY]  StaxUtil.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  [CE]  cannot  find  symbol  StaxUtil  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  StaxUtil.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	StaxUtil.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name,    null);    	non-compiled	[CE]  cannot  find  symbol  StaxUtil	141	None	replace
553	[BUG]  [BUGGY]  While(annotation!=  null)  {  name  =  fieldNamingPolicy.value();  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  name  =  fieldNamingPolicy.value();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  name  =  fieldNamingPolicy.value();	  While(annotation!=    null)    {    name    =    annotation.value();    	non-compiled	[CE]  ';'  expected	97	None	replace
554	[BUG]  [BUGGY]  While(annotation!=  null)  {  name  =  fieldNamingPolicy.value();  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  name  =  fieldNamingPolicy.value();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  name  =  fieldNamingPolicy.value();  }	  While(annotation!=    null)    {    name    =    annotation.value();    	non-compiled	[CE]  ';'  expected	97	None	replace
555	[BUG]  [BUGGY]  FieldNamingStrategy  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation    >=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)	57	None	replace
556	[BUG]  [BUGGY]  FieldNamingStrategy.printStackTrace(fieldNamingPolicy.translateName(f));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy.printStackTrace(fieldNamingPolicy.translateName(f));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy.printStackTrace(fieldNamingPolicy.translateName(f));	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f));    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
557	[BUG]  [BUGGY]  MutableFieldUtil.printStackTrace(fieldNamingPolicy.translateName(name));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  MutableFieldUtil.printStackTrace(fieldNamingPolicy.translateName(name));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	MutableFieldUtil.printStackTrace(fieldNamingPolicy.translateName(name));	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	138	None	replace
558	[BUG]  [BUGGY]  MutableMap.printStackTrace(fieldNamingPolicy.translateName(name));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  MutableMap.printStackTrace(fieldNamingPolicy.translateName(name));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	MutableMap.printStackTrace(fieldNamingPolicy.translateName(name));	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	138	None	replace
559	[BUG]  [BUGGY]  ObjectConstructor  constructor.handleMissingName(name,  f);  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ObjectConstructor  constructor.handleMissingName(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ObjectConstructor  constructor.handleMissingName(name,  f);	  aughtExceptionHandler.handleMissingName(name,    f);    	non-compiled	[CE]  ';'  expected	132	None	replace
560	[BUG]  [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f);  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f);  }	  aughtExceptionHandler.handleMissingName(name,    f);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	132	None	replace
561	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.handleMissingName(name,  f);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.handleMissingName(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ObjectConstructor  constructor  =  fieldNamingPolicy.handleMissingName(name,  f);	  aughtExceptionHandler.handleMissingName(name,    f);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
562	[BUG]  [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f);  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f);  }	  aughtExceptionHandler.handleMissingName(name,    f);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	132	None	replace
563	[BUG]  [BUGGY]  f.handleMissingName(name,  f);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  f.handleMissingName(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	f.handleMissingName(name,  f);	  aughtExceptionHandler.handleMissingName(name,    f);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
564	[BUG]  [BUGGY]  While(annotation!=  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  ';'  expected	82	None	replace
565	[BUG]  [BUGGY]  While(annotation  ==  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation  ==  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation  ==  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  ';'  expected	82	None	replace
566	[BUG]  [BUGGY]  While(annotation!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.value());  }  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.value());  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.value());  }	  While(annotation!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
567	[BUG]  [BUGGY]  String  serializedName  =  stringNamingPolicy.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  stringNamingPolicy  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  stringNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  stringNamingPolicy.getAnnotation(SerializedName.class);	  String    serializedName    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  stringNamingPolicy	50	None	replace
568	[BUG]  [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
569	[BUG]  [BUGGY]  Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
570	[BUG]  [BUGGY]  if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.EMPTYList();  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.EMPTYList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.EMPTYList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
571	[BUG]  [BUGGY]  While(annotation!=  null)  {  name  =  fieldNamingPolicy.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  name  =  fieldNamingPolicy.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  name  =  fieldNamingPolicy.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    name    =    annotation.value();    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	96	None	replace
572	[BUG]  [BUGGY]  While(annotation!=  null)  {  name  =  f.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  name  =  f.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  name  =  f.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    name    =    annotation.value();    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	96	None	replace
573	[BUG]  [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateValue(f),  name);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateValue(f),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(fieldNamingPolicy.translateValue(f),  name);	  aughtException.printStackTrace(fieldNamingPolicy.translateValue(f));    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
574	[BUG]  [BUGGY]  aughtException.printStackTrace(annotation.translateValue(f));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtException.printStackTrace(annotation.translateValue(f));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(annotation.translateValue(f));	  aughtException.printStackTrace(fieldNamingPolicy.translateValue(f));    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
575	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class),  name;  [CE]  incompatible  types  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class),  name;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class),  name;	  FieldNamingStrategy    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  incompatible  types	23	None	replace
576	[BUG]  [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(SerializedName);  }  [CE]  cannot  find  symbol  SerializedName  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(SerializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(SerializedName);  }	  if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  cannot  find  symbol  SerializedName	22	None	replace
577	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase()  +  1;  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=  null)  {  String  serializedName  =  name.toLowerCase()  +  1;  return  Collections.singletonList(serializedName);  }	  if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    	compilable	  [FE]  ComparisonFailure  	22	8	replace
578	[BUG]  [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase()  +  1;  return  Collections.singletonList(serializedName);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase()  +  1;  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  String  serializedName  =  name.toLowerCase()  +  1;  return  Collections.singletonList(serializedName);  }	  if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    	compilable	  [FE]  ComparisonFailure  	22	8	replace
579	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null  ||  name.length()  ==  0)  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null  ||  name.length()  ==  0)  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null  ||  name.length()  ==  0)  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  illegal  start  of  type	124	None	add
580	[BUG]  [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  If(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  If(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    If(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ';'  expected	7	None	add
581	[BUG]  [BUGGY]  While(annotation  ==  null)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation  ==  null)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation  ==  null)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    if(annotation.value()    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	114	None	replace
582	[BUG]  [BUGGY]  While(annotation!=  null)  {  if(annotation.name()  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  if(annotation.name()  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  if(annotation.name()  ==  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    if(annotation.value()    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	114	None	replace
583	[BUG]  [BUGGY]  While(annotation!=  null)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name,  annotation);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name,  annotation);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name,  annotation);  }	  While(annotation!=    null)    {    if(annotation.value()    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	114	None	replace
584	[BUG]  [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.    <    String>emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
585	[BUG]  [BUGGY]  Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.    <    String>emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
586	[BUG]  [BUGGY]  Annotation  serialize  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  serialize  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  serialize  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.    <    String>emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
587	[BUG]  [BUGGY]  While(annotation!=  null)  {  name  =  fieldNamingPolicy.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  name  =  fieldNamingPolicy.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  name  =  fieldNamingPolicy.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  While(annotation!=    null)    {    name    =    annotation.value();    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	111	None	replace
588	[BUG]  [BUGGY]  While(annotation!=  null)  {  name  =  f.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  name  =  f.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  name  =  f.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  While(annotation!=    null)    {    name    =    annotation.value();    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	111	None	replace
589	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
590	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name,  fieldNamingStrategy);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name,  fieldNamingStrategy);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name,  fieldNamingStrategy);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
591	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name,  null);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name,  null);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name,  null);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
592	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name,  false);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name,  false);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name,  false);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
593	[BUG]  [BUGGY]  if(name!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	127	None	replace
594	[BUG]  [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	127	None	replace
595	[BUG]  [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	127	None	replace
596	[BUG]  [BUGGY]  FieldNamingStrategy.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
597	[BUG]  [BUGGY]  if(f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class)!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  [CE]  ')'  expected  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class)!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class)!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  ')'  expected	127	None	replace
598	[BUG]  [BUGGY]  if(f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class)  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  [CE]  ')'  expected  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class)  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class)  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  ')'  expected	127	None	replace
599	[BUG]  [BUGGY]  if(f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class)!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class)  [CE]  ')'  expected  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class)!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class)  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class)!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class)	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  ')'  expected	127	None	replace
600	[BUG]  [BUGGY]  String  serializedName  =  bean.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  bean  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  bean.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  bean.getAnnotation(SerializedName.class);	  String    serializedName    =    name.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  bean	47	None	replace
601	[BUG]  [BUGGY]  String  serializedName  =  method.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  method  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  method.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  method.getAnnotation(SerializedName.class);	  String    serializedName    =    name.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  method	47	None	replace
602	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  SerializedName  serializeName  =  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    SerializedName  serializeName  =  f.getAnnotation(SerializedName.class);	  	compilable	  [FE]  ComparisonFailure  	48	1	add
603	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  SerializedName  serializeName  =  f.getAnnotation(SerializedName.class);  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  SerializedName  serializeName  =  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    SerializedName  serializeName  =  f.getAnnotation(SerializedName.class);	  	compilable	  [FE]  ComparisonFailure  	48	1	add
604	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  SerializationName  serializedName  =  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  SerializationName  serializedName  =  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    SerializationName  serializedName  =  f.getAnnotation(SerializedName.class);	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
605	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  SerializedName  serializedName  =  f.getAnnotation(SerializedName.Class);  [CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)  [FE]        NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  SerializedName  serializedName  =  f.getAnnotation(SerializedName.Class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    SerializedName  serializedName  =  f.getAnnotation(SerializedName.Class);	  	non-compiled	[CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)	48	None	add
606	[BUG]  [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList();  [CE]  illegal  start  of  expression  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Collections.  <  String>  boundFields  =  Collections.unmodifiableList();	          Collections.    <    String>    boundFields    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
607	[BUG]  [BUGGY]  while(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  While(annotation!=    null)    {    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
608	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value()  ==  0)  {  String  serializedName  =  annotation.value();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  annotation.value()  ==  0)  {  String  serializedName  =  annotation.value();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value()  ==  0)  {  String  serializedName  =  annotation.value();	  While(annotation!=    null    &&    annotation.value()    >    0)    {    String    serializedName    =    annotation.value();    	non-compiled	[CE]  ';'  expected	4	None	replace
609	[BUG]  [BUGGY]  while(annotation!=  null  &&  annotation.value()  ==  0)  {  String  serializedName  =  annotation.value();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null  &&  annotation.value()  ==  0)  {  String  serializedName  =  annotation.value();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null  &&  annotation.value()  ==  0)  {  String  serializedName  =  annotation.value();	  While(annotation!=    null    &&    annotation.value()    >    0)    {    String    serializedName    =    annotation.value();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
610	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value()  >=  0)  {  String  serializedName  =  annotation.value();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  annotation.value()  >=  0)  {  String  serializedName  =  annotation.value();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value()  >=  0)  {  String  serializedName  =  annotation.value();	  While(annotation!=    null    &&    annotation.value()    >    0)    {    String    serializedName    =    annotation.value();    	non-compiled	[CE]  ';'  expected	4	None	replace
611	[BUG]  [BUGGY]  TreeSet  <  String>  boundFields  =  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  TreeSet  <  String>  boundFields  =  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	TreeSet  <  String>  boundFields  =  f.getAnnotation(SerializedName.class);	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    If(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
612	[BUG]  [BUGGY]  Beide(fieldNamingPolicy.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Beide(fieldNamingPolicy.getAnnotation(SerializedName.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Beide(fieldNamingPolicy.getAnnotation(SerializedName.class));	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    If(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
613	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value()  >=  0)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  annotation.value()  >=  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value()  >=  0)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null    &&    annotation.value()    >    0)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
614	[BUG]  [BUGGY]  while(annotation!=  null  &&  annotation.value()  ==  0)  {  return  Collections.singletonList(name);  }  [CE]  incomparable  types:  String  and  int  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation!=  null  &&  annotation.value()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation!=  null  &&  annotation.value()  ==  0)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null    &&    annotation.value()    >    0)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  incomparable  types:  String  and  int	90	None	replace
615	[BUG]  [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(name),  excluder);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(name),  excluder);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(fieldNamingPolicy.translateName(name),  excluder);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	137	None	replace
616	[BUG]  [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(f,  name));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(f,  name));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(fieldNamingPolicy.translateName(f,  name));	  aughtException.printStackTrace(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	137	None	replace
617	[BUG]  [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(name),  annotation);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(name),  annotation);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(fieldNamingPolicy.translateName(name),  annotation);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	137	None	replace
618	[BUG]  [BUGGY]  Annotation  annotation  =  typeFactory.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  typeFactory.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  typeFactory.getAnnotation(SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
619	[BUG]  [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleSerialization(name,  f);  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleSerialization(name,  f);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  aughtExceptionHandler.handleSerialization(name,  f);  }	  aughtExceptionHandler.handleSerialization(name,    f);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	130	None	replace
620	[BUG]  [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleSerialization(name,  f);  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleSerialization(name,  f);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  aughtExceptionHandler.handleSerialization(name,  f);  }	  aughtExceptionHandler.handleSerialization(name,    f);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	130	None	replace
621	[BUG]  [BUGGY]  f.handleSerialization(name,  f);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  f.handleSerialization(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	f.handleSerialization(name,  f);	  aughtExceptionHandler.handleSerialization(name,    f);    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
622	[BUG]  [BUGGY]  Annotation  annotation  =  FieldNamingPolicy.translateName(name,  f);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  FieldNamingPolicy.translateName(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  FieldNamingPolicy.translateName(name,  f);	  Annotation    annotation    =    fieldNamingPolicy.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
623	[BUG]  [BUGGY]  ArrayList  <  String>  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName);  [CE]  incompatible  types  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ArrayList  <  String>  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ArrayList  <  String>  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    Collections.singletonList(serializedName);    	non-compiled	[CE]  incompatible  types	26	None	replace
624	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(name);  [CE]  incompatible  types  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(name);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    Collections.singletonList(serializedName);    	non-compiled	[CE]  incompatible  types	26	None	replace
625	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName);  [CE]  incompatible  types  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    Collections.singletonList(serializedName);    	non-compiled	[CE]  incompatible  types	26	None	replace
626	[BUG]  [BUGGY]  boolean  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName);  [CE]  incompatible  types  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  boolean  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	boolean  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    Collections.singletonList(serializedName);    	non-compiled	[CE]  incompatible  types	26	None	replace
627	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  If(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  If(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    If(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ';'  expected	71	None	add
628	[BUG]  [BUGGY]  if(annotation  ==  null)  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    List    <    String>    fieldNames    =    new    ArrayList    <    String>();    for(String    serializedName    :    name)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
629	[BUG]  [BUGGY]  ArrayList  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [CE]  for-each  not  applicable  to  expression  type  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ArrayList  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ArrayList  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    List    <    String>    fieldNames    =    new    ArrayList    <    String>();    for(String    serializedName    :    name)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	128	None	replace
630	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  +  2;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  +  2;	  String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    	compilable	  [FE]  NullPointerException  	116	9	replace
631	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  +  2;  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  +  2;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  +  2;	  String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    	compilable	  [FE]  NullPointerException  	116	9	replace
632	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  +  deserialize;  [CE]  cannot  find  symbol  deserialize  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  +  deserialize;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  +  deserialize;	  String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    	non-compiled	[CE]  cannot  find  symbol  deserialize	116	None	replace
633	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null  ||  name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null  ||  name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
634	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null  ||  name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null  ||  name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null  ||  name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
635	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	73	None	add
636	[BUG]  [BUGGY]  aughtExceptionHandler(fieldNamingPolicy.translateName(name),  excluder);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtExceptionHandler(fieldNamingPolicy.translateName(name),  excluder);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtExceptionHandler(fieldNamingPolicy.translateName(name),  excluder);	  aughtExceptionHandler(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	140	None	replace
637	[BUG]  [BUGGY]  aughtExceptionHandler(fieldNamingPolicy.translateName(f,  name));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtExceptionHandler(fieldNamingPolicy.translateName(f,  name));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtExceptionHandler(fieldNamingPolicy.translateName(f,  name));	  aughtExceptionHandler(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	140	None	replace
638	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class),  name  +  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class),  name  +  1;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class),  name  +  1;	  String    serializedName    =    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  ';'  expected	51	None	replace
639	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class),  name,  fieldNamingStrategy);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class),  name,  fieldNamingStrategy);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class),  name,  fieldNamingStrategy);	  String    serializedName    =    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  ';'  expected	51	None	replace
640	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  deserialize);  [CE]  cannot  find  symbol  deserialize  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  deserialize);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  deserialize);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  deserialize	52	None	replace
641	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  null);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String,<null>)  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  null);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  null);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String,<null>)	52	None	replace
642	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  arrayNamingStrategy);  [CE]  cannot  find  symbol  arrayNamingStrategy  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  arrayNamingStrategy);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  arrayNamingStrategy);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  arrayNamingStrategy	52	None	replace
643	[BUG]  [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  >>  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  >>  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  >>  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	9	None	add
644	[BUG]  [BUGGY]  Name  name  =  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Name  name  =  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Name  name  =  f.getAnnotation(SerializedName.class);	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(name    >=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
645	[BUG]  [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	135	None	replace
646	[BUG]  [BUGGY]  if(name!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	135	None	replace
647	[BUG]  [BUGGY]  FieldNamingStrategy.handleMissingName(name,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy.handleMissingName(name,  f.getAnnotation(SerializedName.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy.handleMissingName(name,  f.getAnnotation(SerializedName.class));	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
648	[BUG]  [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	135	None	replace
649	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  ]);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  ]);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ObjectConstructor  constructor  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  ]);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    fieldNames.toArray(new    String[fieldNames.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
650	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  0]);  [CE]  ']'  expected  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  0]);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  0]);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    fieldNames.toArray(new    String[fieldNames.size()    ]);    	non-compiled	[CE]  ']'  expected	25	None	replace
651	[BUG]  [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
652	[BUG]  [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(name);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
653	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  If(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  If(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    If(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  ';'  expected	122	None	add
654	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	122	None	add
655	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  ==  null  ||  name.length()!=  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	122	None	add
656	[BUG]  [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name);  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name);  }	  aughtExceptionHandler.handleMissingName(name);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	84	None	replace
657	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.handleMissingName(name);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.handleMissingName(name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ObjectConstructor  constructor  =  fieldNamingPolicy.handleMissingName(name);	  aughtExceptionHandler.handleMissingName(name);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
658	[BUG]  [BUGGY]  f.handleMissingName(name);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  f.handleMissingName(name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	f.handleMissingName(name);	  aughtExceptionHandler.handleMissingName(name);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
659	[BUG]  [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler.handleMissingName(name);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	84	None	replace
660	[BUG]  [BUGGY]  Annotation  <  String>  annotation  =  fieldNamingPolicy.translateName(f);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  <  String>  annotation  =  fieldNamingPolicy.translateName(f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  <  String>  annotation  =  fieldNamingPolicy.translateName(f);	  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
661	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  name  =  fieldNamingPolicy.getName(f);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  String  name  =  fieldNamingPolicy.getName(f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  name  =  fieldNamingPolicy.getName(f);	  While(annotation!=    null)    {    String    name    =    fieldNamingPolicy.translateName(f);    	non-compiled	[CE]  ';'  expected	31	None	replace
662	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  null);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String,<null>)  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  null);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  null);	  String    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String,<null>)	46	None	replace
663	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  value);  [CE]  cannot  find  symbol  value  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  value);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  value);	  String    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  value	46	None	replace
664	[BUG]  [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
665	[BUG]  [BUGGY]  Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
666	[BUG]  [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  f.getAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
667	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(serializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(serializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(serializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
668	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
669	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
670	[BUG]  [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.    <    String>emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
671	[BUG]  [BUGGY]  Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.    <    String>emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
672	[BUG]  [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class);  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	64	None	replace
673	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name    ==    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
674	[BUG]  [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	136	None	replace
675	[BUG]  [BUGGY]  FieldNamingStrategy.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
676	[BUG]  [BUGGY]  fieldNames.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  [CE]  cannot  find  symbol  fieldNames  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  fieldNames.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	fieldNames.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	136	None	replace
677	[BUG]  [BUGGY]  FieldNamingStrategy.handleMissingName(name,  f.getAnnotation(SerializedName.class),  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy.handleMissingName(name,  f.getAnnotation(SerializedName.class),  serializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy.handleMissingName(name,  f.getAnnotation(SerializedName.class),  serializedName);	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	136	None	replace
678	[BUG]  [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	136	None	replace
679	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  >>  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  >>  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  >>  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	79	None	add
680	[BUG]  [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.unmodifiableList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
681	[BUG]  [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(name);  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(name);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.unmodifiableList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
682	[BUG]  [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name  +  name);  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name  +  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name  +  name);	  Collections.    <    String>    boundFields    =    Collections.unmodifiableList(name);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
683	[BUG]  [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  annotation);  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  annotation);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  annotation);	  Collections.    <    String>    boundFields    =    Collections.unmodifiableList(name);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
684	[BUG]  [BUGGY]  String[]  alternates  =  f.getAnnotation(Name.class);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String[]  alternates  =  f.getAnnotation(Name.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String[]  alternates  =  f.getAnnotation(Name.class);	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
685	[BUG]  [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class),  name;  [CE]  incompatible  types  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class),  name;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String[]  alternates  =  f.getAnnotation(SerializedName.class),  name;	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  incompatible  types	24	None	replace
686	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value()!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  annotation.value()!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value()!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    String    serializedName    =    annotation.value();    if(serializedName!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
687	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  String  SerializedName  =  f.getAnnotation(SerializedName.class)+  name;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    String  SerializedName  =  f.getAnnotation(SerializedName.class)+  name;	  	compilable	  [FE]  ComparisonFailure  	115	1	add
688	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  String  SerializedName  =  f.getAnnotation(SerializedName.class)+  name;  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  String  SerializedName  =  f.getAnnotation(SerializedName.class)+  name;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    String  SerializedName  =  f.getAnnotation(SerializedName.class)+  name;	  	compilable	  [FE]  ComparisonFailure  	115	1	add
689	[BUG]  [BUGGY]  String  serializedName  =  scopeNamingPolicy.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  scopeNamingPolicy  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  scopeNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  scopeNamingPolicy.getAnnotation(SerializedName.class);	  String    serializedName    =    beanNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  scopeNamingPolicy	133	None	replace
690	[BUG]  [BUGGY]  String  serializedName  =  beanNamingPolicy.getAnnotation(SerializedName.class,  name);  [CE]  cannot  find  symbol  beanNamingPolicy  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  beanNamingPolicy.getAnnotation(SerializedName.class,  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  beanNamingPolicy.getAnnotation(SerializedName.class,  name);	  String    serializedName    =    beanNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  beanNamingPolicy	133	None	replace
691	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  fieldNames);  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  fieldNames  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  fieldNames);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  fieldNames);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name,    fieldNamingPolicy.translateName(f));    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	120	None	replace
692	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  fieldNames);  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  fieldNames  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  fieldNames);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  fieldNames);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name,    fieldNamingPolicy.translateName(f));    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	120	None	replace
693	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  value);  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  value  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  value);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  value);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name,    fieldNamingPolicy.translateName(f));    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol  value	120	None	replace
694	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  false);  }  else  {  return  Collections.emptyList();  }  [CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  false);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  false);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name,    fieldNamingPolicy.translateName(f));    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;	120	None	replace
695	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  fieldNames;  }  else  {  return  Collections.emptyList();  }  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  fieldNames;  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f),  fieldNames;  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name,    fieldNamingPolicy.translateName(f));    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  ')'  expected	120	None	replace
696	[BUG]  [BUGGY]  if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
697	[BUG]  [BUGGY]  if(serializedName!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(serializedName!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(serializedName!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
698	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  else  {  return  Collections.emptyList();  }  [CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name,    fieldNamingPolicy.translateName(f));    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;	120	None	replace
699	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.equals(fieldNamingPolicy.translateName(f)))  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  else  {  return  Collections.emptyList();  }  [CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.equals(fieldNamingPolicy.translateName(f)))  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null  ||  name.equals(fieldNamingPolicy.translateName(f)))  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name,    fieldNamingPolicy.translateName(f));    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;	120	None	replace
700	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.translateName(f))  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  else  {  return  Collections.emptyList();  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.translateName(f))  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.translateName(f))  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name,    fieldNamingPolicy.translateName(f));    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	120	None	replace
701	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.equals(fieldNamingPolicy.translateName(f)))  {  return  Collections.singletonList(name,  annotation.translateName(f));  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.equals(fieldNamingPolicy.translateName(f)))  {  return  Collections.singletonList(name,  annotation.translateName(f));  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null  ||  name.equals(fieldNamingPolicy.translateName(f)))  {  return  Collections.singletonList(name,  annotation.translateName(f));  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name,    fieldNamingPolicy.translateName(f));    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
702	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.findAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.findAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.findAnnotation(SerializedName.class);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
703	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.findAnnotation(SerializedName.class,  name);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.findAnnotation(SerializedName.class,  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.findAnnotation(SerializedName.class,  name);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
704	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name,  annotation);  }  [CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name,  annotation);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  return  Collections.singletonList(name,  annotation);  }	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation    >>    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;	59	None	replace
705	[BUG]  [BUGGY]  Annotation  annotation  =  serializer.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  serializer.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  serializer.getAnnotation(SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
706	[BUG]  [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f);  }  else  {  return  Collections.unmodifiableList(fieldNamingPolicy.getAnnotation(SerializedName.class));  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f);  }  else  {  return  Collections.unmodifiableList(fieldNamingPolicy.getAnnotation(SerializedName.class));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f);  }  else  {  return  Collections.unmodifiableList(fieldNamingPolicy.getAnnotation(SerializedName.class));  }	  aughtExceptionHandler.handleMissingName(name,    f);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	132	None	replace
707	[BUG]  [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler.handleMissingName(name,    f);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	132	None	replace
708	[BUG]  [BUGGY]  expérimentalAccessor.handleMissingName(name,  f);  [CE]  cannot  find  symbol  exp  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  expérimentalAccessor.handleMissingName(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	expérimentalAccessor.handleMissingName(name,  f);	  aughtExceptionHandler.handleMissingName(name,    f);    	non-compiled	[CE]  cannot  find  symbol  exp	132	None	replace
709	[BUG]  [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f);  }  else  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f);  }  else  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f);  }  else  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(int  i  =  0;  i  <  fieldNames.size();  ++i)	  aughtExceptionHandler.handleMissingName(name,    f);    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
710	[BUG]  [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f);  }  else  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f);  }  else  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f);  }  else  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)	  aughtExceptionHandler.handleMissingName(name,    f);    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
711	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	123	8	replace
712	[BUG]  [BUGGY]  if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	123	8	replace
713	[BUG]  [BUGGY]  MutableMap.printStackTrace(fieldNamingPolicy.translateName(f));  [CE]  cannot  find  symbol  MutableMap  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  MutableMap.printStackTrace(fieldNamingPolicy.translateName(f));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	MutableMap.printStackTrace(fieldNamingPolicy.translateName(f));	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f));    	non-compiled	[CE]  cannot  find  symbol  MutableMap	138	None	replace
714	[BUG]  [BUGGY]  MutableFieldUtils.printStackTrace(fieldNamingPolicy.translateName(f));  [CE]  cannot  find  symbol  MutableFieldUtils  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  MutableFieldUtils.printStackTrace(fieldNamingPolicy.translateName(f));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	MutableFieldUtils.printStackTrace(fieldNamingPolicy.translateName(f));	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f));    	non-compiled	[CE]  cannot  find  symbol  MutableFieldUtils	138	None	replace
715	[BUG]  [BUGGY]  MutableFieldUtils.printStackTrace(fieldNamingPolicy.translateName(name));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  MutableFieldUtils.printStackTrace(fieldNamingPolicy.translateName(name));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	MutableFieldUtils.printStackTrace(fieldNamingPolicy.translateName(name));	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	138	None	replace
716	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  [Delete]  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  [Delete]  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  [Delete]  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  ')'  expected	79	None	add
717	[BUG]  [BUGGY]  }  else  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  cannot  find  symbol  name  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  }  else  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	}  else  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    If(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol  name	87	None	replace
718	[BUG]  [BUGGY]  AnnotatedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  AnnotatedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	AnnotatedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    If(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
719	[BUG]  [BUGGY]  AnnotatedName  annotation  =  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  AnnotatedName  annotation  =  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	AnnotatedName  annotation  =  f.getAnnotation(SerializedName.class);	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    If(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
720	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  SerializedName  serializedName  =  f.getAnnotation(SerializableName.class);  [CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  SerializedName  serializedName  =  f.getAnnotation(SerializableName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    SerializedName  serializedName  =  f.getAnnotation(SerializableName.class);	  	non-compiled	[CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)	48	None	add
721	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  SerializedName  serializedName  =  fieldNamingPolicy.translateName(f);  [CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  SerializedName  serializedName  =  fieldNamingPolicy.translateName(f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    SerializedName  serializedName  =  fieldNamingPolicy.translateName(f);	  	non-compiled	[CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)	48	None	add
722	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  SerializedName  serializedName  =  f.getAnnotation(EnumSerializedName.class);  [CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)  [FE]        NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  SerializedName  serializedName  =  f.getAnnotation(EnumSerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    SerializedName  serializedName  =  f.getAnnotation(EnumSerializedName.class);	  	non-compiled	[CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)	48	None	add
723	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value().length  >  0)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  annotation.value().length  >  0)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value().length  >  0)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }	  While(annotation!=    null)    {    String    serializedName    =    annotation.value();    if(serializedName!=    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  ';'  expected	110	None	replace
724	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  annotation.name();  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  annotation.name();  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  serializedName  =  annotation.name();  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }	  While(annotation!=    null)    {    String    serializedName    =    annotation.value();    if(serializedName!=    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  ';'  expected	110	None	replace
725	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }	  if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    	compilable	  [FE]  NullPointerException  	22	9	replace
726	[BUG]  [BUGGY]  if(annotation!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }	  if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    	compilable	  [FE]  NullPointerException  	22	9	replace
727	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null  &&  name.length()  >  0)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=  null  &&  name.length()  >  0)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }	  if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    	compilable	  [FE]  ComparisonFailure  	22	1	replace
728	[BUG]  [BUGGY]  if(name!=  null  &&  name.length()  >  0)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null  &&  name.length()  >  0)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null  &&  name.length()  >  0)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }	  if(name!=    null)    {    String    serializedName    =    name.toLowerCase();    return    Collections.singletonList(serializedName);    }    	compilable	  [FE]  ComparisonFailure  	22	1	replace
729	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value().equals(name))  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  annotation.value().equals(name))  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value().equals(name))  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    String    serializedName    =    annotation.value();    if(serializedName!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
730	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value()  >  0)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  annotation.value()  >  0)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value()  >  0)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    String    serializedName    =    annotation.value();    if(serializedName!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
731	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value().length  >  0)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  annotation.value().length  >  0)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value().length  >  0)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    String    serializedName    =    annotation.value();    if(serializedName!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
732	[BUG]  [BUGGY]  While(annotation!=  null  &&  name.length()  >  0)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  name.length()  >  0)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  name.length()  >  0)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  While(annotation!=    null)    {    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	30	None	replace
733	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value()  >  0)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  annotation.value()  >  0)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value()  >  0)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  While(annotation!=    null)    {    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	30	None	replace
734	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name    ==    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	compilable	  [FE]  ComparisonFailure  	86	1	replace
735	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name    ==    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	compilable	  [FE]  ComparisonFailure  	86	1	replace
736	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name    ==    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	compilable	  [FE]  IllegalArgumentException  	86	9	replace
737	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name    ==    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	compilable	  [FE]  IllegalArgumentException  	86	9	replace
738	[BUG]  [BUGGY]  <  String>  name  =  fieldNamingPolicy.translateName(f);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  <  String>  name  =  fieldNamingPolicy.translateName(f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	<  String>  name  =  fieldNamingPolicy.translateName(f);	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name    ==    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
739	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)/  name;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)/  name;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class)/  name;	  String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	116	None	replace
740	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + ": ";  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + ": ";	  String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    	compilable	  [FE]  NullPointerException  	116	9	replace
741	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + ": ";  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + ": ";  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class)+  name  + ": ";	  String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    	compilable	  [FE]  NullPointerException  	116	9	replace
742	[BUG]  [BUGGY]  annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  not  a  statement  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
743	[BUG]  [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  }  else  {  return  Collections.emptyList();  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	136	None	replace
744	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class),  name);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class),  name);	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  ';'  expected	136	None	replace
745	[BUG]  [BUGGY]  While(annotation!=  null  &&  name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  name!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation    ==    null)    {    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
746	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class)+  name);	  String    serializedName    =    f.getAnnotation(SerializedName.class),    name);    	non-compiled	[CE]  ';'  expected	51	None	replace
747	[BUG]  [BUGGY]  While(annotation!=  null  &&  name.length()  >  0)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  name.length()  >  0)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  name.length()  >  0)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    if(name    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	62	None	replace
748	[BUG]  [BUGGY]  While(annotation!=  null  &&  name.length()  >  0)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  name.length()  >  0)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  name.length()  >  0)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    if(name    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	62	None	replace
749	[BUG]  [BUGGY]  While(annotation!=  null  &&  name.length()  >  0)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  name.length()  >  0)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  name.length()  >  0)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    if(name    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	62	None	replace
750	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  String  serializedName  =  F.getAnnotation(SerializedName.class)+  name;  [CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  String  serializedName  =  F.getAnnotation(SerializedName.class)+  name;  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String    serializedName    =    f.getAnnotation(SerializedName.class)+    name;    String  serializedName  =  F.getAnnotation(SerializedName.class)+  name;	  	non-compiled	[CE]  variable  serializedName  is  already  defined  in  method  getFieldNames(Field)	115	None	add
751	[BUG]  [BUGGY]  if(annotation  ==  null)  {  Class  <?>  serializedName  =  fieldNamingPolicy.translateName(f);  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  Class  <?>  serializedName  =  fieldNamingPolicy.translateName(f);  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  Class  <?>  serializedName  =  fieldNamingPolicy.translateName(f);  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
752	[BUG]  [BUGGY]  if(annotation  ==  null)  {  Class  <?>  serializedName  =  fieldNamingPolicy.translateName(f);  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  Class  <?>  serializedName  =  fieldNamingPolicy.translateName(f);  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  Class  <?>  serializedName  =  fieldNamingPolicy.translateName(f);  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
753	[BUG]  [BUGGY]  if(fieldNamingPolicy.translateName(name,  f))  {  aughtException.printStackTrace(fieldNamingPolicy.translateName(name));  }  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(fieldNamingPolicy.translateName(name,  f))  {  aughtException.printStackTrace(fieldNamingPolicy.translateName(name));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(fieldNamingPolicy.translateName(name,  f))  {  aughtException.printStackTrace(fieldNamingPolicy.translateName(name));  }	  aughtException.printStackTrace(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	137	None	replace
754	[BUG]  [BUGGY]  if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.    <    String>emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
755	[BUG]  [BUGGY]  if(serializedName!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(serializedName!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(serializedName!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.    <    String>emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
756	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    if(annotation.value()    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	114	None	replace
757	[BUG]  [BUGGY]  While(annotation!=  null)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }  }	  While(annotation!=    null)    {    if(annotation.value()    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	114	None	replace
758	[BUG]  [BUGGY]  expérimentalExceptionHandler.handleMissingName(name);  [CE]  cannot  find  symbol  exp  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  expérimentalExceptionHandler.handleMissingName(name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	expérimentalExceptionHandler.handleMissingName(name);	  aughtExceptionHandler.handleMissingName(name);    	non-compiled	[CE]  cannot  find  symbol  exp	84	None	replace
759	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.getInstance();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.getInstance();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ObjectConstructor  constructor  =  fieldNamingPolicy.getInstance();	  aughtExceptionHandler.handleMissingName(name);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
760	[BUG]  [BUGGY]  expérimentalAccessor.handleMissingName(name);  [CE]  cannot  find  symbol  exp  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  expérimentalAccessor.handleMissingName(name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	expérimentalAccessor.handleMissingName(name);	  aughtExceptionHandler.handleMissingName(name);    	non-compiled	[CE]  cannot  find  symbol  exp	84	None	replace
761	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ObjectConstructor  constructor  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name);	  aughtExceptionHandler.handleMissingName(name);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
762	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  annotation);  }  [CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  annotation);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  return  Collections.singletonList(name,  annotation);  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation    >>    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;	119	None	replace
763	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.findAnnotation(Name.class,  name);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.findAnnotation(Name.class,  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.findAnnotation(Name.class,  name);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(Name.class);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
764	[BUG]  [BUGGY]  if(serializedName!=  null)  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(serializedName!=  null)  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(serializedName!=  null)  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    List    <    String>    fieldNames    =    new    ArrayList    <    String>();    for(String    serializedName    :    name)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
765	[BUG]  [BUGGY]  if(annotation!=  null)  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    List    <    String>    fieldNames    =    new    ArrayList    <    String>();    for(String    serializedName    :    name)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
766	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.hasNext())  {  String  serializedName  =  annotation.next();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  annotation.hasNext())  {  String  serializedName  =  annotation.next();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.hasNext())  {  String  serializedName  =  annotation.next();	  While(annotation!=    null    &&    annotation.value()    >    0)    {    String    serializedName    =    annotation.value();    	non-compiled	[CE]  ';'  expected	4	None	replace
767	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value()  >  0)  {  String  serializedName  =  annotation.value();  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  annotation.value()  >  0)  {  String  serializedName  =  annotation.value();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value()  >  0)  {  String  serializedName  =  annotation.value();  }	  While(annotation!=    null    &&    annotation.value()    >    0)    {    String    serializedName    =    annotation.value();    	non-compiled	[CE]  ';'  expected	4	None	replace
768	[BUG]  [BUGGY]  if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.unmodifiableList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
769	[BUG]  [BUGGY]  Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.unmodifiableList(serializedName);    }    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
770	[BUG]  [BUGGY]  if(fieldNamingPolicy.translateName(name,  f))  {  aughtExceptionHandler(fieldNamingPolicy.translateName(name));  }  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(fieldNamingPolicy.translateName(name,  f))  {  aughtExceptionHandler(fieldNamingPolicy.translateName(name));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(fieldNamingPolicy.translateName(name,  f))  {  aughtExceptionHandler(fieldNamingPolicy.translateName(name));  }	  aughtExceptionHandler(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	140	None	replace
771	[BUG]  [BUGGY]  aughtExceptionHandler(fieldNamingPolicy.translateName(f),  name);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  aughtExceptionHandler(fieldNamingPolicy.translateName(f),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtExceptionHandler(fieldNamingPolicy.translateName(f),  name);	  aughtExceptionHandler(fieldNamingPolicy.translateName(name));    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
772	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(field,  name);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(field,  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.translateName(field,  name);	  Annotation    annotation    =    fieldNamingPolicy.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
773	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   ".       ");    }    	compilable	  [FE]  IllegalArgumentException  	131	9	replace
774	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  IllegalArgumentException  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   ".       ");    }    	compilable	  [FE]  IllegalArgumentException  	131	9	replace
775	[BUG]  [BUGGY]  String  serializedName  =  serializer.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serializer  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  serializer.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  serializer.getAnnotation(SerializedName.class);	  String    serializedName    =    name.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializer	47	None	replace
776	[BUG]  [BUGGY]  String  serializedName  =  SerializedName.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  SerializedName.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  SerializedName.getAnnotation(SerializedName.class);	  String    serializedName    =    name.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
777	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	55	None	add
778	[BUG]  [BUGGY]  logger.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  [CE]  cannot  find  symbol  logger  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  logger.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	logger.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name,    null);    	non-compiled	[CE]  cannot  find  symbol  logger	141	None	replace
779	[BUG]  [BUGGY]  MutableMap.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  [CE]  cannot  find  symbol  MutableMap  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  MutableMap.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	MutableMap.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name,    null);    	non-compiled	[CE]  cannot  find  symbol  MutableMap	141	None	replace
780	[BUG]  [BUGGY]  if(fieldNamingPolicy.translateName(f),  name!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(fieldNamingPolicy.translateName(f),  name!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(fieldNamingPolicy.translateName(f),  name!=  null)  {  throw  new  RuntimeException( " ");  }	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name,    null);    	non-compiled	[CE]  	141	None	replace
781	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	53	1	add
782	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	53	1	add
783	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  while(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  while(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	53	1	add
784	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  while(annotation!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  while(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  while(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	53	1	add
785	[BUG]  [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  unreachable  statement  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=        null)        {        return        Collections.singletonList(name);        }        if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  unreachable  statement	53	None	add
786	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  methodNamingPolicy.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  methodNamingPolicy  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy  constructor  =  methodNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy  constructor  =  methodNamingPolicy.getAnnotation(SerializedName.class);	  FieldNamingStrategy    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  methodNamingPolicy	23	None	replace
787	[BUG]  [BUGGY]  if(serializedName!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(serializedName!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(serializedName!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
788	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(name    [Delete]    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
789	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(fieldNamingPolicy!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(fieldNamingPolicy!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
790	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(fieldNamingPolicy!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(fieldNamingPolicy!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(fieldNamingPolicy!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
791	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(domain!=  null)  {  return  Collections.singletonList(name);  }  [CE]  cannot  find  symbol  domain  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(domain!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(domain!=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  cannot  find  symbol  domain	73	None	add
792	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(type!=  null)  {  return  Collections.singletonList(name);  }  [CE]  cannot  find  symbol  type  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(type!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(type!=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  cannot  find  symbol  type	73	None	add
793	[BUG]  [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  else  {  return  Collections.singletonList(serializedName);  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  else  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  }  else  {  return  Collections.singletonList(serializedName);  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	135	None	replace
794	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.length()  ==  0)  {  return  Collections.singletonList(name);  }  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  annotation.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null  ||  annotation.length()  ==  0)  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
795	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  fieldNamingPolicy.getSerializedName(f);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  fieldNamingPolicy.getSerializedName(f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  serializedName  =  fieldNamingPolicy.getSerializedName(f);	  While(annotation!=    null)    {    String    name    =    fieldNamingPolicy.translateName(f);    	non-compiled	[CE]  ';'  expected	31	None	replace
796	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  name  =  f.getName();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  String  name  =  f.getName();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  name  =  f.getName();	  While(annotation!=    null)    {    String    name    =    fieldNamingPolicy.translateName(f);    	non-compiled	[CE]  ';'  expected	31	None	replace
797	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  fieldNamingPolicy.getSerializedName();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  fieldNamingPolicy.getSerializedName();  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  serializedName  =  fieldNamingPolicy.getSerializedName();	  While(annotation!=    null)    {    String    name    =    fieldNamingPolicy.translateName(f);    	non-compiled	[CE]  ';'  expected	31	None	replace
798	[BUG]  [BUGGY]  While(annotation!=  null)  {  name  =  fieldNamingPolicy.translateName(f);  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  name  =  fieldNamingPolicy.translateName(f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  name  =  fieldNamingPolicy.translateName(f);	  While(annotation!=    null)    {    name    =    annotation.value();    	non-compiled	[CE]  ';'  expected	97	None	replace
799	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class)+  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class)+  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class)+  f.getAnnotation(SerializedName.class);	  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
800	[BUG]  [BUGGY]  expérimentalAccessor.handleSerialization(name,  f);  [CE]  cannot  find  symbol  exp  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  expérimentalAccessor.handleSerialization(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	expérimentalAccessor.handleSerialization(name,  f);	  aughtExceptionHandler.handleSerialization(name,    f);    	non-compiled	[CE]  cannot  find  symbol  exp	130	None	replace
801	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  excluder.handleSerialization(name,  f);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  ObjectConstructor  constructor  =  excluder.handleSerialization(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	ObjectConstructor  constructor  =  excluder.handleSerialization(name,  f);	  aughtExceptionHandler.handleSerialization(name,    f);    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
802	[BUG]  [BUGGY]  Annotation.handleSerialization(name,  f);  [CE]  cannot  find  symbol  Annotation  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation.handleSerialization(name,  f);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation.handleSerialization(name,  f);	  aughtExceptionHandler.handleSerialization(name,    f);    	non-compiled	[CE]  cannot  find  symbol  Annotation	130	None	replace
803	[BUG]  [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  f.getAnnotation(SerializedName.class));  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  f.getAnnotation(SerializedName.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  f.getAnnotation(SerializedName.class));	  Collections.    <    String>    boundFields    =    Collections.unmodifiableList(name);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
804	[BUG]  [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  f.value());  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  f.value());  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name,  f.value());	  Collections.    <    String>    boundFields    =    Collections.unmodifiableList(name);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
805	[BUG]  [BUGGY]  if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.    <    String>emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
806	[BUG]  [BUGGY]  if(serializedName!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(serializedName!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(serializedName!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.    <    String>emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
807	[BUG]  [BUGGY]  logger.printStackTrace(fieldNamingPolicy.translateName(f),  name);  [CE]  cannot  find  symbol  logger  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  logger.printStackTrace(fieldNamingPolicy.translateName(f),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	logger.printStackTrace(fieldNamingPolicy.translateName(f),  name);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name);    	non-compiled	[CE]  cannot  find  symbol  logger	139	None	replace
808	[BUG]  [BUGGY]  MutableFieldUtils.printStackTrace(fieldNamingPolicy.translateName(f),  name);  [CE]  cannot  find  symbol  MutableFieldUtils  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  MutableFieldUtils.printStackTrace(fieldNamingPolicy.translateName(f),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	MutableFieldUtils.printStackTrace(fieldNamingPolicy.translateName(f),  name);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name);    	non-compiled	[CE]  cannot  find  symbol  MutableFieldUtils	139	None	replace
809	[BUG]  [BUGGY]  FieldNamingStrategy.printStackTrace(annotation.translateName(f),  name);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  FieldNamingStrategy.printStackTrace(annotation.translateName(f),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy.printStackTrace(annotation.translateName(f),  name);	  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),    name);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
810	[BUG]  [BUGGY]  if(name!=  null)  {  if(annotation  ==  null  ||  annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  if(annotation  ==  null  ||  annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  if(annotation  ==  null  ||  annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation    ==    null    ||    annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
811	[BUG]  [BUGGY]  if(name!=  null)  {  if(annotation  ==  null  ||  annotation  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  if(annotation  ==  null  ||  annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  if(annotation  ==  null  ||  annotation  ==  null)  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation    ==    null    ||    annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
812	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation  ==  null  ||  annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation    ==    null    ||    annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	106	1	replace
813	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null  ||  annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation    ==    null    ||    annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	106	1	replace
814	[BUG]  [BUGGY]  if(!serializedName.equals(name))  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  serializedName  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(!serializedName.equals(name))  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(!serializedName.equals(name))  {  return  Collections.emptyList();  }	  [Delete]    	non-compiled	[CE]  cannot  find  symbol  serializedName	126	None	replace
815	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=  null)  {  return  Collections.emptyList();  }	  [Delete]    	compilable	  [FE]  ComparisonFailure  	126	8	replace
816	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.emptyList();  }  [FE]  ComparisonFailure  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  return  Collections.emptyList();  }	  [Delete]    	compilable	  [FE]  ComparisonFailure  	126	8	replace
817	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(!name.equals( " "))  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(!name.equals( " "))  {  return  Collections.emptyList();  }	  [Delete]    	compilable	  [FE]  ComparisonFailure  	126	8	replace
818	[BUG]  [BUGGY]  if(!name.equals( " "))  {  return  Collections.emptyList();  }  [FE]  ComparisonFailure  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(!name.equals( " "))  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(!name.equals( " "))  {  return  Collections.emptyList();  }	  [Delete]    	compilable	  [FE]  ComparisonFailure  	126	8	replace
819	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name  ==  null)  {  return  Collections.emptyList();  }	  [Delete]    	compilable	  [FE]  NullPointerException  	126	9	replace
820	[BUG]  [BUGGY]  if(name  ==  null)  {  return  Collections.emptyList();  }  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name  ==  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name  ==  null)  {  return  Collections.emptyList();  }	  [Delete]    	compilable	  [FE]  NullPointerException  	126	9	replace
821	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation  ==  null)  {  return  Collections.emptyList();  }	  [Delete]    	compilable	  [FE]  ComparisonFailure  	126	8	replace
822	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.emptyList();  }  [FE]  ComparisonFailure  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  return  Collections.emptyList();  }	  [Delete]    	compilable	  [FE]  ComparisonFailure  	126	8	replace
823	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	71	1	add
824	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	71	1	add
825	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	71	1	add
826	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	71	1	add
827	[BUG]  [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  unreachable  statement  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name        ==        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  unreachable  statement	71	None	add
828	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	9	1	add
829	[BUG]  [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	9	1	add
830	[BUG]  [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=        null)        {        return        Collections.singletonList(name);        }        if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  >=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	9	None	add
831	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  deserialized);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  deserialized);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  deserialized	52	None	replace
832	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  alternates);  [CE]  cannot  find  symbol  alternates  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  alternates);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name,  alternates);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  alternates	52	None	replace
833	[BUG]  [BUGGY]  final  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  ]);  [CE]  incompatible  types  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  final  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  ]);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	final  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  ]);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    fieldNames.toArray(new    String[fieldNames.size()    ]);    	non-compiled	[CE]  incompatible  types	25	None	replace
834	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  ],  name);  [CE]  incompatible  types  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  ],  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  ],  name);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    fieldNames.toArray(new    String[fieldNames.size()    ]);    	non-compiled	[CE]  incompatible  types	25	None	replace
835	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(f).getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(f).getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.translateName(f).getAnnotation(SerializedName.class);	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    If(annotation    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
836	[BUG]  [BUGGY]  Annotated  annotation  =  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotated  annotation  =  f.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotated  annotation  =  f.getAnnotation(SerializedName.class);	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(annotation    ==    null)    {    return    collection.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
837	[BUG]  [BUGGY]  SerializedName  serializedName  =  fieldNamingPolicy.getSerializedName(name);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  SerializedName  serializedName  =  fieldNamingPolicy.getSerializedName(name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  fieldNamingPolicy.getSerializedName(name);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
838	[BUG]  [BUGGY]  While(annotation!=  null  &&  name.length()  >  0)  {  if(annotation.value()!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  name.length()  >  0)  {  if(annotation.value()!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  name.length()  >  0)  {  if(annotation.value()!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
839	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value()  >  0)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  annotation.value()  >  0)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value()  >  0)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
840	[BUG]  [BUGGY]  While(annotation!=  null  &&  name.length()  >  0)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  name.length()  >  0)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  name.length()  >  0)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
841	[BUG]  [BUGGY]  DeserializedName  f  =  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  DeserializedName  f  =  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	DeserializedName  f  =  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  ';'  expected	127	None	replace
842	[BUG]  [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	127	None	replace
843	[BUG]  [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	127	None	replace
844	[BUG]  [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }  else  {  return  Collections.emptyList();  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	127	None	replace
845	[BUG]  [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  }  else  {  return  Collections.emptyList();  }	  aughtExceptionHandler.handleMissingName(name,    f.getAnnotation(SerializedName.class),    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	127	None	replace
846	[BUG]  [BUGGY]  String[]  alternates  =  methodNamingPolicy.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  methodNamingPolicy  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String[]  alternates  =  methodNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String[]  alternates  =  methodNamingPolicy.getAnnotation(SerializedName.class);	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  methodNamingPolicy	24	None	replace
847	[BUG]  [BUGGY]  Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
848	[BUG]  [BUGGY]  if(name!=  null)  {  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName!=    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
849	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.findAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.findAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.findAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
850	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	while(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  While(annotation    ==    null)    {    return    Collections.singletonList(name);    }    	compilable	  [FE]  ComparisonFailure  	6	1	replace
851	[BUG]  [BUGGY]  while(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  while(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	while(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  While(annotation    ==    null)    {    return    Collections.singletonList(name);    }    	compilable	  [FE]  ComparisonFailure  	6	1	replace
852	[BUG]  [BUGGY]  hilst(annotation!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  hilst(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	hilst(annotation!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
853	[BUG]  [BUGGY]  Annotation  annotation  =  f.translateName(name);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  f.translateName(name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  f.translateName(name);	  Annotation    annotation    =    fieldNamingPolicy.translateName(name);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
854	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class));  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class));	  Annotation    annotation    =    fieldNamingPolicy.translateName(name);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
855	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class),  name);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class),  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class),  name);	  Annotation    annotation    =    fieldNamingPolicy.translateName(name);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
856	[BUG]  [BUGGY]  Object  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName);  [CE]  incompatible  types  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Object  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Object  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    Collections.singletonList(serializedName);    	non-compiled	[CE]  incompatible  types	26	None	replace
857	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName,  fieldNamingPolicy);  [CE]  incompatible  types  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName,  fieldNamingPolicy);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName,  fieldNamingPolicy);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    return    Collections.singletonList(serializedName);    	non-compiled	[CE]  incompatible  types	26	None	replace
858	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.findAnnotation(SerializationName.class);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.findAnnotation(SerializationName.class);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.findAnnotation(SerializationName.class);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializationName.class);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
859	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.findAnnotation(SerializationName.class,  name);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.findAnnotation(SerializationName.class,  name);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.findAnnotation(SerializationName.class,  name);	  Annotation    annotation    =    fieldNamingPolicy.getAnnotation(SerializationName.class);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
860	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  deserialized);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  deserialized);	  String    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  deserialized	46	None	replace
861	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  arrayNamingStrategy);  [CE]  cannot  find  symbol  arrayNamingStrategy  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  arrayNamingStrategy);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  arrayNamingStrategy);	  String    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  arrayNamingStrategy	46	None	replace
862	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  fieldNamingStrategy);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  fieldNamingStrategy);	  String    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	46	None	replace
863	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  alternates);  [CE]  cannot  find  symbol  alternates  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  alternates);  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  name,  alternates);	  String    serializedName    =    f.getAnnotation(SerializedName.class,    name);    	non-compiled	[CE]  cannot  find  symbol  alternates	46	None	replace
864	[BUG]  [BUGGY]  if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
865	[BUG]  [BUGGY]  Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  serialized  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
866	[BUG]  [BUGGY]  if(name!=  null)  {  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }	          if(name!=    null)    {    String    serializedName    =    f.getAnnotation(SerializedName.class);    if(serializedName    ==    null)    {    return    Collections.singletonList(serializedName);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
867	[BUG]  [BUGGY]  if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  other  {  return  Collections.emptyList();  }  [CE]  not  a  statement  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  other  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  other  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation    ==    null)    {    return    Collections.singletonList(name;    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  not  a  statement	107	None	replace
868	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null  ||  name.length()  ==  0)  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null  ||  name.length()  ==  0)  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  ==  null  ||  name.length()  ==  0)  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  illegal  start  of  type	122	None	add
869	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null  ||  name.length()  >=  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null  ||  name.length()  >=  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null    ||    name.length()    ==    0)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  ==  null  ||  name.length()  >=  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	122	None	add
870	[BUG]  [BUGGY]  While(annotation!=  null)  {  return  Collections.singletonList(name,  f.getAnnotation(SerializedName.class));  }  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null)  {  return  Collections.singletonList(name,  f.getAnnotation(SerializedName.class));  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  return  Collections.singletonList(name,  f.getAnnotation(SerializedName.class));  }	  While(annotation!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
871	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value().length  >  0)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);      [BUGGY]  While(annotation!=  null  &&  annotation.value().length  >  0)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]      }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value().length  >  0)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }	  While(annotation!=    null)    {    name    =    annotation.value();    if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	96	None	replace
