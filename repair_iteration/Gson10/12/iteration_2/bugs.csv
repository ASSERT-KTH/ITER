bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
2	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(f);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(f);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.translateName(f);	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
3	[BUG]  [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  f.getAnnotation(SerializedName.class);	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
4	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value()  >  0)  {  String  serializedName  =  annotation.value();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  While(annotation!=  null  &&  annotation.value()  >  0)  {  String  serializedName  =  annotation.value();  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value()  >  0)  {  String  serializedName  =  annotation.value();	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
5	[BUG]  [BUGGY]  While(annotation!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  While(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
6	[BUG]  [BUGGY]  While(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  While(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
7	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
8	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
9	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
10	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
11	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  >=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	1	None	add
12	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  >>  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  >>  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  >>  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	1	None	add
13	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  If(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  If(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    If(name!=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ';'  expected	1	None	add
14	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  [Delete]  null)  {  return  Collections.singletonList(name);  }  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  [Delete]  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  [Delete]  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ')'  expected	1	None	add
15	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	20	None	add
16	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  ==  null)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	20	None	add
17	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	20	None	add
18	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  If(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  If(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    If(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  ';'  expected	20	None	add
19	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation!=  null)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation!=  null)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation!=  null)  {  return  Collections.emptyList();  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	20	None	add
20	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	20	None	add
21	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }	      	compilable	  [FE]  ComparisonFailure  	16	1	replace
22	[BUG]  [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  String  serializedName  =  name.toLowerCase();  return  Collections.singletonList(serializedName);  }	      	compilable	  [FE]  ComparisonFailure  	16	1	replace
23	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class);  [CE]  incompatible  types  [FE]      NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class);	      	non-compiled	[CE]  incompatible  types	16	None	replace
24	[BUG]  [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class);  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String[]  alternates  =  f.getAnnotation(SerializedName.class);	      	non-compiled	[CE]  incompatible  types	16	None	replace
25	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  ]);  [CE]  incompatible  types  [FE]          NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  ]);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  return  fieldNames.toArray(new  String[fieldNames.size()  ]);	      	non-compiled	[CE]  incompatible  types	16	None	replace
26	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName);  [CE]  incompatible  types  [FE]            NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);  return  Collections.singletonList(serializedName);	      	non-compiled	[CE]  incompatible  types	16	None	replace
27	[BUG]  [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name);  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Collections.  <  String>  boundFields  =  Collections.unmodifiableList(name);	      	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
28	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  While(annotation!=  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  if(name!=  null)  {  return  Collections.singletonList(name);  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	14	None	replace
29	[BUG]  [BUGGY]  While(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  While(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	14	None	replace
30	[BUG]  [BUGGY]  While(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  While(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	14	None	replace
31	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  While(annotation!=  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  name  =  fieldNamingPolicy.translateName(f);	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	14	None	replace
32	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  unreachable  statement  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  unreachable  statement	18	None	add
33	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  unreachable  statement  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  unreachable  statement	18	None	add
34	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	18	None	add
35	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  If(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  If(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    If(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ';'  expected	18	None	add
36	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation  >>  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation  >>  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(annotation  >>  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	18	None	add
37	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation  [Delete]  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation  [Delete]  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(annotation  [Delete]  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ')'  expected	18	None	add
38	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	3	1	add
39	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	3	1	add
40	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	3	1	add
41	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	3	1	add
42	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  If(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  If(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    If(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ';'  expected	3	None	add
43	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  >=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	3	None	add
44	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  [BUGGY]  null)  {  return  Collections.singletonList(name);  }  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  [BUGGY]  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  [BUGGY]  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ')'  expected	3	None	add
45	[BUG]  [BUGGY]      Collections.  <  String>  boundFields  =  Collections.emptyList();  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]      Collections.  <  String>  boundFields  =  Collections.emptyList();  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	        Collections.  <  String>  boundFields  =  Collections.emptyList();	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
46	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String)  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  name);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String)	17	None	replace
47	[BUG]  [BUGGY]  String  serializedName  =  name.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  String  serializedName  =  name.getAnnotation(SerializedName.class);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  name.getAnnotation(SerializedName.class);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
48	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    	compilable	  [FE]  NullPointerException  	17	9	replace
49	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  [FE]  NullPointerException  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    	compilable	  [FE]  NullPointerException  	17	9	replace
50	[BUG]  [BUGGY]  String  serializedName  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  String  serializedName  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  fieldNamingPolicy.getAnnotation(SerializedName.class);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
51	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class),  name);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class),  name);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class),  name);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	17	None	replace
52	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String)  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  name);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String)	17	None	replace
53	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
54	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
55	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
56	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]      NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
57	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  >=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	7	None	add
58	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  If(annotation!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  If(annotation!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    If(annotation!=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ';'  expected	7	None	add
59	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  >>  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  >>  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  >>  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	7	None	add
60	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  [Delete]  null)  {  return  Collections.singletonList(name);  }  [CE]  ')'  expected  [FE]              NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  [Delete]  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  [Delete]  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ')'  expected	7	None	add
61	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  [BUGGY]  null)  {  return  Collections.singletonList(name);  }  [CE]  ')'  expected  [FE]                NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  if(annotation  [BUGGY]  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=    null)    {    return    Collections.singletonList(name);    }    if(annotation  [BUGGY]  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ')'  expected	7	None	add
62	[BUG]  [BUGGY]  While(annotation!=  null)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  While(annotation!=  null)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  if(name  ==  null)  {  return  Collections.singletonList(name);  }	  if(name    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
63	[BUG]  [BUGGY]  While(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  While(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation  ==  null)  {  if(name!=  null)  {  return  Collections.singletonList(name);  }	  if(name    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
64	[BUG]  [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  f.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);	  if(name    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
65	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  unreachable  statement  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  unreachable  statement	9	None	add
66	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  unreachable  statement  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  unreachable  statement	9	None	add
67	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(name  >=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	9	None	add
68	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  If(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  If(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    If(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ';'  expected	9	None	add
69	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(name  >>  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(name  >>  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(name  >>  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	9	None	add
70	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(name  [Delete]  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(name  [Delete]  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(name  [Delete]  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ')'  expected	9	None	add
71	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
72	[BUG]  [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
73	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
74	[BUG]  [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]      NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name!=  null)  {  return  Collections.singletonList(name);  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
75	[BUG]  [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  If(name  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  If(name  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name    ==    null)    {    return    Collections.singletonList(name);    }    If(name  ==  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ';'  expected	5	None	add
76	[BUG]  [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  >=  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	5	None	add
77	[BUG]  [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  >>  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  >>  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  >>  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	5	None	add
78	[BUG]  [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  [BUGGY]  null)  {  return  Collections.singletonList(name);  }  [CE]  ')'  expected  [FE]              NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  [BUGGY]  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  [BUGGY]  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ')'  expected	5	None	add
79	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	21	8	replace
80	[BUG]  [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	21	8	replace
81	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	21	1	replace
82	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	21	1	replace
83	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(name);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.translateName(name);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.translateName(name);	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
84	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(name);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  aughtExceptionHandler.handleMissingName(name);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtExceptionHandler.handleMissingName(name);	  if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	2	None	replace
85	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	13	None	add
86	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(name  ==  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	13	None	add
87	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  If(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  If(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    If(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  	13	None	add
88	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(name  >=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(name  >=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	13	None	add
89	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	13	None	add
90	[BUG]  [BUGGY]  While(annotation!=  null  &&  annotation.value()  >  0)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  While(annotation!=  null  &&  annotation.value()  >  0)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null  &&  annotation.value()  >  0)  {  return  Collections.singletonList(name);  }	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
91	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  unreachable  statement  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  unreachable  statement	11	None	add
92	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  unreachable  statement  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(annotation!=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  unreachable  statement	11	None	add
93	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  If(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  If(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    If(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ';'  expected	11	None	add
94	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(annotation  >=  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	11	None	add
95	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  collection.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [CE]  cannot  find  symbol  collection  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  collection.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  collection.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  cannot  find  symbol  collection	11	None	add
96	[BUG]  [BUGGY]  While(annotation!=  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  While(annotation!=  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
97	[BUG]  [BUGGY]  While(annotation!=  null)  {  name  =  annotation.value();  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  While(annotation!=  null)  {  name  =  annotation.value();  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  name  =  annotation.value();	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
98	[BUG]  [BUGGY]      if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]      if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	        if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.  <  String>emptyList();  }	  	non-compiled	[CE]  illegal  start  of  type	15	None	add
99	[BUG]  [BUGGY]      if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]      if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	        if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.singletonList(serializedName);  }	  	non-compiled	[CE]  illegal  start  of  type	15	None	add
100	[BUG]  [BUGGY]      if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]        NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]      if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	        if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  illegal  start  of  type	15	None	add
101	[BUG]  [BUGGY]      if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [CE]  illegal  start  of  type  [FE]          NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]      if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	        if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.  <  String>emptyList();  }	  	non-compiled	[CE]  illegal  start  of  type	15	None	add
102	[BUG]  [BUGGY]      if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }  [CE]  illegal  start  of  type  [FE]            NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]      if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	        if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName  ==  null)  {  return  Collections.unmodifiableList(serializedName);  }	  	non-compiled	[CE]  illegal  start  of  type	15	None	add
103	[BUG]  [BUGGY]      if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]              NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]      if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	        if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }	  	non-compiled	[CE]  illegal  start  of  type	15	None	add
104	[BUG]  [BUGGY]      if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [CE]  illegal  start  of  type  [FE]                NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]      if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	        if(name!=  null)  {  String  serializedName  =  f.getAnnotation(SerializedName.class);  if(serializedName!=  null)  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  illegal  start  of  type	15	None	add
105	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(Name.class);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(Name.class);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(Name.class);	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
106	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null  ||  annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  unreachable  statement  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null  ||  annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  ==  null  ||  annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  unreachable  statement	20	None	add
107	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null)  {  return  Collections.singletonList(name;  }  else  {  return  Collections.emptyList();  }  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null)  {  return  Collections.singletonList(name;  }  else  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  ==  null)  {  return  Collections.singletonList(name;  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  ')'  expected	20	None	add
108	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	14	None	replace
109	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(name);  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	14	None	replace
110	[BUG]  [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  While(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  String  serializedName  =  annotation.value();  if(serializedName!=  null)  {  return  Collections.singletonList(serializedName);  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	14	None	replace
111	[BUG]  [BUGGY]  While(annotation!=  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  While(annotation!=  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  name  =  annotation.value();  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	14	None	replace
112	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  [BUGGY]  null)  {  return  Collections.singletonList(name);  }  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  if(name  [BUGGY]  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    if(name  [BUGGY]  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ')'  expected	1	None	add
113	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name;  }  else  {  return  Collections.singletonList(name);  }  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.singletonList(name);  }  if(annotation  ==  null)  {  return  Collections.singletonList(name;  }  else  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    if(annotation  ==  null)  {  return  Collections.singletonList(name;  }  else  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ')'  expected	11	None	add
114	[BUG]  [BUGGY]  While(annotation!=  null)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  While(annotation!=  null)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	While(annotation!=  null)  {  if(annotation.value()  ==  null)  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
115	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;	  String    serializedName    =    f.getAnnotation(SerializedName.class);    	compilable	  [FE]  NullPointerException  	17	9	replace
116	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  [FE]  NullPointerException  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class)+  name;	  String    serializedName    =    f.getAnnotation(SerializedName.class);    	compilable	  [FE]  NullPointerException  	17	9	replace
117	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializationName.class);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializationName.class);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializationName.class);	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
118	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class).getAnnotation(SerializedName.class);	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
119	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  >>  null)  {  return  Collections.singletonList(name);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  >>  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  >>  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	3	None	add
120	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  else  {  return  Collections.emptyList();  }  [CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  else  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null)  {  return  Collections.singletonList(name,  fieldNamingPolicy.translateName(f));  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  method  singletonList  in  class  Collections  cannot  be  applied  to  given  types;	21	None	replace
121	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
122	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	21	1	replace
123	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	21	1	replace
124	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	add	if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	21	1	replace
125	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation  ==  null  ||  name.length()  ==  0)  {  return  Collections.singletonList(name);  }	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    	compilable	  [FE]  ComparisonFailure  	21	1	replace
126	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  [Delete]  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	[Delete]	  if(name    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
127	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]      NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));	  if(name    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	6	None	replace
128	[BUG]  [BUGGY]      if(name!=  null)  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]      if(name!=  null)  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	        if(name!=  null)  {  List  <  String>  fieldNames  =  new  ArrayList  <  String>();  for(String  serializedName  :  name)  {  return  Collections.singletonList(serializedName);  }	  	non-compiled	[CE]  illegal  start  of  type	15	None	add
129	[BUG]  [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	Annotation  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  name);	  if(annotation!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
130	[BUG]  [BUGGY]  aughtExceptionHandler.handleSerialization(name,  f);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  aughtExceptionHandler.handleSerialization(name,  f);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtExceptionHandler.handleSerialization(name,  f);	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	4	None	replace
131	[BUG]  [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [CE]  unreachable  statement  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(name!=  null)  {  return  Collections.singletonList(name);  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	non-compiled	[CE]  unreachable  statement	13	None	add
132	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(name,  f);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  aughtExceptionHandler.handleMissingName(name,  f);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtExceptionHandler.handleMissingName(name,  f);	  if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	12	None	replace
133	[BUG]  [BUGGY]  String  serializedName  =  beanNamingPolicy.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  beanNamingPolicy  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  String  serializedName  =  beanNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	String  serializedName  =  beanNamingPolicy.getAnnotation(SerializedName.class);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  beanNamingPolicy	17	None	replace
134	[BUG]  [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  {  null)  {  return  Collections.singletonList(name);  }  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(name  ==  null)  {  return  Collections.singletonList(name);  }  if(name  {  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(name    ==    null)    {    return    Collections.singletonList(name);    }    if(name  {  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ')'  expected	5	None	add
135	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class));	  if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	2	None	replace
136	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtExceptionHandler.handleMissingName(name,  f.getAnnotation(SerializedName.class),  name);	  if(name!=    null)    {    return    Collections.singletonList(name);    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	2	None	replace
137	[BUG]  [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(name));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(name));  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(fieldNamingPolicy.translateName(name));	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	14	None	replace
138	[BUG]  [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(f));  [CE]  cannot  find  symbol  aughtException  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(f));  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(fieldNamingPolicy.translateName(f));	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtException	14	None	replace
139	[BUG]  [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),  name);  [CE]  cannot  find  symbol  aughtException  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),  name);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(fieldNamingPolicy.translateName(f),  name);	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtException	14	None	replace
140	[BUG]  [BUGGY]  aughtExceptionHandler(fieldNamingPolicy.translateName(name));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  aughtExceptionHandler(fieldNamingPolicy.translateName(name));  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtExceptionHandler(fieldNamingPolicy.translateName(name));	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	14	None	replace
141	[BUG]  [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  [CE]  cannot  find  symbol  aughtException  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(fieldNamingPolicy.translateName(f),  name,  null);	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtException	14	None	replace
142	[BUG]  [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateValue(f));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  aughtException.printStackTrace(fieldNamingPolicy.translateValue(f));  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	aughtException.printStackTrace(fieldNamingPolicy.translateValue(f));	  if(name!=    null)    {    return    Collections.singletonList(name);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
143	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  {  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  {  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  {  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  ')'  expected	20	None	add
144	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null)  {  return  collection.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [CE]  cannot  find  symbol  collection  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  else  {  return  Collections.emptyList();  }  if(annotation  ==  null)  {  return  collection.singletonList(name);  }  else  {  return  Collections.emptyList();  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    else    {    return    Collections.emptyList();    }    if(annotation  ==  null)  {  return  collection.singletonList(name);  }  else  {  return  Collections.emptyList();  }	  	non-compiled	[CE]  cannot  find  symbol  collection	20	None	add
145	[BUG]  [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  {  null)  {  return  Collections.singletonList(name);  }  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);    [BUGGY]  if(annotation  ==  null)  {  return  Collections.singletonList(name);  }  if(annotation  {  null)  {  return  Collections.singletonList(name);  }  [BUGGY]    }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  fieldNames.add(serializedName);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	75	75	1	replace	if(annotation    ==    null)    {    return    Collections.singletonList(name);    }    if(annotation  {  null)  {  return  Collections.singletonList(name);  }	  	non-compiled	[CE]  ')'  expected	3	None	add
