bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  DurationField  lastRangeField  =  types[i  -  1].getLastDurationType();  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {      [BUGGY]  DurationField  lastRangeField  =  types[i  -  1].getLastDurationType();  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.3333333333333333	222	222	1	replace	DurationField  lastRangeField  =  types[i  -  1].getLastDurationType();	  DurationField    lastRangeField    =    types[i    -    1].getLastRangeDurationType();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
2	[BUG]  [BUGGY]  DurationField  lastRangeField  =  types[i  -  1].getLastDurationType().getField(iChronology);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {      [BUGGY]  DurationField  lastRangeField  =  types[i  -  1].getLastDurationType().getField(iChronology);  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.3333333333333333	222	222	1	replace	DurationField  lastRangeField  =  types[i  -  1].getLastDurationType().getField(iChronology);	  DurationField    lastRangeField    =    types[i    -    1].getLastRangeDurationType();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
3	[BUG]  [BUGGY]  DurationField  lastRangeField  =  loopType.getLastDurationType().getField(iChronology);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {      [BUGGY]  DurationField  lastRangeField  =  loopType.getLastDurationType().getField(iChronology);  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.3333333333333333	222	222	1	replace	DurationField  lastRangeField  =  loopType.getLastDurationType().getField(iChronology);	  DurationField    lastRangeField    =    loopType.getLastDurationType();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]  DurationField  lastUnitField  =  types[i  -  1].getDurationType().getField(iChronology,  compare);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {      [BUGGY]  DurationField  lastUnitField  =  types[i  -  1].getDurationType().getField(iChronology,  compare);  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.3333333333333333	222	222	1	replace	DurationField  lastUnitField  =  types[i  -  1].getDurationType().getField(iChronology,  compare);	  DurationField    lastUnitField    =    types[i    -    1].getDurationType().getField(iChronology);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
5	[BUG]  [BUGGY]  DurationField  lastUnitField  =  loopType.getLastDurationType().getField(iChronology,  compare);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {      [BUGGY]  DurationField  lastUnitField  =  loopType.getLastDurationType().getField(iChronology,  compare);  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.3333333333333333	222	222	1	replace	DurationField  lastUnitField  =  loopType.getLastDurationType().getField(iChronology,  compare);	  DurationField    lastUnitField    =    loopType.getLastDurationType().getField(iChronology);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  DurationField  lastUnitField  =  types[i  -  1].getLastDurationType().getField(iChronology,  compare);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {      [BUGGY]  DurationField  lastUnitField  =  types[i  -  1].getLastDurationType().getField(iChronology,  compare);  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.3333333333333333	222	222	1	replace	DurationField  lastUnitField  =  types[i  -  1].getLastDurationType().getField(iChronology,  compare);	  DurationField    lastUnitField    =    types[i    -    1].getLastDurationType().getField(iChronology);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
7	[BUG]  [BUGGY]  DurationField  lastUnitField  =  iChronology.getLastDurationType().getField(iPartial);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {      [BUGGY]  DurationField  lastUnitField  =  iChronology.getLastDurationType().getField(iPartial);  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.3333333333333333	222	222	1	replace	DurationField  lastUnitField  =  iChronology.getLastDurationType().getField(iPartial);	  DurationField    lastUnitField    =    iChronology.getLastDurationType();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
8	[BUG]  [BUGGY]  DurationField  lastRangeField  =  loopType.getLastRangeDurationType().getField(iChronology,  compare  -  1);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {      [BUGGY]  DurationField  lastRangeField  =  loopType.getLastRangeDurationType().getField(iChronology,  compare  -  1);  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.3333333333333333	222	222	1	replace	DurationField  lastRangeField  =  loopType.getLastRangeDurationType().getField(iChronology,  compare  -  1);	  DurationField    lastRangeField    =    loopType.getLastRangeDurationType().getField(iChronology,    compare);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
9	[BUG]  [BUGGY]  DurationField  lastRangeField  =  loopType.getLastRangeDurationType().getField(iChronology,  compare  +  1);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {      [BUGGY]  DurationField  lastRangeField  =  loopType.getLastRangeDurationType().getField(iChronology,  compare  +  1);  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.3333333333333333	222	222	1	replace	DurationField  lastRangeField  =  loopType.getLastRangeDurationType().getField(iChronology,  compare  +  1);	  DurationField    lastRangeField    =    loopType.getLastRangeDurationType().getField(iChronology,    compare);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
10	[BUG]  [BUGGY]  DurationField  lastRangeField  =  types[i  -  1].getDurationType().getField(iChronology,  compare);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {      [BUGGY]  DurationField  lastRangeField  =  types[i  -  1].getDurationType().getField(iChronology,  compare);  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.3333333333333333	222	222	1	replace	DurationField  lastRangeField  =  types[i  -  1].getDurationType().getField(iChronology,  compare);	  DurationField    lastRangeField    =    types[i    -    1].getDurationType().getField(iChronology);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
11	[BUG]  [BUGGY]  int[]  values  =  types.getValues();  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {      [BUGGY]  int[]  values  =  types.getValues();  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.3333333333333333	222	222	1	replace	int[]  values  =  types.getValues();	  int[]    values    =    iTypes.getValues();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  DurationField  lastRangeField  =  types[i  -  1].getLastRangeDurationType().getField(iChronology,  compare);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {      [BUGGY]  DurationField  lastRangeField  =  types[i  -  1].getLastRangeDurationType().getField(iChronology,  compare);  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.3333333333333333	222	222	1	replace	DurationField  lastRangeField  =  types[i  -  1].getLastRangeDurationType().getField(iChronology,  compare);	  DurationField    lastRangeField    =    loopType.getLastRangeDurationType().getField(iChronology,    compare);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
13	[BUG]  [BUGGY]  DurationField  lastRangeField  =  loopType.getLastRangeDurationType().getField(iChronology,  dataArea);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {      [BUGGY]  DurationField  lastRangeField  =  loopType.getLastRangeDurationType().getField(iChronology,  dataArea);  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.3333333333333333	222	222	1	replace	DurationField  lastRangeField  =  loopType.getLastRangeDurationType().getField(iChronology,  dataArea);	  DurationField    lastRangeField    =    loopType.getLastRangeDurationType().getField(iChronology,    compare);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
14	[BUG]  [BUGGY]  DurationField  lastUnitField  =  iChronology.getLastDurationType().getField(iChronology);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {      [BUGGY]  DurationField  lastUnitField  =  iChronology.getLastDurationType().getField(iChronology);  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.3333333333333333	222	222	1	replace	DurationField  lastUnitField  =  iChronology.getLastDurationType().getField(iChronology);	  DurationField    lastUnitField    =    iChronology.getLastDurationType().getField(loopUnitField);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  DurationField  lastUnitField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {      [BUGGY]  DurationField  lastUnitField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.3333333333333333	222	222	1	replace	DurationField  lastUnitField  =  types[i  -  1].getRangeDurationType().getField(iChronology);	  DurationField    lastUnitField    =    types[i    -    1].getDurationType().getField(iChronology);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
16	[BUG]  [BUGGY]  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {      [BUGGY]  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.3333333333333333	222	222	1	replace	DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);	  DurationField    lastRangeField    =    types[i    -    1].getDurationType().getField(iChronology);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
17	[BUG]  [BUGGY]  DurationField  lastUnitField  =  types[i  -  1].getFirstDurationType().getField(iChronology);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {      [BUGGY]  DurationField  lastUnitField  =  types[i  -  1].getFirstDurationType().getField(iChronology);  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.3333333333333333	222	222	1	replace	DurationField  lastUnitField  =  types[i  -  1].getFirstDurationType().getField(iChronology);	  DurationField    lastUnitField    =    types[i    -    1].getLastDurationType().getField(iChronology);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
18	[BUG]  [BUGGY]  DurationField  lastRangeField  =  loopType.getLastRangeDurationType().getField(iChronology,  types[i  -  1].getName());  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {      [BUGGY]  DurationField  lastRangeField  =  loopType.getLastRangeDurationType().getField(iChronology,  types[i  -  1].getName());  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.3333333333333333	222	222	1	replace	DurationField  lastRangeField  =  loopType.getLastRangeDurationType().getField(iChronology,  types[i  -  1].getName());	  DurationField    lastRangeField    =    loopType.getLastRangeDurationType().getField(iChronology,    compare);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
