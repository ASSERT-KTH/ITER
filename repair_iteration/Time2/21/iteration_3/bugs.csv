bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newTypes,  0,  i);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  System.arraycopy(iValues,  0,  newTypes,  0,  i);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	System.arraycopy(iValues,  0,  newTypes,  0,  i);	  System.arraycopy(iTypes,    0,    newValues,    0,    i);    	non-compiled	[CE]  	5	None	replace
2	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newTypes,  value,  iFieldIndex);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  iChronology.validate(newPartial,  newTypes,  value,  iFieldIndex);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	iChronology.validate(newPartial,  newTypes,  value,  iFieldIndex);	  iChronology.validate(newPartial,    newTypes,    value);    	non-compiled	[CE]  	6	None	replace
3	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newTypes,  fieldType);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  iChronology.validate(newPartial,  newTypes,  fieldType);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	iChronology.validate(newPartial,  newTypes,  fieldType);	  iChronology.validate(newPartial,    newTypes,    value);    	non-compiled	[CE]  	6	None	replace
4	[BUG]  [BUGGY]  int  value  =  iChronology.getValue(iTypes[i],  newTypes);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int  value  =  iChronology.getValue(iTypes[i],  newTypes);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int  value  =  iChronology.getValue(iTypes[i],  newTypes);	  int    value    =    iChronology.getValue(iTypes[i],    fieldType);    	non-compiled	[CE]  	13	None	replace
5	[BUG]  [BUGGY]  int  value  =  iChronology.getValue(iTypes[0],  fieldType);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int  value  =  iChronology.getValue(iTypes[0],  fieldType);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int  value  =  iChronology.getValue(iTypes[0],  fieldType);	  int    value    =    iChronology.getValue(iTypes[i],    fieldType);    	non-compiled	[CE]  	13	None	replace
6	[BUG]  [BUGGY]  int  value  =  getValue(iChronology,  newTypes);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int  value  =  getValue(iChronology,  newTypes);  [BUGGY]      newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int  value  =  getValue(iChronology,  newTypes);	  int    value    =    getValue(iChronology);    	non-compiled	[CE]  	9	None	replace
7	[BUG]  [BUGGY]  int  value  =  getValue(iChronology,  iFieldIndex);  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int  value  =  getValue(iChronology,  iFieldIndex);  [BUGGY]      newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int  value  =  getValue(iChronology,  iFieldIndex);	  int    value    =    getValue(iChronology);    	non-compiled	[CE]  	9	None	replace
8	[BUG]  [BUGGY]  int  value  =  iChronology.getValue(iTypes[0],  iFieldIndex);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int  value  =  iChronology.getValue(iTypes[0],  iFieldIndex);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int  value  =  iChronology.getValue(iTypes[0],  iFieldIndex);	  int    value    =    iChronology.getValue(iTypes[0]);    	non-compiled	[CE]  	2	None	replace
9	[BUG]  [BUGGY]  int  value  =  iChronology.getValue(iTypes[1]);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int  value  =  iChronology.getValue(iTypes[1]);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int  value  =  iChronology.getValue(iTypes[1]);	  int    value    =    iChronology.getValue(iTypes[0]);    	non-compiled	[CE]  	2	None	replace
10	[BUG]  [BUGGY]  int  value  =  iChronology.getValue(iTypes[0],  newValues);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int  value  =  iChronology.getValue(iTypes[0],  newValues);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int  value  =  iChronology.getValue(iTypes[0],  newValues);	  int    value    =    iChronology.getValue(iTypes[i],    newValues);    	non-compiled	[CE]  	12	None	replace
11	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValuesInYears();  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int[]  newValues  =  iChronology.getValuesInYears();  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int[]  newValues  =  iChronology.getValuesInYears();	  int[]    newValues    =    iChronology.getValuesInYear();    	non-compiled	[CE]  	1	None	replace
12	[BUG]  [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  0,  value  -  1);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  0,  value  -  1);  [BUGGY]      newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	System.arraycopy(iTypes,  0,  newTypes,  0,  value  -  1);	  System.arraycopy(iTypes,    0,    newTypes,    0,    value);    	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  int  value  =  iChronology.getValue(iTypes[i],  newTypes[i],  fieldType);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int  value  =  iChronology.getValue(iTypes[i],  newTypes[i],  fieldType);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int  value  =  iChronology.getValue(iTypes[i],  newTypes[i],  fieldType);	  int    value    =    iChronology.getValue(iTypes[i],    newTypes[i]);    	non-compiled	[CE]  	3	None	replace
14	[BUG]  [BUGGY]  int  value  =  iChronology.getValue(iTypes[0],  newTypes[0]);  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int  value  =  iChronology.getValue(iTypes[0],  newTypes[0]);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int  value  =  iChronology.getValue(iTypes[0],  newTypes[0]);	  int    value    =    iChronology.getValue(iTypes[i],    newTypes[i]);    	non-compiled	[CE]  	3	None	replace
15	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValuesUnit();  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int[]  newValues  =  iChronology.getValuesUnit();  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int[]  newValues  =  iChronology.getValuesUnit();	  int[]    newValues    =    iChronology.getValuesArray();    	non-compiled	[CE]  	10	None	replace
16	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValuesInYears(iFieldIndex);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int[]  newValues  =  iChronology.getValuesInYears(iFieldIndex);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int[]  newValues  =  iChronology.getValuesInYears(iFieldIndex);	  int[]    newValues    =    iChronology.getValuesInYear();    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newTypes,  i);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  iChronology.validate(newPartial,  newTypes,  i);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	iChronology.validate(newPartial,  newTypes,  i);	  iChronology.validate(newPartial,    newTypes,    value);    	non-compiled	[CE]  	6	None	replace
18	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  value);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  iChronology.validate(newPartial,  newValues,  value);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	iChronology.validate(newPartial,  newValues,  value);	  iChronology.validate(newPartial,    newTypes,    value);    	non-compiled	[CE]  	6	None	replace
19	[BUG]  [BUGGY]  int  value  =  iChronology.getValue(iTypes[0],  value);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int  value  =  iChronology.getValue(iTypes[0],  value);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int  value  =  iChronology.getValue(iTypes[0],  value);	  int    value    =    iChronology.getValue(iTypes[0]);    	non-compiled	[CE]  	2	None	replace
20	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValuesArray(iChronology);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int[]  newValues  =  iChronology.getValuesArray(iChronology);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int[]  newValues  =  iChronology.getValuesArray(iChronology);	  int[]    newValues    =    iChronology.getValuesArray();    	non-compiled	[CE]  	10	None	replace
21	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newTypes,  values);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  iChronology.validate(newPartial,  newTypes,  values);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	iChronology.validate(newPartial,  newTypes,  values);	  iChronology.validate(newPartial,    newTypes,    value);    	non-compiled	[CE]  	6	None	replace
22	[BUG]  [BUGGY]  int  value  =  getValue(iChronology,  newValues);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int  value  =  getValue(iChronology,  newValues);  [BUGGY]      newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int  value  =  getValue(iChronology,  newValues);	  int    value    =    getValue(iChronology);    	non-compiled	[CE]  	9	None	replace
23	[BUG]  [BUGGY]  int  value  =  iChronology.getValue(iTypes[i],  newValues,  i);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int  value  =  iChronology.getValue(iTypes[i],  newValues,  i);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int  value  =  iChronology.getValue(iTypes[i],  newValues,  i);	  int    value    =    iChronology.getValue(iTypes[i],    newValues);    	non-compiled	[CE]  	12	None	replace
24	[BUG]  [BUGGY]  int  value  =  iChronology.getValue(iTypes[i],  newValues,  values);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int  value  =  iChronology.getValue(iTypes[i],  newValues,  values);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int  value  =  iChronology.getValue(iTypes[i],  newValues,  values);	  int    value    =    iChronology.getValue(iTypes[i],    newValues);    	non-compiled	[CE]  	12	None	replace
25	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValuesInYear(iChronology);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int[]  newValues  =  iChronology.getValuesInYear(iChronology);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int[]  newValues  =  iChronology.getValuesInYear(iChronology);	  int[]    newValues    =    iChronology.getValuesInYear();    	non-compiled	[CE]  	1	None	replace
26	[BUG]  [BUGGY]  int  value  =  iChronology.getValue(iTypes[i],  fieldType,  newValues);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int  value  =  iChronology.getValue(iTypes[i],  fieldType,  newValues);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int  value  =  iChronology.getValue(iTypes[i],  fieldType,  newValues);	  int    value    =    iChronology.getValue(iTypes[i],    fieldType);    	non-compiled	[CE]  	13	None	replace
27	[BUG]  [BUGGY]  int  value  =  iChronology.getValue(iTypes[i],  fieldType,  dataArea);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int  value  =  iChronology.getValue(iTypes[i],  fieldType,  dataArea);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int  value  =  iChronology.getValue(iTypes[i],  fieldType,  dataArea);	  int    value    =    iChronology.getValue(iTypes[i],    fieldType);    	non-compiled	[CE]  	13	None	replace
28	[BUG]  [BUGGY]  int  value  =  iChronology.getValue(iTypes[i],  newTypes[i  +  1]);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);      [BUGGY]  int  value  =  iChronology.getValue(iTypes[i],  newTypes[i  +  1]);  [BUGGY]      System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	459	459	1	replace	int  value  =  iChronology.getValue(iTypes[i],  newTypes[i  +  1]);	  int    value    =    iChronology.getValue(iTypes[i],    newTypes[i]);    	non-compiled	[CE]  	3	None	replace
