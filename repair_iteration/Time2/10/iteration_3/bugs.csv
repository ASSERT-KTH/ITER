bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(value  <  0  ||  value  >=  iFieldIndex)  {  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  if(value  <  0  ||  value  >=  iFieldIndex)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	if(value  <  0  ||  value  >=  iFieldIndex)  {	  if(value    <    0    ||    value    >    iFieldIndex)    {    	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  if(value  <  0  ||  value  ==  iFieldIndex)  {  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  if(value  <  0  ||  value  ==  iFieldIndex)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	if(value  <  0  ||  value  ==  iFieldIndex)  {	  if(value    <    0    ||    value    >    iFieldIndex)    {    	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  if(value  ==  0  ||  value  ==  0)  {  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  if(value  ==  0  ||  value  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	if(value  ==  0  ||  value  ==  0)  {	  if(value    ==    0    ||    value    <    =    0)    {    	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  if(value  ==  0  ||  value!=  0)  {  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  if(value  ==  0  ||  value!=  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	if(value  ==  0  ||  value!=  0)  {	  if(value    ==    0    ||    value    <    =    0)    {    	non-compiled	[CE]  	2	None	replace
5	[BUG]  [BUGGY]  if(value  <  0)  {  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  if(value  <  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	if(value  <  0)  {	  if(value    <    =    0)    {    	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  iPartial  =  chronology.withUTC(this,  value);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  iPartial  =  chronology.withUTC(this,  value);  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	iPartial  =  chronology.withUTC(this,  value);	  iPartial    =    chronology.withUTC(value);    	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  if(value  ==  0  ||  type.getFieldIndex()  ==  iValues)  {  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  if(value  ==  0  ||  type.getFieldIndex()  ==  iValues)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	if(value  ==  0  ||  type.getFieldIndex()  ==  iValues)  {	  if(value    ==    0    ||    type.getFieldIndex()    ==    value)    {    	non-compiled	[CE]  	3	None	replace
8	[BUG]  [BUGGY]  iPartial  =  type.withZone();  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  iPartial  =  type.withZone();  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	iPartial  =  type.withZone();	  iPartial    =    type.withUTC();    	non-compiled	[CE]  	4	None	replace
9	[BUG]  [BUGGY]  if(value  ==  null  ||  value  <  0)  {  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  if(value  ==  null  ||  value  <  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	if(value  ==  null  ||  value  <  0)  {	  if(value    ==    null    ||    value    <    =    0)    {    	non-compiled	[CE]  	1	None	replace
10	[BUG]  [BUGGY]  if(value  ==  null  ||  value!=  0)  {  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  if(value  ==  null  ||  value!=  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	if(value  ==  null  ||  value!=  0)  {	  if(value    ==    null    ||    value    <    =    0)    {    	non-compiled	[CE]  	1	None	replace
11	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  iFieldIndex  +  1)  {  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  if(value  <  0  ||  value  >  iFieldIndex  +  1)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	if(value  <  0  ||  value  >  iFieldIndex  +  1)  {	  if(value    <    0    ||    value    >    iFieldIndex)    {    	non-compiled	[CE]  	7	None	replace
12	[BUG]  [BUGGY]  if(value  ==  0  ||  type.getFieldIndex()  ==  iChronology)  {  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  if(value  ==  0  ||  type.getFieldIndex()  ==  iChronology)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	if(value  ==  0  ||  type.getFieldIndex()  ==  iChronology)  {	  if(value    ==    0    ||    type.getFieldIndex()    ==    value)    {    	non-compiled	[CE]  	3	None	replace
13	[BUG]  [BUGGY]  if(value  <  =  0  ||  value  <  =  0)  {  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  if(value  <  =  0  ||  value  <  =  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	if(value  <  =  0  ||  value  <  =  0)  {	  if(value    ==    0    ||    value    <    =    0)    {    	non-compiled	[CE]  	2	None	replace
14	[BUG]  [BUGGY]  if(value  <  0  ||  value  <  =  0)  {  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  if(value  <  0  ||  value  <  =  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	if(value  <  0  ||  value  <  =  0)  {	  if(value    ==    0    ||    value    <    =    0)    {    	non-compiled	[CE]  	2	None	replace
15	[BUG]  [BUGGY]  iPartial  =  type.getField(chronology).withUTC();  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  iPartial  =  type.getField(chronology).withUTC();  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	iPartial  =  type.getField(chronology).withUTC();	  iPartial    =    type.withUTC();    	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  iFieldIndex  ||  type.equals(iChronology))  {  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  if(value  <  0  ||  value  >  iFieldIndex  ||  type.equals(iChronology))  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	if(value  <  0  ||  value  >  iFieldIndex  ||  type.equals(iChronology))  {	  if(value    <    0    ||    value    >    iFieldIndex)    {    	non-compiled	[CE]  	7	None	replace
17	[BUG]  [BUGGY]  if(value  <  0  ||  value  >  iFieldIndex  ||  type.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  if(value  <  0  ||  value  >  iFieldIndex  ||  type.getType()  ==  Token.FUNCTION)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	if(value  <  0  ||  value  >  iFieldIndex  ||  type.getType()  ==  Token.FUNCTION)  {	  if(value    <    0    ||    value    >    iFieldIndex)    {    	non-compiled	[CE]  	7	None	replace
18	[BUG]  [BUGGY]  if(value  <  0  ||  type.getFieldIndex()  ==  value)  {  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  if(value  <  0  ||  type.getFieldIndex()  ==  value)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	if(value  <  0  ||  type.getFieldIndex()  ==  value)  {	  if(value    ==    0    ||    type.getFieldIndex()    ==    value)    {    	non-compiled	[CE]  	3	None	replace
19	[BUG]  [BUGGY]  if(value  ==  0  ||  type.getFieldIndex()!=  iValues)  {  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  if(value  ==  0  ||  type.getFieldIndex()!=  iValues)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	if(value  ==  0  ||  type.getFieldIndex()!=  iValues)  {	  if(value    ==    0    ||    type.getFieldIndex()    ==    value)    {    	non-compiled	[CE]  	3	None	replace
