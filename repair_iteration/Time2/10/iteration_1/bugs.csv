bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    iPartial  =  DateTimeUtils.getChronology(chronology).withUTC();  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  [BUGGY]    iPartial  =  DateTimeUtils.getChronology(chronology).withUTC();  [BUGGY]  if  (type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	    iPartial  =  DateTimeUtils.getChronology(chronology).withUTC();		non-compiled	[CE]  	20	None	add
2	[BUG]  [BUGGY]    iPartial  =  DateTimeUtils.getChronology(chronology);  [CE]  [FE]      IllegalArgumentException  [CONTEXT]  public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  [BUGGY]    iPartial  =  DateTimeUtils.getChronology(chronology);  [BUGGY]  if  (type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	    iPartial  =  DateTimeUtils.getChronology(chronology);		non-compiled	[CE]  	20	None	add
3	[BUG]  [BUGGY]    iPartial  =  chronology.withUTC();  [CE]  [FE]        IllegalArgumentException  [CONTEXT]  public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  [BUGGY]    iPartial  =  chronology.withUTC();  [BUGGY]  if  (type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	    iPartial  =  chronology.withUTC();		non-compiled	[CE]  	20	None	add
4	[BUG]  [BUGGY]  if(value  ==  0)  {  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  [BUGGY]  if(value  ==  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	if(value  ==  0)  {	if  (type  ==  null)  {  	non-compiled	[CE]  	19	None	replace
5	[BUG]  [BUGGY]  if(type  ==  null  ||  value  <  =  0)  {  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  [BUGGY]  if(type  ==  null  ||  value  <  =  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	156	156	1	replace	if(type  ==  null  ||  value  <  =  0)  {	if  (type  ==  null)  {  	non-compiled	[CE]  	19	None	replace
