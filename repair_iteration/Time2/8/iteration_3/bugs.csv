bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  iChronology  =  type.withUTC();  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  iChronology  =  type.withUTC();  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	iChronology  =  type.withUTC();	  iChronology    =    chronology.withUTC();    	non-compiled	[CE]  	6	None	replace
2	[BUG]  [BUGGY]  Chronology  chronology  =  DateTimeUtils.getChronology(type);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  Chronology  chronology  =  DateTimeUtils.getChronology(type);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	Chronology  chronology  =  DateTimeUtils.getChronology(type);	  Chronology    chronology    =    DateTimeUtils.getChronology(chronology);    	non-compiled	[CE]  	4	None	replace
3	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getChronology(type,  value,  chronology);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  iChronology  =  DateTimeUtils.getChronology(type,  value,  chronology);  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	iChronology  =  DateTimeUtils.getChronology(type,  value,  chronology);	  iChronology    =    DateTimeUtils.getChronology(type,    value);    	non-compiled	[CE]  	1	None	replace
4	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getChronology(type,  value  +  1);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  iChronology  =  DateTimeUtils.getChronology(type,  value  +  1);  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	iChronology  =  DateTimeUtils.getChronology(type,  value  +  1);	  iChronology    =    DateTimeUtils.getChronology(type,    value);    	non-compiled	[CE]  	1	None	replace
5	[BUG]  [BUGGY]  iPartial  =  type.getField(iChronology);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  iPartial  =  type.getField(iChronology);  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	iPartial  =  type.getField(iChronology);	  iPartial    =    type.withField(iChronology);    	non-compiled	[CE]  	8	None	replace
6	[BUG]  [BUGGY]  iPartial  =  type.withZone();  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  iPartial  =  type.withZone();  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	iPartial  =  type.withZone();	  iPartial    =    type.withUTC();    	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]  java.util.Date  chronology  =  DateTimeUtils.getChronology(chronology);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  java.util.Date  chronology  =  DateTimeUtils.getChronology(chronology);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	java.util.Date  chronology  =  DateTimeUtils.getChronology(chronology);	  Chronology    chronology    =    DateTimeUtils.getChronology(chronology);    	non-compiled	[CE]  	4	None	replace
8	[BUG]  [BUGGY]  iPartial  =  iChronology.withField(type);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  iPartial  =  iChronology.withField(type);  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	iPartial  =  iChronology.withField(type);	  iPartial    =    type.withField(iChronology);    	non-compiled	[CE]  	8	None	replace
9	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getChronology(type,  value  -  1);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  iChronology  =  DateTimeUtils.getChronology(type,  value  -  1);  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	iChronology  =  DateTimeUtils.getChronology(type,  value  -  1);	  iChronology    =    DateTimeUtils.getChronology(type,    value);    	non-compiled	[CE]  	1	None	replace
