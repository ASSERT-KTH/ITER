bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  iTypes  =  new  DateTimeFieldType[]  {  type,  value  }  ;  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]  iTypes  =  new  DateTimeFieldType[]  {  type,  value  }  ;  [BUGGY]  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	iTypes  =  new  DateTimeFieldType[]  {  type,  value  }  ;	iTypes  =  new  DateTimeFieldType[]  {type};  	non-compiled	[CE]  	21	None	replace
2	[BUG]  [BUGGY]    [CE]  [FE]      IllegalArgumentException  [CONTEXT]  public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]    [BUGGY]  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	  	iTypes  =  new  DateTimeFieldType[]  {type};  	non-compiled	[CE]  	21	None	replace
3	[BUG]  [BUGGY]    iPartial  =  type.getPartial();  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]    iPartial  =  type.getPartial();  [BUGGY]  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	    iPartial  =  type.getPartial();		non-compiled	[CE]  	22	None	add
4	[BUG]  [BUGGY]    iChronology  =  chronology.withUTC();  [CE]  [FE]      IllegalArgumentException  [CONTEXT]  public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]    iChronology  =  chronology.withUTC();  [BUGGY]  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	    iChronology  =  chronology.withUTC();		non-compiled	[CE]  	22	None	add
5	[BUG]  [BUGGY]    iPartial  =  getPartial();  [CE]  [FE]        IllegalArgumentException  [CONTEXT]  public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]    iPartial  =  getPartial();  [BUGGY]  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	    iPartial  =  getPartial();		non-compiled	[CE]  	22	None	add
6	[BUG]  [BUGGY]    iPartial  =  DateTimeUtils.getChronology(chronology).withUTC();  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]    iPartial  =  DateTimeUtils.getChronology(chronology).withUTC();  [BUGGY]  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	    iPartial  =  DateTimeUtils.getChronology(chronology).withUTC();		non-compiled	[CE]  	22	None	add
7	[BUG]  [BUGGY]    iPartial  =  DateTimeUtils.getChronology(chronology);  [CE]  [FE]      IllegalArgumentException  [CONTEXT]  public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]    iPartial  =  DateTimeUtils.getChronology(chronology);  [BUGGY]  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	    iPartial  =  DateTimeUtils.getChronology(chronology);		non-compiled	[CE]  	22	None	add
8	[BUG]  [BUGGY]    iPartial  =  chronology.withUTC();  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]    iPartial  =  chronology.withUTC();  [BUGGY]  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	    iPartial  =  chronology.withUTC();		non-compiled	[CE]  	22	None	add
9	[BUG]  [BUGGY]    DateTimeFieldType  type  =  type.getField(chronology);  [CE]  [FE]      IllegalArgumentException  [CONTEXT]  public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]    DateTimeFieldType  type  =  type.getField(chronology);  [BUGGY]  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	    DateTimeFieldType  type  =  type.getField(chronology);		non-compiled	[CE]  	22	None	add
