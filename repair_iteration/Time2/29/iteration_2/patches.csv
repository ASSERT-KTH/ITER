bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.getValues();  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  int[]  newValues  =  iTypes.getValues();  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	int[]  newValues  =  iTypes.getValues();	  int[]    newValues    =    fieldType.getValues();    	non-compiled	[CE]  	2	None	replace
2	[BUG]  [BUGGY]  nested  =  new  ArrayList  <  DateTimeFieldType>();  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  nested  =  new  ArrayList  <  DateTimeFieldType>();  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	nested  =  new  ArrayList  <  DateTimeFieldType>();	  nested    =    new    LinkedList    <    DateTimeFieldType>();    	non-compiled	[CE]  	16	None	replace
3	[BUG]  [BUGGY]  int[]  newValues  =  getValues(fieldType);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  int[]  newValues  =  getValues(fieldType);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	int[]  newValues  =  getValues(fieldType);	  int[]    newValues    =    getValues(value);    	non-compiled	[CE]  	3	None	replace
4	[BUG]  [BUGGY]  Partial  <?>  fieldType  =  fieldType.getField(iChronology).with(iValues,  value);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  Partial  <?>  fieldType  =  fieldType.getField(iChronology).with(iValues,  value);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	Partial  <?>  fieldType  =  fieldType.getField(iChronology).with(iValues,  value);	  Partial    <?>    fieldType    =    fieldType.getField(iChronology).with(newValues,    value);    	non-compiled	[CE]  	14	None	replace
5	[BUG]  [BUGGY]  Partial  <?>  fieldType  =  iChronology.getField(iChronology).with(newValues,  value);  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  Partial  <?>  fieldType  =  iChronology.getField(iChronology).with(newValues,  value);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	Partial  <?>  fieldType  =  iChronology.getField(iChronology).with(newValues,  value);	  Partial    <?>    fieldType    =    fieldType.getField(iChronology).with(newValues,    value);    	non-compiled	[CE]  	14	None	replace
6	[BUG]  [BUGGY]  Partial  params  =  getParameter(fieldType);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  Partial  params  =  getParameter(fieldType);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	Partial  params  =  getParameter(fieldType);	  Partial    params    =    getParameters(value);    	non-compiled	[CE]  	13	None	replace
7	[BUG]  [BUGGY]  Partial  params  =  getParameters(fieldType);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  Partial  params  =  getParameters(fieldType);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	Partial  params  =  getParameters(fieldType);	  Partial    params    =    getParameters(value);    	non-compiled	[CE]  	13	None	replace
8	[BUG]  [BUGGY]  iPartial.setValue(value);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  iPartial.setValue(value);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	iPartial.setValue(value);	  aughtInvalidPartialException(   "   ");    	non-compiled	[CE]  	22	None	replace
9	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(fieldType,  index);  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  int[]  newValues  =  iTypes.get(fieldType,  index);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	int[]  newValues  =  iTypes.get(fieldType,  index);	  int[]    newValues    =    iTypes.get(fieldType,    value);    	non-compiled	[CE]  	9	None	replace
10	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(fieldType,  values);  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  int[]  newValues  =  iTypes.get(fieldType,  values);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	int[]  newValues  =  iTypes.get(fieldType,  values);	  int[]    newValues    =    iTypes.get(fieldType,    value);    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  Partial  <?>  fieldType  =  fieldType.getField(iChronology).withUTF8();  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  Partial  <?>  fieldType  =  fieldType.getField(iChronology).withUTF8();  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	Partial  <?>  fieldType  =  fieldType.getField(iChronology).withUTF8();	  Partial    <?>    fieldType    =    fieldType.getField(iChronology).withUTC();    	non-compiled	[CE]  	10	None	replace
12	[BUG]  [BUGGY]  Partial  parser  =  getPartial().withField(fieldType,  value);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  Partial  parser  =  getPartial().withField(fieldType,  value);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	Partial  parser  =  getPartial().withField(fieldType,  value);	  Partial    parser    =    getPartial().withValue(value);    	non-compiled	[CE]  	17	None	replace
13	[BUG]  [BUGGY]  Partial  parser  =  getPartial().withField(fieldType);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  Partial  parser  =  getPartial().withField(fieldType);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	Partial  parser  =  getPartial().withField(fieldType);	  Partial    parser    =    getPartial().withValue(value);    	non-compiled	[CE]  	17	None	replace
14	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(new  int[1]);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  int[]  newValues  =  iTypes.toArray(new  int[1]);  [BUGGY]      throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	int[]  newValues  =  iTypes.toArray(new  int[1]);	  int[]    newValues    =    iTypes.toArray(new    int[0]);    	non-compiled	[CE]  	12	None	replace
15	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray();  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  int[]  newValues  =  iTypes.toArray();  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	int[]  newValues  =  iTypes.toArray();	  int[]    newValues    =    iTypes.values();    	non-compiled	[CE]  	20	None	replace
16	[BUG]  [BUGGY]  if(value  ==  0)  {  tries.add(new  TypedField(fieldType,  value));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  if(value  ==  0)  {  tries.add(new  TypedField(fieldType,  value));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	if(value  ==  0)  {  tries.add(new  TypedField(fieldType,  value));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tries.add(new    TypedField(fieldType,    value));    	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  if(value  <  0)  {  tries.add(new  TypedField(fieldType,  value));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  if(value  <  0)  {  tries.add(new  TypedField(fieldType,  value));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	if(value  <  0)  {  tries.add(new  TypedField(fieldType,  value));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tries.add(new    TypedField(fieldType,    value));    	non-compiled	[CE]  	6	None	replace
18	[BUG]  [BUGGY]  if(iTypes  ==  null)  {  aughtExceptionHandler.throwAsIgnoredException( " ");  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  if(iTypes  ==  null)  {  aughtExceptionHandler.throwAsIgnoredException( " ");  }  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	if(iTypes  ==  null)  {  aughtExceptionHandler.throwAsIgnoredException( " ");  }	  aughtExceptionHandler.throwAsIgnoredException(   "   ");    	non-compiled	[CE]  	5	None	replace
19	[BUG]  [BUGGY]  While(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  While(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	While(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  While(value    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
20	[BUG]  [BUGGY]  Partial  params  =  getParameter(iChronology);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  Partial  params  =  getParameter(iChronology);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	Partial  params  =  getParameter(iChronology);	  Partial    params    =    getParameter(value);    	non-compiled	[CE]  	7	None	replace
21	[BUG]  [BUGGY]  Partial  <?>  fieldType  =  fieldType.getField(iChronology).withLocalMillis(value,  newValues);  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  Partial  <?>  fieldType  =  fieldType.getField(iChronology).withLocalMillis(value,  newValues);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	Partial  <?>  fieldType  =  fieldType.getField(iChronology).withLocalMillis(value,  newValues);	  Partial    <?>    fieldType    =    fieldType.getField(iChronology).withLocalMillis(value);    	non-compiled	[CE]  	11	None	replace
22	[BUG]  [BUGGY]  Partial  parser  =  getPartialParser(value);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  Partial  parser  =  getPartialParser(value);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	Partial  parser  =  getPartialParser(value);	  Partial    parser    =    getPartialParser();    	non-compiled	[CE]  	1	None	replace
23	[BUG]  [BUGGY]  nested.add(new  TypedField(fieldType,  value),  iValues);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  nested.add(new  TypedField(fieldType,  value),  iValues);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	nested.add(new  TypedField(fieldType,  value),  iValues);	  nested.add(new    TypedField(fieldType,    value));    	non-compiled	[CE]  	15	None	replace
24	[BUG]  [BUGGY]  Partial  parser  =  getPartialParser(fieldType);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  Partial  parser  =  getPartialParser(fieldType);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	Partial  parser  =  getPartialParser(fieldType);	  Partial    parser    =    getPartialParser();    	non-compiled	[CE]  	1	None	replace
25	[BUG]  [BUGGY]  Partial  params  =  getParameter(fieldType,  value);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  Partial  params  =  getParameter(fieldType,  value);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	Partial  params  =  getParameter(fieldType,  value);	  Partial    params    =    getParameters(value);    	non-compiled	[CE]  	13	None	replace
26	[BUG]  [BUGGY]  Partial  <?>  fieldType  =  fieldType.getDurationType().getField(iChronology).withLocalMillis(value);  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  Partial  <?>  fieldType  =  fieldType.getDurationType().getField(iChronology).withLocalMillis(value);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	Partial  <?>  fieldType  =  fieldType.getDurationType().getField(iChronology).withLocalMillis(value);	  Partial    <?>    fieldType    =    fieldType.getField(iChronology).withLocalMillis(value);    	non-compiled	[CE]  	11	None	replace
27	[BUG]  [BUGGY]  if(value  ==  0)  {  aughtExceptionHandler.throwAsIgnoredException( " ");  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  if(value  ==  0)  {  aughtExceptionHandler.throwAsIgnoredException( " ");  }  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	if(value  ==  0)  {  aughtExceptionHandler.throwAsIgnoredException( " ");  }	  aughtExceptionHandler.throwAsIgnoredException(   "   ");    	non-compiled	[CE]  	5	None	replace
28	[BUG]  [BUGGY]  Partial  <?>  fieldType  =  fieldType.getField(iChronology).with(newValues,  value  +  1);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  Partial  <?>  fieldType  =  fieldType.getField(iChronology).with(newValues,  value  +  1);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	Partial  <?>  fieldType  =  fieldType.getField(iChronology).with(newValues,  value  +  1);	  Partial    <?>    fieldType    =    fieldType.getField(iChronology).with(newValues,    value);    	non-compiled	[CE]  	14	None	replace
29	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(fieldType,  value  -  1);  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  int[]  newValues  =  iTypes.get(fieldType,  value  -  1);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	int[]  newValues  =  iTypes.get(fieldType,  value  -  1);	  int[]    newValues    =    iTypes.get(fieldType,    value);    	non-compiled	[CE]  	9	None	replace
30	[BUG]  [BUGGY]  Partial  <?>  fieldType  =  fieldType.getField(iChronology).setValue(value);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  Partial  <?>  fieldType  =  fieldType.getField(iChronology).setValue(value);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	Partial  <?>  fieldType  =  fieldType.getField(iChronology).setValue(value);	  Partial    <?>    fieldType    =    fieldType.getField(iChronology).withUTC();    	non-compiled	[CE]  	10	None	replace
31	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(new  int[value]);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  int[]  newValues  =  iTypes.toArray(new  int[value]);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	int[]  newValues  =  iTypes.toArray(new  int[value]);	  [Delete]    	non-compiled	[CE]  	21	None	replace
32	[BUG]  [BUGGY]  tries.add(new  TypedField(fieldType,  value),  iValues);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  tries.add(new  TypedField(fieldType,  value),  iValues);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	tries.add(new  TypedField(fieldType,  value),  iValues);	  tries.add(new    TypedField(fieldType,    value));    	non-compiled	[CE]  	6	None	replace
33	[BUG]  [BUGGY]  int[]  newValues  =  getValues(fieldType,  value);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  int[]  newValues  =  getValues(fieldType,  value);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	int[]  newValues  =  getValues(fieldType,  value);	  int[]    newValues    =    getValues(value);    	non-compiled	[CE]  	3	None	replace
34	[BUG]  [BUGGY]  safely(fieldType,  value)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  safely(fieldType,  value)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	safely(fieldType,  value)  {  throw  new  IllegalArgumentException( " ");  }	  safeMultiply(fieldType,    value)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	18	None	replace
35	[BUG]  [BUGGY]  Partial  params  =  getParameterType(value);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  Partial  params  =  getParameterType(value);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	Partial  params  =  getParameterType(value);	  Partial    params    =    getParameter(value);    	non-compiled	[CE]  	7	None	replace
36	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(fieldType,  value  +  1);  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  int[]  newValues  =  iTypes.get(fieldType,  value  +  1);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	int[]  newValues  =  iTypes.get(fieldType,  value  +  1);	  int[]    newValues    =    iTypes.get(fieldType,    value);    	non-compiled	[CE]  	9	None	replace
37	[BUG]  [BUGGY]  if(value  <  0  ||  fieldType  ==  null)  {  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  if(value  <  0  ||  fieldType  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	if(value  <  0  ||  fieldType  ==  null)  {	  if(value    ==    0    ||    fieldType    ==    null)    {    	non-compiled	[CE]  	23	None	replace
38	[BUG]  [BUGGY]  int[]  values  =  getValues();  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  int[]  values  =  getValues();  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	int[]  values  =  getValues();	  [Delete]    	non-compiled	[CE]  	21	None	replace
39	[BUG]  [BUGGY]  if(value  ==  0)  {  tries.add(new  TypedField(fieldType,  value));  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  if(value  ==  0)  {  tries.add(new  TypedField(fieldType,  value));  }  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	if(value  ==  0)  {  tries.add(new  TypedField(fieldType,  value));  }	  tries.add(new    TypedField(fieldType,    value));    	non-compiled	[CE]  	6	None	replace
40	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  aughtInvalidPartialException(   "   ");    	non-compiled	[CE]  	22	None	replace
41	[BUG]  [BUGGY]  int[]  newValues  =  fieldType.values();  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  int[]  newValues  =  fieldType.values();  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	int[]  newValues  =  fieldType.values();	  int[]    newValues    =    iTypes.values();    	non-compiled	[CE]  	20	None	replace
42	[BUG]  [BUGGY]  Partial  <?>  fieldType  =  fieldType.getField(chronology).withLocalMillis(value);  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {      [BUGGY]  Partial  <?>  fieldType  =  fieldType.getField(chronology).withLocalMillis(value);  [BUGGY]      if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	Partial  <?>  fieldType  =  fieldType.getField(chronology).withLocalMillis(value);	  Partial    <?>    fieldType    =    fieldType.getField(iChronology).withLocalMillis(value);    	non-compiled	[CE]  	11	None	replace
