compilation error,224,add,[CE] unreachable statement, ,throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  + "  consulted  with   "  +  loopType.getName());  throw new IllegalArgumentException("Types array must not contain duplicate:" + types[i - 1].getName() +" consulted with " + loopType.getName());
increase failing tests,223,replace, [FE] NullPointerException testWith_baseAndArgHaveNoRange, if(loopType.getRangeDurationType()  ==  null  ||  loopType.getRangeDurationType().getField(iChronology)  ==  null)  {  ,if(loopType.getRangeDurationType()!= null || loopType.getRangeDurationType().getField(iChronology) == null) {
increase failing tests,223,replace, [FE] NullPointerException testWith_baseAndArgHaveNoRange, if(loopType.getRangeDurationType()  ==  null  ||  loopType.getRangeDurationType().getField(iChronology)  ==  null)  {  ,if(loopType.getRangeDurationType()!= null || loopType.getRangeDurationType().getField(iChronology)!= null) {
compilation error,224,add,[CE] cannot find symbol, ,        if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  durationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);
compilation error,155,add,[CE] variable iChronology might already have been assigned, ,iChronology  =(chronology!=  null)?  chronology  :  DateTimeUtils.getChronology(chronology);  chronology = DateTimeUtils.getChronology(chronology);
increase failing tests,154,add, [FE] IllegalArgumentException testWith_argHasNoRange, ,        chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  if(chronology == null) { chronology = DateTimeUtils.getChronology(chronology).withUTC(); } else { throw new IllegalArgumentException("The field type must not be null"); }
increase failing tests,154,add, [FE] IllegalArgumentException testWith_argHasNoRange, ,        chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  if(chronology == null) { chronology = DateTimeUtils.getChronology(chronology).withUTC(); } else { throw new IllegalArgumentException(""); }
increase failing tests,154,add, [FE] IllegalArgumentException testWith_argHasNoRange, ,        chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  if(chronology == null) { chronology = DateTimeUtils.getChronology(chronology); } else { throw new IllegalArgumentException("The field type must not be null"); }
compilation error,155,replace,[CE] variable iChronology might not have been initialized,     chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  ,if(chronology == null) { chronology = DateTimeUtils.getChronology(chronology); chronology = DateTimeUtils.getChronology(chronology).withUTC(); }
compilation error,154,add,[CE] variable chronology is already defined in constructor Partial(DateTimeFieldType,int,Chronology), ,if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( " ");  }  Chronology chronology = DateTimeUtils.getChronology(chronology).withUTC();
compilation error,155,replace,[CE] variable iChronology might not have been initialized,     chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  ,if(chronology == null) { chronology = DateTimeUtils.getChronology(chronology); chronology = DateTimeUtils.getChronology(chronology).withUTC(); } else { throw new IllegalArgumentException(""); }
compilation error,155,replace,[CE] bad operand types for binary operator '<', iChronology  =(chronology!=  null)?  chronology  :  DateTimeUtils.getChronology(chronology);  ,iChronology =(chronology < null)? chronology : DateTimeUtils.getChronology(chronology);
increase failing tests,223,replace, [FE] IllegalArgumentException testToString5, if(loopType.getDurationType()  ==  null  ||  loopType.getRangeDurationType()  ==  null)  {  ,if(loopType.getDurationType() == null || loopType.getRangeDurationType()!= null) {
increase failing tests,223,replace, [FE] IllegalArgumentException testWith_baseAndArgHaveNoRange, if(loopType.getDurationType()  ==  null  ||  loopType.getRangeDurationType()  ==  null)  {  ,if(loopType.getDurationType()!= null || loopType.getRangeDurationType() == null) {
compilation error,155,add,[CE] cannot find symbol iPartial, ,        chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  iPartial = DateTimeUtils.getChronology(chronology); chronology = DateTimeUtils.getChronology(chronology);
compilation error,224,add,[CE] cannot find symbol, ,        if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(iChronology.isSupported() == false) { throw new IllegalArgumentException(""); }
increase failing tests,154,replace, [FE] IllegalArgumentException testWith_argHasNoRange, if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null. ");  }  ,if(type == null) { chronology = DateTimeUtils.getChronology(chronology); } else { throw new IllegalArgumentException("The field type must not be null."); }
compilation error,155,replace,[CE] cannot find symbol, iChronology  =  DateTimeUtils.getChronology(chronology).withUTC();  ,iChronology = DateTimeUtils.getChronology(chronology).withZoneUTC();
compilation error,155,replace,[CE] bad operand types for binary operator '<', iChronology  =(chronology!=  null)?  chronology  :  DateTimeUtils.getChronology(chronology).withUTC();  ,iChronology =(chronology < null)? chronology : DateTimeUtils.getChronology(chronology).withUTC();
compilation error,224,add,[CE] unreachable statement, ,throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  + ",  consulted   "  +  loopType.getName());  throw new IllegalArgumentException("Types array must not contain duplicate:" + types[i - 1].getName() + ", consulted " + loopType.getName());
increase failing tests,154,replace, [FE] IllegalArgumentException testWith_argHasNoRange, if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,if(type == null) { chronology = DateTimeUtils.getChronology(chronology).withUTC(); } else { throw new IllegalArgumentException(""); }
increase failing tests,154,replace, [FE] IllegalArgumentException testWith_baseAndArgHaveNoRange, if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  ,chronology = DateTimeUtils.getChronology(chronology); if(value == 0) { throw new IllegalArgumentException(""); }
increase failing tests,154,replace, [FE] IllegalArgumentException testWith_argHasNoRange, if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  ,chronology = DateTimeUtils.getChronology(chronology); if(value!= 0) { throw new IllegalArgumentException(""); }
compilation error,154,replace,[CE] unclosed string literal,     chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  ,if(chronology == null) { chronology = DateTimeUtils.getChronology(chronology); chronology = DateTimeUtils.getChronology(chronology).withUTC(); } else { throw new IllegalArgumentException("The field type must not
compilation error,155,replace,[CE] variable iChronology might not have been initialized,     chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  ,if(chronology == null) { chronology = DateTimeUtils.getChronology(chronology); chronology = DateTimeUtils.getChronology(chronology); }
compilation error,154,replace,[CE] unclosed string literal,     chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  ,if(chronology == null) { chronology = DateTimeUtils.getChronology(chronology); chronology = DateTimeUtils.getChronology(chronology).withUTC(); } else { throw new IllegalArgumentException("The field type must not be nu
compilation error,224,add,[CE] unreachable statement, ,throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  + ",  consulted   "  +  loopType.getName());  throw new IllegalArgumentException("Types array must not contain duplicate:" + types[i - 1].getName() +", inspected " + loopType.getName());
compilation error,224,add,[CE] no suitable method found for sort(DurationFieldType), ,if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  Arrays.sort(types[i - 1].getRangeDurationType());
compilation error,155,replace,[CE] cannot find symbol dateTimeUtils, iChronology  =  DateTimeUtils.getChronology(chronology).withUTC();  ,iChronology = dateTimeUtils.getChronology(chronology).withUTC();
compilation error,154,add,[CE] variable iChronology might already have been assigned, ,if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( " ");  }  iChronology = DateTimeUtils.getChronology(chronology).withUTC();
compilation error,224,add,[CE] variable chronology is already defined in constructor Partial(DateTimeFieldType[],int[],Chronology), ,        if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  Chronology chronology = DateTimeUtils.getChronology(chronology).withUTC();
compilation error,223,replace,[CE] bad operand types for binary operator '<', if(loopType.getRangeDurationType()  ==  null  ||  loopType.getRangeDurationType().getField(iChronology)  ==  null)  {  ,if(loopType.getRangeDurationType() == null || loopType.getRangeDurationType().getField(iChronology) < null) {
compilation error,155,replace,[CE] cannot find symbol iPartial,     chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  ,iPartial = chronology.withUTC();
compilation error,224,add,[CE] no suitable method found for sort(DurationFieldType), ,if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  Arrays.sort(types[i - 1].getRangeDurationType());
increase failing tests,223,replace, [FE] IllegalArgumentException testWith_baseAndArgHaveNoRange, if(loopType.getDurationType()  ==  null  ||  loopType.getRangeDurationType()  ==  null)  {  ,if(loopType.getDurationType() == null || lastUnitField.isSupported() == false) {
compilation error,155,add,[CE] cannot find symbol iPartial, ,        chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  chronology.validate(this, iPartial);
compilation error,224,add,[CE] no suitable method found for sort(DurationFieldType), ,if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  Arrays.sort(loopType.getRangeDurationType());
compilation error,154,add,[CE] variable iChronology might already have been assigned, ,        chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  iChronology = DateTimeUtils.getChronology(chronology).withUTC();
compilation error,154,replace,[CE] variable chronology is already defined in constructor Partial(DateTimeFieldType,int,Chronology), if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,Chronology chronology = DateTimeUtils.getChronology(chronology).withUTC();
compilation error,155,add,[CE] variable iChronology might already have been assigned, ,iChronology  =  DateTimeUtils.getChronology(chronology).withUTC();  chronology = DateTimeUtils.getChronology(chronology).withUTC();
compilation error,154,replace,[CE] variable iChronology might already have been assigned, if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  ,iChronology = DateTimeUtils.getChronology(chronology).withUTC();
compilation error,155,replace,[CE] unclosed string literal,     chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  ,if(chronology == null) { chronology = DateTimeUtils.getChronology(chronology); chronology = DateTimeUtils.getChronology(chronology).withUTC(); } else { throw new IllegalArgumentException("The field type must not be nu
compilation error,155,add,[CE] variable iChronology might already have been assigned, ,iChronology  =(chronology!=  null)?  chronology  :  DateTimeUtils.getChronology(chronology);  chronology = DateTimeUtils.getChronology(chronology).withUTC();
compilation error,154,replace,[CE] cannot find symbol iPartial, if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,chronology = DateTimeUtils.getChronology(chronology).withUTC(); iPartial = chronology.withUTC();
compilation error,154,add,[CE] cannot find symbol, ,        chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  chronology = checkPartial(type, value);
compilation error,224,add,[CE] incomparable types: DurationField and boolean, ,if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(types[i - 1].getRangeDurationType().getField(iChronology) == false) { throw new IllegalArgumentException(""); }
compilation error,224,add,[CE] unreachable statement, ,if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  throw new IllegalArgumentException("");
compilation error,224,add,[CE] variable iChronology might already have been assigned, ,        if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology = chronology.withUTC();
compilation error,155,add,[CE] method validate in class Chronology cannot be applied to given types;, ,iChronology  =  DateTimeUtils.getChronology(chronology).withUTC();  chronology.validate(this, value);
compilation error,224,add,[CE] unreachable statement, ,if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  throw new IllegalArgumentException("");
compilation error,224,replace,[CE] incomparable types: DurationField and boolean,     if(loopType.getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  ,if(types[i - 1].getRangeDurationType().getField(iChronology) == false) { throw new IllegalArgumentException(""); }
compilation error,154,replace,[CE] unclosed string literal,     chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  ,if(chronology == null) { chronology = DateTimeUtils.getChronology(chronology); chronology = DateTimeUtils.getChronology(chronology).withUTC(); } else { throw new IllegalArgumentException("The field must not be nu
compilation error,155,replace,[CE] variable iChronology might not have been initialized,     chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  ,if(iChronology == null) { chronology = DateTimeUtils.getChronology(chronology); chronology = DateTimeUtils.getChronology(chronology).withUTC(); }
compilation error,155,replace,[CE] variable iChronology might not have been initialized,     chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  ,if(chronology == null) { chronology = DateTimeUtils.getChronology(chronology); chronology = DateTimeUtils.getChronology(chronology); } else { throw new IllegalArgumentException(""); }
compilation error,155,replace,[CE] method validate in class Chronology cannot be applied to given types;,     chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  ,chronology.validate(this, value);
compilation error,155,add,[CE] method validate in class Chronology cannot be applied to given types;, ,        chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  chronology.validate(this, value);
compilation error,155,add,[CE] cannot find symbol iPartial, ,iChronology  =(chronology!=  null)?  chronology  :  DateTimeUtils.getChronology(chronology);  chronology = DateTimeUtils.getChronology(chronology); iPartial = chronology.withUTC();
compilation error,154,add,[CE] cannot find symbol iPartial, ,if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( " ");  }  chronology = DateTimeUtils.getChronology(chronology).withUTC(); iPartial = chronology.withUTC();
increase failing tests,154,replace, [FE] IllegalArgumentException testWith_argHasNoRange,     chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  ,if(value < 0) { chronology = DateTimeUtils.getChronology(chronology); chronology = DateTimeUtils.getChronology(chronology); } else { throw new IllegalArgumentException(""); }
