164	[BUG]    [BUGGY]            if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    [FE]    NullPointerException    testWith_baseAndArgHaveNoRange    [CONTEXT]        DateTimeFieldType    loopType    =    types[i];    DurationField    loopUnitField    =    loopType.getDurationType().getField(iChronology);    if    (i    >    0)    {    int    compare    =    lastUnitField.compareTo(loopUnitField);    if    (compare    <    0    ||    (compare    !=    0    &&    loopUnitField.isSupported()    ==    false))    {    throw    new    IllegalArgumentException(       "Types    array    must    be    in    order    largest-smallest:           "    +    types[i    -    1].getName()    +           "    <           "    +    loopType.getName());    }    else    if    (compare    ==    0)    {    if    (types[i    -    1].getRangeDurationType()    ==    null)    {    if    (loopType.getRangeDurationType()    ==    null)    {        [BUGGY]            if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    [BUGGY]        throw    new    IllegalArgumentException(       "Types    array    must    not    contain    duplicate:           "    +                        types[i    -    1].getName()    +           "    and           "    +    loopType.getName());    types[i    -    1].getName()    +           "    and           "    +    loopType.getName());    }    }    else    {    if    (loopType.getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(       "Types    array    must    be    in    order    largest-smallest:           "    +    types[i    -    1].getName()    +           "    <           "    +    loopType.getName());    }    DurationField    lastRangeField    =    types[i    -    1].getRangeDurationType().getField(iChronology);    DurationField    loopRangeField    =    loopType.getRangeDurationType().getField(iChronology);    if    (lastRangeField.compareTo(loopRangeField)    <    0)    {    [CLASS]    Partial    Property    [METHOD]    <init>    [RETURN_TYPE]    Chronology)    DateTimeFieldType[]    types    int[]    values    Chronology    chronology    [VARIABLES]    boolean    DateTimeFieldType[]    iTypes    types    Partial    iPartial    DateTimeFieldType    loopType    int[]    iValues    values    Chronology    chrono    chronology    iChronology    DurationField    lastRangeField    lastUnitField    loopRangeField    loopUnitField    long    serialVersionUID    DateTimeFormatter[]    iFormatter    int    compare    i    iFieldIndex    value    	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i  -  1].getRangeDurationType()!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	plausible		142	0
404	[BUG]    [BUGGY]            if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(types[i    -    1].getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    [FE]    NullPointerException    testWith_baseAndArgHaveNoRange    [CONTEXT]        DateTimeFieldType    loopType    =    types[i];    DurationField    loopUnitField    =    loopType.getDurationType().getField(iChronology);    if    (i    >    0)    {    int    compare    =    lastUnitField.compareTo(loopUnitField);    if    (compare    <    0    ||    (compare    !=    0    &&    loopUnitField.isSupported()    ==    false))    {    throw    new    IllegalArgumentException(       "Types    array    must    be    in    order    largest-smallest:           "    +    types[i    -    1].getName()    +           "    <           "    +    loopType.getName());    }    else    if    (compare    ==    0)    {    if    (types[i    -    1].getRangeDurationType()    ==    null)    {    if    (loopType.getRangeDurationType()    ==    null)    {        [BUGGY]            if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(types[i    -    1].getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    [BUGGY]        throw    new    IllegalArgumentException(       "Types    array    must    not    contain    duplicate:           "    +                        types[i    -    1].getName()    +           "    and           "    +    loopType.getName());    types[i    -    1].getName()    +           "    and           "    +    loopType.getName());    }    }    else    {    if    (loopType.getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(       "Types    array    must    be    in    order    largest-smallest:           "    +    types[i    -    1].getName()    +           "    <           "    +    loopType.getName());    }    DurationField    lastRangeField    =    types[i    -    1].getRangeDurationType().getField(iChronology);    DurationField    loopRangeField    =    loopType.getRangeDurationType().getField(iChronology);    if    (lastRangeField.compareTo(loopRangeField)    <    0)    {    [CLASS]    Partial    Property    [METHOD]    <init>    [RETURN_TYPE]    Chronology)    DateTimeFieldType[]    types    int[]    values    Chronology    chronology    [VARIABLES]    boolean    DateTimeFieldType[]    iTypes    types    Partial    iPartial    DateTimeFieldType    loopType    int[]    iValues    values    Chronology    chrono    chronology    iChronology    DurationField    lastRangeField    lastUnitField    loopRangeField    loopUnitField    long    serialVersionUID    DateTimeFormatter[]    iFormatter    int    compare    i    iFieldIndex    value    	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(iChronology.equals(loopType.getRangeDurationType()))  {  throw  new  IllegalArgumentException( " ");  }	          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(types[i    -    1].getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	plausible		143	0
