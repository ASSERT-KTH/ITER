bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  iPartial  =  type.withUTC();  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);    [BUGGY]  iPartial  =  type.withUTC();  [BUGGY]      [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	162	162	1	replace	iPartial  =  type.withUTC();	  iPartial    =    chronology.withUTC();    	non-compiled	[CE]  	2	None	replace
2	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(value);  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);    [BUGGY]  iChronology  =  chronology.withUTC(value);  [BUGGY]      [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	162	162	1	replace	iChronology  =  chronology.withUTC(value);	  iChronology    =    chronology.withUTC();    	non-compiled	[CE]  	1	None	replace
3	[BUG]  [BUGGY]  iPartial  =  DateTimeUtils.getChronology(chronology).withUTC()  +  1;  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);    [BUGGY]  iPartial  =  DateTimeUtils.getChronology(chronology).withUTC()  +  1;  [BUGGY]      [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	162	162	1	replace	iPartial  =  DateTimeUtils.getChronology(chronology).withUTC()  +  1;	  iPartial    =    DateTimeUtils.getChronology(chronology).withUTC();    	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  iPartial  =  chronology.withUTC(value);  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);    [BUGGY]  iPartial  =  chronology.withUTC(value);  [BUGGY]      [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	162	162	1	replace	iPartial  =  chronology.withUTC(value);	  iPartial    =    chronology.withUTC();    	non-compiled	[CE]  	2	None	replace
5	[BUG]  [BUGGY]  iPartial  =  type.withField(iChronology);  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);    [BUGGY]  iPartial  =  type.withField(iChronology);  [BUGGY]    }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	162	162	1	replace	iPartial  =  type.withField(iChronology);	      iPartial    =    type.getPartial();    	non-compiled	[CE]  	4	None	replace
