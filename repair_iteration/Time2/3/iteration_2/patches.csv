bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  aughtException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  + "  and "  +  loopType.getName());  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {      [BUGGY]  aughtException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  + "  and "  +  loopType.getName());  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.4472135954999579	223	223	1	replace	aughtException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  + "  and "  +  loopType.getName());	  if(i    >    0)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +       "    and   "    +    loopType.getName());    }    	non-compiled	[CE]  not  a  statement	12	None	replace
2	[BUG]  [BUGGY]  DurationFieldType  loopType  =  types[i  -  1].getDurationType();  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {      [BUGGY]  DurationFieldType  loopType  =  types[i  -  1].getDurationType();  [BUGGY]      if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.4472135954999579	223	223	1	replace	DurationFieldType  loopType  =  types[i  -  1].getDurationType();	  DurationFieldType    loopType    =    types[i    -    1].getRangeDurationType();    	non-compiled	[CE]  not  a  statement	15	None	replace
3	[BUG]  [BUGGY]  Throwable  throwable  =  types[i  -  1].getRangeDurationType();  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {      [BUGGY]  Throwable  throwable  =  types[i  -  1].getRangeDurationType();  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.4472135954999579	223	223	1	replace	Throwable  throwable  =  types[i  -  1].getRangeDurationType();	  if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +       "    and   "    +    loopType.getName());    }    	non-compiled	[CE]  not  a  statement	17	None	replace
4	[BUG]  [BUGGY]  Throwable  cause  =  types[i  -  1].getRangeDurationType();  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {      [BUGGY]  Throwable  cause  =  types[i  -  1].getRangeDurationType();  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.4472135954999579	223	223	1	replace	Throwable  cause  =  types[i  -  1].getRangeDurationType();	  if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +       "    and   "    +    loopType.getName());    }    	non-compiled	[CE]  not  a  statement	17	None	replace
5	[BUG]  [BUGGY]  DurationField  loopType  =  types[i  -  1].getDurationType();  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {      [BUGGY]  DurationField  loopType  =  types[i  -  1].getDurationType();  [BUGGY]      if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.4472135954999579	223	223	1	replace	DurationField  loopType  =  types[i  -  1].getDurationType();	  DurationField    loopType    =    types[i    -    1].getRangeDurationType();    	non-compiled	[CE]  not  a  statement	2	None	replace
6	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =  iTypes[i  -  1].getName();  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {      [BUGGY]  DateTimeFieldType  loopType  =  iTypes[i  -  1].getName();  [BUGGY]      if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.4472135954999579	223	223	1	replace	DateTimeFieldType  loopType  =  iTypes[i  -  1].getName();	  DateTimeFieldType    loopType    =    types[i    -    1].getName();    	non-compiled	[CE]  not  a  statement	16	None	replace
7	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getRangeDurationType(types[i  -  1].getName()  +   "  and "  +  loopType.getName());  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {      [BUGGY]  iChronology  =  DateTimeUtils.getRangeDurationType(types[i  -  1].getName()  +   "  and "  +  loopType.getName());  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.4472135954999579	223	223	1	replace	iChronology  =  DateTimeUtils.getRangeDurationType(types[i  -  1].getName()  +   "  and "  +  loopType.getName());	  iChronology    =    DateTimeUtils.getRangeDurationType(types[i    -    1].getName());    	non-compiled	[CE]  not  a  statement	7	None	replace
8	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =  types[i  -  1].getDurationType();  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {      [BUGGY]  DateTimeFieldType  loopType  =  types[i  -  1].getDurationType();  [BUGGY]      if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.4472135954999579	223	223	1	replace	DateTimeFieldType  loopType  =  types[i  -  1].getDurationType();	  DateTimeFieldType    loopType    =    types[i    -    1].getRangeDurationType();    	non-compiled	[CE]  not  a  statement	10	None	replace
9	[BUG]  [BUGGY]  DurationFieldType  loopType  =(DateTimeFieldType)types[i  -  1].getDurationType();  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {      [BUGGY]  DurationFieldType  loopType  =(DateTimeFieldType)types[i  -  1].getDurationType();  [BUGGY]      if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.4472135954999579	223	223	1	replace	DurationFieldType  loopType  =(DateTimeFieldType)types[i  -  1].getDurationType();	  DurationFieldType    loopType    =(DateTimeFieldType)types[i    -    1].getRangeDurationType();    	non-compiled	[CE]  not  a  statement	14	None	replace
10	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =  iChronology.getField(types[i  -  1].getRangeDurationType());  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {      [BUGGY]  DateTimeFieldType  loopType  =  iChronology.getField(types[i  -  1].getRangeDurationType());  [BUGGY]      if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.4472135954999579	223	223	1	replace	DateTimeFieldType  loopType  =  iChronology.getField(types[i  -  1].getRangeDurationType());	  DateTimeFieldType    loopType    =    iChronology.getField(types[i    -    1].getName());    	non-compiled	[CE]  not  a  statement	4	None	replace
11	[BUG]  [BUGGY]  DurationField  loopType  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {      [BUGGY]  DurationField  loopType  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [BUGGY]      if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.4472135954999579	223	223	1	replace	DurationField  loopType  =  types[i  -  1].getRangeDurationType().getField(iChronology);	  DurationField    loopType    =    types[i    -    1].getRangeDurationType();    	non-compiled	[CE]  not  a  statement	2	None	replace
12	[BUG]  [BUGGY]  DurationFieldType  loopType  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {      [BUGGY]  DurationFieldType  loopType  =  types[i  -  1].getRangeDurationType().getField(iChronology);  [BUGGY]      if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.4472135954999579	223	223	1	replace	DurationFieldType  loopType  =  types[i  -  1].getRangeDurationType().getField(iChronology);	  DurationFieldType    loopType    =    types[i    -    1].getRangeDurationType();    	non-compiled	[CE]  not  a  statement	15	None	replace
13	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getRangeDurationType(types[i  -  1].getName()  +   "  and ");  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {      [BUGGY]  iChronology  =  DateTimeUtils.getRangeDurationType(types[i  -  1].getName()  +   "  and ");  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.4472135954999579	223	223	1	replace	iChronology  =  DateTimeUtils.getRangeDurationType(types[i  -  1].getName()  +   "  and ");	  iChronology    =    DateTimeUtils.getRangeDurationType(types[i    -    1].getName());    	non-compiled	[CE]  not  a  statement	7	None	replace
14	[BUG]  [BUGGY]  allowMissingClass( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   "  and "  +  loopType.getName());  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {      [BUGGY]  allowMissingClass( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   "  and "  +  loopType.getName());  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.4472135954999579	223	223	1	replace	allowMissingClass( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   "  and "  +  loopType.getName());	  if(i    >    0)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +       "    and   "    +    loopType.getName());    }    	non-compiled	[CE]  not  a  statement	12	None	replace
15	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.4472135954999579	223	223	1	replace	throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());	  if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +       "    and   "    +    loopType.getName());    }    	non-compiled	[CE]  not  a  statement	17	None	replace
16	[BUG]  [BUGGY]  [Delete]  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {      [BUGGY]  [Delete]  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.4472135954999579	223	223	1	replace	[Delete]	  if(i    >    0)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +       "    and   "    +    loopType.getName());    }    	non-compiled	[CE]  not  a  statement	12	None	replace
17	[BUG]  [BUGGY]  aught(iChronology)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   "  and "  +  loopType.getName());  }  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {      [BUGGY]  aught(iChronology)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   "  and "  +  loopType.getName());  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.4472135954999579	223	223	1	replace	aught(iChronology)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   "  and "  +  loopType.getName());  }	  if(i    >    0)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +       "    and   "    +    loopType.getName());    }    	non-compiled	[CE]  not  a  statement	12	None	replace
