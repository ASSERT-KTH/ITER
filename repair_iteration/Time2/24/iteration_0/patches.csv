bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int[]  newValues  =  iChronology.getValues();  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [BUGGY]    int[]  newValues  =  iChronology.getValues();  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	462	462	1	replace	    int[]  newValues  =  iChronology.getValues();		non-compiled	[CE]  	48	None	add
2	[BUG]  [BUGGY]    System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CE]  [FE]      IllegalArgumentException  [CONTEXT]  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [BUGGY]    System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	462	462	1	replace	    System.arraycopy(iTypes,  0,  newTypes,  0,  i);		non-compiled	[CE]  	48	None	add
3	[BUG]  [BUGGY]    iChronology.validate(newPartial,  newTypes);  [CE]  [FE]        IllegalArgumentException  [CONTEXT]  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [BUGGY]    iChronology.validate(newPartial,  newTypes);  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	462	462	1	replace	    iChronology.validate(newPartial,  newTypes);		non-compiled	[CE]  	48	None	add
4	[BUG]  [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  0,  newTypes.length  -  i  -  1);  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  0,  newTypes.length  -  i  -  1);  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	462	462	1	replace	System.arraycopy(iTypes,  0,  newTypes,  0,  newTypes.length  -  i  -  1);	System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  	non-compiled	[CE]  	47	None	replace
5	[BUG]  [BUGGY]    System.arraycopy(iTypes,  i,  newTypes,  0,  newTypes.length  -  i  -  1);  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [BUGGY]    System.arraycopy(iTypes,  i,  newTypes,  0,  newTypes.length  -  i  -  1);  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	462	462	1	replace	    System.arraycopy(iTypes,  i,  newTypes,  0,  newTypes.length  -  i  -  1);		non-compiled	[CE]  	48	None	add
6	[BUG]  [BUGGY]    iChronology.validate(newPartial,  newValues);  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [BUGGY]    iChronology.validate(newPartial,  newValues);  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(newTypes,  newValues,  iChronology);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.25	462	462	1	replace	    iChronology.validate(newPartial,  newValues);		non-compiled	[CE]  	48	None	add
