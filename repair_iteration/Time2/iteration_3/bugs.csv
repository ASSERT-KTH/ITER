bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action21	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  chronology  =  DateTimeUtils.getChronology(chronology);  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	                if(loopType.getRangeDurationType().getField(iChronology)        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        chronology    =    DateTimeUtils.getChronology(chronology).withUTC();    chronology  =  DateTimeUtils.getChronology(chronology);	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	211	1	add
22	[BUG]  [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  chronology  =  DateTimeUtils.getChronology(chronology);  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  chronology  =  DateTimeUtils.getChronology(chronology);  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	                if(loopType.getRangeDurationType().getField(iChronology)        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        chronology    =    DateTimeUtils.getChronology(chronology).withUTC();    chronology  =  DateTimeUtils.getChronology(chronology);	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	211	1	add
33	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }  else  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	add	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }  else  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }	          chronology    =    DateTimeUtils.getChronology(chronology);    chronology    =    DateTimeUtils.getChronology(chronology);    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	322	1	replace
34	[BUG]  [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }  else  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }  else  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }  else  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }	          chronology    =    DateTimeUtils.getChronology(chronology);    chronology    =    DateTimeUtils.getChronology(chronology);    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	322	1	replace
51	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]          chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	add	                chronology        =        DateTimeUtils.getChronology(chronology);        chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	321	1	add
52	[BUG]  [BUGGY]          chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]          chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	                chronology        =        DateTimeUtils.getChronology(chronology);        chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	321	1	add
52	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]          chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	add	                chronology        =        DateTimeUtils.getChronology(chronology);        chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology).withUTC();	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	321	1	add
53	[BUG]  [BUGGY]          chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]          chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	                chronology        =        DateTimeUtils.getChronology(chronology);        chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology).withUTC();	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	321	1	add
101	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  chronology  =  DateTimeUtils.getChronology(chronology);  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	add	if(chronology    ==    null)    {    chronology    =    DateTimeUtils.getChronology(chronology);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    chronology  =  DateTimeUtils.getChronology(chronology);	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	362	1	add
102	[BUG]  [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  chronology  =  DateTimeUtils.getChronology(chronology);  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  chronology  =  DateTimeUtils.getChronology(chronology);  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	if(chronology    ==    null)    {    chronology    =    DateTimeUtils.getChronology(chronology);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    chronology  =  DateTimeUtils.getChronology(chronology);	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	362	1	add
102	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	add	if(chronology    ==    null)    {    chronology    =    DateTimeUtils.getChronology(chronology);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    chronology  =  DateTimeUtils.getChronology(chronology).withUTC();	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	362	1	add
103	[BUG]  [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	if(chronology    ==    null)    {    chronology    =    DateTimeUtils.getChronology(chronology);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    chronology  =  DateTimeUtils.getChronology(chronology).withUTC();	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	362	1	add
171	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	344	1	add
172	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	344	1	add
172	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	344	1	add
173	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	344	1	add
173	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType()!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType()!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	344	1	add
174	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType()!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType()!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType()!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	344	1	add
175	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(loopType.getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(loopType.getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	344	1	add
176	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(loopType.getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(loopType.getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(loopType.getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	344	1	add
201	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]          chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	add	                chronology        =        DateTimeUtils.getChronology(chronology);        chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	201	1	add
202	[BUG]  [BUGGY]          chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]          chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	                chronology        =        DateTimeUtils.getChronology(chronology);        chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	201	1	add
202	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]          chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	add	                chronology        =        DateTimeUtils.getChronology(chronology);        chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology).withUTC();	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	201	1	add
203	[BUG]  [BUGGY]          chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]          chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	                chronology        =        DateTimeUtils.getChronology(chronology);        chronology    =    DateTimeUtils.getChronology(chronology);    chronology  =  DateTimeUtils.getChronology(chronology).withUTC();	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	201	1	add
212	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	add	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  }	          chronology    =    DateTimeUtils.getChronology(chronology);    chronology    =    DateTimeUtils.getChronology(chronology);    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	322	1	replace
213	[BUG]  [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  }  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  }	          chronology    =    DateTimeUtils.getChronology(chronology);    chronology    =    DateTimeUtils.getChronology(chronology);    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	322	1	replace
213	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	add	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          chronology    =    DateTimeUtils.getChronology(chronology);    chronology    =    DateTimeUtils.getChronology(chronology);    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	322	1	replace
214	[BUG]  [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          chronology    =    DateTimeUtils.getChronology(chronology);    chronology    =    DateTimeUtils.getChronology(chronology);    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	322	1	replace
214	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	add	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }	          chronology    =    DateTimeUtils.getChronology(chronology);    chronology    =    DateTimeUtils.getChronology(chronology);    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	322	1	replace
215	[BUG]  [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }	          chronology    =    DateTimeUtils.getChronology(chronology);    chronology    =    DateTimeUtils.getChronology(chronology);    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	322	1	replace
221	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	                if(loopType.getRangeDurationType().getField(iChronology)        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	141	1	add
222	[BUG]  [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	                if(loopType.getRangeDurationType().getField(iChronology)        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	141	1	add
222	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	                if(loopType.getRangeDurationType().getField(iChronology)        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	141	1	add
223	[BUG]  [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	                if(loopType.getRangeDurationType().getField(iChronology)        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	141	1	add
223	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(iChronology.equals(loopType.getRangeDurationType()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	                if(loopType.getRangeDurationType().getField(iChronology)        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(iChronology.equals(loopType.getRangeDurationType()))  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	141	1	add
224	[BUG]  [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(iChronology.equals(loopType.getRangeDurationType()))  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(iChronology.equals(loopType.getRangeDurationType()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	                if(loopType.getRangeDurationType().getField(iChronology)        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(iChronology.equals(loopType.getRangeDurationType()))  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	141	1	add
224	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType()!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	                if(loopType.getRangeDurationType().getField(iChronology)        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType()!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	141	1	add
225	[BUG]  [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType()!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType()!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	                if(loopType.getRangeDurationType().getField(iChronology)        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType()!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	141	1	add
331	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	341	1	add
332	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	341	1	add
332	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(loopType.getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(loopType.getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	341	1	add
333	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(loopType.getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(loopType.getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(loopType.getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	341	1	add
334	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(iChronology.equals(loopType.getRangeDurationType()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(iChronology.equals(loopType.getRangeDurationType()))  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	341	1	add
335	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(iChronology.equals(loopType.getRangeDurationType()))  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(iChronology.equals(loopType.getRangeDurationType()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(iChronology.equals(loopType.getRangeDurationType()))  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	341	1	add
335	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	341	1	add
336	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	341	1	add
343	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(loopType.getDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(loopType.getDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(loopType.getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	145	1	replace
344	[BUG]  [BUGGY]  if(loopType.getDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(loopType.getDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(loopType.getDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(loopType.getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	145	1	replace
381	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	add	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }	          chronology    =    DateTimeUtils.getChronology(chronology);    chronology    =    DateTimeUtils.getChronology(chronology).withUTC();    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	323	1	replace
382	[BUG]  [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }	          chronology    =    DateTimeUtils.getChronology(chronology);    chronology    =    DateTimeUtils.getChronology(chronology).withUTC();    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	323	1	replace
382	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	add	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          chronology    =    DateTimeUtils.getChronology(chronology);    chronology    =    DateTimeUtils.getChronology(chronology).withUTC();    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	323	1	replace
383	[BUG]  [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          chronology    =    DateTimeUtils.getChronology(chronology);    chronology    =    DateTimeUtils.getChronology(chronology).withUTC();    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	323	1	replace
394	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());  [BUGGY]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());	  throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:       "    +    types[i    -    1].getName()    +   ",    consulted       "    +    loopType.getName());    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	815	1	replace
395	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());  [BUGGY]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());	  throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:       "    +    types[i    -    1].getName()    +   ",    consulted       "    +    loopType.getName());    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	815	1	replace
421	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	632	1	add
422	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	632	1	add
422	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	632	1	add
423	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	632	1	add
423	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(loopType.getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(loopType.getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	632	1	add
424	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(loopType.getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(loopType.getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(loopType.getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	632	1	add
424	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(iChronology.equals(loopType.getRangeDurationType()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(iChronology.equals(loopType.getRangeDurationType()))  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	632	1	add
425	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(iChronology.equals(loopType.getRangeDurationType()))  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(iChronology.equals(loopType.getRangeDurationType()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(iChronology.equals(loopType.getRangeDurationType()))  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	632	1	add
144	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  + "  consulted  with   "  +  loopType.getRangeDurationType());  [BUGGY]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  + "  consulted  with   "  +  loopType.getRangeDurationType());	  throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +   "    consulted    with       "    +    loopType.getName());    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	244	1	replace
145	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  + "  consulted  with   "  +  loopType.getRangeDurationType());  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  + "  consulted  with   "  +  loopType.getRangeDurationType());  [BUGGY]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  + "  consulted  with   "  +  loopType.getRangeDurationType());	  throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +   "    consulted    with       "    +    loopType.getName());    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	244	1	replace
161	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(compare  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	632	1	add
162	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(compare  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	632	1	add
162	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(compare  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	632	1	add
163	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(compare  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	632	1	add
301	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	                if(loopType.getRangeDurationType().getField(iChronology)        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        chronology    =    DateTimeUtils.getChronology(chronology).withUTC();    chronology  =  DateTimeUtils.getChronology(chronology).withUTC();	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	211	1	add
302	[BUG]  [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	                if(loopType.getRangeDurationType().getField(iChronology)        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        chronology    =    DateTimeUtils.getChronology(chronology).withUTC();    chronology  =  DateTimeUtils.getChronology(chronology).withUTC();	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	211	1	add
384	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	add	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }	  if(chronology    ==    null)    {    chronology    =    DateTimeUtils.getChronology(chronology);    }    else    {    throw    new    IllegalArgumentException(   "The    field    type    must    not    be    null   ");    }    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	364	1	replace
385	[BUG]  [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }	  if(chronology    ==    null)    {    chronology    =    DateTimeUtils.getChronology(chronology);    }    else    {    throw    new    IllegalArgumentException(   "The    field    type    must    not    be    null   ");    }    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	364	1	replace
403	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  chronology  =  DateTimeUtils.getChronology(chronology);  iChronology  =  chronology.withUTC();  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	add	chronology  =  DateTimeUtils.getChronology(chronology);  iChronology  =  chronology.withUTC();	          chronology    =    DateTimeUtils.getChronology(chronology);    chronology    =    DateTimeUtils.getChronology(chronology);    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	202	1	replace
404	[BUG]  [BUGGY]  chronology  =  DateTimeUtils.getChronology(chronology);  iChronology  =  chronology.withUTC();  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  chronology  =  DateTimeUtils.getChronology(chronology);  iChronology  =  chronology.withUTC();  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	chronology  =  DateTimeUtils.getChronology(chronology);  iChronology  =  chronology.withUTC();	          chronology    =    DateTimeUtils.getChronology(chronology);    chronology    =    DateTimeUtils.getChronology(chronology);    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	202	1	replace
404	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  chronology  =  DateTimeUtils.getChronology(chronology);  iChronology  =  chronology;  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	add	chronology  =  DateTimeUtils.getChronology(chronology);  iChronology  =  chronology;	          chronology    =    DateTimeUtils.getChronology(chronology);    chronology    =    DateTimeUtils.getChronology(chronology);    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	202	1	replace
405	[BUG]  [BUGGY]  chronology  =  DateTimeUtils.getChronology(chronology);  iChronology  =  chronology;  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  chronology  =  DateTimeUtils.getChronology(chronology);  iChronology  =  chronology;  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	chronology  =  DateTimeUtils.getChronology(chronology);  iChronology  =  chronology;	          chronology    =    DateTimeUtils.getChronology(chronology);    chronology    =    DateTimeUtils.getChronology(chronology);    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	202	1	replace
481	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(compare  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	341	1	add
482	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(compare  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	341	1	add
482	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(compare  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	341	1	add
483	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(compare  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	341	1	add
483	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  DurationField  lastRangeField  =  loopType.getDurationType().getField(iChronology);  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    DurationField  lastRangeField  =  loopType.getDurationType().getField(iChronology);	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	341	1	add
484	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  DurationField  lastRangeField  =  loopType.getDurationType().getField(iChronology);  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  DurationField  lastRangeField  =  loopType.getDurationType().getField(iChronology);  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    DurationField  lastRangeField  =  loopType.getDurationType().getField(iChronology);	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	341	1	add
681	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(compare  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	344	1	add
682	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(compare  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	344	1	add
682	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(compare  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	344	1	add
683	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(compare  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	344	1	add
683	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(compare!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	344	1	add
684	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(compare!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(compare!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	344	1	add
763	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	add	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          chronology    =    DateTimeUtils.getChronology(chronology);    chronology    =    DateTimeUtils.getChronology(chronology);    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	322	1	replace
764	[BUG]  [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          chronology    =    DateTimeUtils.getChronology(chronology);    chronology    =    DateTimeUtils.getChronology(chronology);    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	322	1	replace
392	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	341	1	add
393	[BUG]  [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	341	1	add
484	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology  ==  null?  chronology  :  DateTimeUtils.getChronology(chronology).withUTC();  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	add	iChronology  =  chronology  ==  null?  chronology  :  DateTimeUtils.getChronology(chronology).withUTC();	  iChronology    =(chronology!=    null)?    chronology    :    DateTimeUtils.getChronology(chronology).withUTC();    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	3	1	replace
485	[BUG]  [BUGGY]  iChronology  =  chronology  ==  null?  chronology  :  DateTimeUtils.getChronology(chronology).withUTC();  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology  ==  null?  chronology  :  DateTimeUtils.getChronology(chronology).withUTC();  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	iChronology  =  chronology  ==  null?  chronology  :  DateTimeUtils.getChronology(chronology).withUTC();	  iChronology    =(chronology!=    null)?    chronology    :    DateTimeUtils.getChronology(chronology).withUTC();    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	3	1	replace
541	[BUG]  [BUGGY]  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	                if(loopType.getRangeDurationType().getField(iChronology)        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	141	1	add
542	[BUG]  [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]          if(loopType.getRangeDurationType().getField(iChronology)    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +            types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	                if(loopType.getRangeDurationType().getField(iChronology)        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(types[i    -    1].getRangeDurationType().getField(iChronology)!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(types[i  -  1].getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  testWith_baseAndArgHaveNoRange	141	1	add
1203	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  must  not  be  null ");  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	add	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  must  not  be  null ");  }	  if(chronology    ==    null)    {    chronology    =    DateTimeUtils.getChronology(chronology);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	363	1	replace
1204	[BUG]  [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  must  not  be  null ");  }  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  must  not  be  null ");  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  must  not  be  null ");  }	  if(chronology    ==    null)    {    chronology    =    DateTimeUtils.getChronology(chronology);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	363	1	replace
1204	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  must  not  be  null. ");  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	add	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  must  not  be  null. ");  }	  if(chronology    ==    null)    {    chronology    =    DateTimeUtils.getChronology(chronology);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	363	1	replace
1205	[BUG]  [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  must  not  be  null. ");  }  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();      [BUGGY]  if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  must  not  be  null. ");  }  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	154	154	1	replace	if(chronology  ==  null)  {  chronology  =  DateTimeUtils.getChronology(chronology);  }  else  {  throw  new  IllegalArgumentException( "The  field  must  not  be  null. ");  }	  if(chronology    ==    null)    {    chronology    =    DateTimeUtils.getChronology(chronology);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	363	1	replace
1233	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  + ",  and  consulted   "  +  loopType.getName());  [BUGGY]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	add	throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  + ",  and  consulted   "  +  loopType.getName());	  throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:       "    +    types[i    -    1].getName()    +   ",    consulted       "    +    loopType.getName());    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	815	1	replace
1234	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  + ",  and  consulted   "  +  loopType.getName());  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange  [CONTEXT]      DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  + ",  and  consulted   "  +  loopType.getName());  [BUGGY]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  + ",  and  consulted   "  +  loopType.getName());	  throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:       "    +    types[i    -    1].getName()    +   ",    consulted       "    +    loopType.getName());    	compilable	  [FE]  IllegalArgumentException  testWith_baseAndArgHaveNoRange	815	1	replace
