compilation error,155,replace,[CE] cannot find symbol, iChronology  =(chronology  ==  null)?  chronology  :  DateTimeUtils.getChronology(chronology).withUTC();  ,iChronology =(chronology == null)? chronology : DateTimeUtils.getChronology(chronology).withZoneUTC();
compilation error,155,replace,[CE] cannot find symbol dateTimeUtils, iChronology  =  DateTimeUtils.getChronology(chronology);  ,iChronology = dateTimeUtils.getChronology(chronology);
compilation error,155,replace,[CE] method getChronology in class DateTimeUtils cannot be applied to given types;,   chronology  =  DateTimeUtils.getChronology(chronology);  ,chronology = DateTimeUtils.getChronology(chronology, ISODateTimeFormat.dateTimeParser());
compilation error,155,add,[CE] cannot find symbol iPartial, ,iChronology  =(chronology  ==  null)?  chronology  :  DateTimeUtils.getChronology(chronology).withUTC();  iPartial =(partial == null)? chronology : DateTimeUtils.getChronology(chronology).withUTC();
compilation error,155,replace,[CE] cannot find symbol dateTimeUtils, iChronology  =(chronology  ==  null)?  chronology  :  DateTimeUtils.getChronology(chronology);  ,iChronology =(chronology == null)? dateTimeUtils.getChronology(chronology): DateTimeUtils.getChronology(chronology);
compilation error,155,replace,[CE] variable iChronology might not have been initialized,   chronology  =  DateTimeUtils.getChronology(chronology);  ,if(chronology == null) { chronology = DateTimeUtils.getChronology(chronology).withUTC(); } else { throw new IllegalArgumentException("The field type must not be null"); }
compilation error,153,replace,[CE] cannot reference iChronology before supertype constructor has been called,   this(type,  value,  chronology.withUTC());  ,this(type, value, chronology.withUTC(), iChronology);
compilation error,155,add,[CE] variable iChronology might already have been assigned, ,iChronology  =  chronology.withUTC();  chronology = DateTimeUtils.getChronology(chronology);
compilation error,156,replace,[CE] <identifier> expected,   type  =  chronology.withUTC();  ,type = type.withUTC();
increase failing tests,223,replace, [FE] IllegalArgumentException testToString5, if(loopType.getRangeDurationType()  ==  null  ||(compare!=  0  &&  loopUnitField.isSupported()  ==  false))  {  ,if(loopType.getRangeDurationType()!= null ||(compare!= 0 && loopUnitField.isSupported() == false)) {
compilation error,223,replace,[CE] cannot find symbol, if(loopType.getRangeDurationType()  ==  null  ||(compare!=  0  &&  loopUnitField.isSupported()  ==  false))  {  ,if(loopUnitField.getRangeDurationType() == null ||(compare!= 0 && loopUnitField.isSupported() == false)) {
increase failing tests,223,replace, [FE] IllegalArgumentException testToString5, if(loopType.getRangeDurationType()  ==  null  ||(compare  ==  0  &&  loopUnitField.isSupported()  ==  false))  {  ,if(loopType.getRangeDurationType()!= null ||(compare == 0 && loopUnitField.isSupported() == false)) {
compilation error,155,replace,[CE] cannot find symbol, iChronology  =  chronology.withUTC();  ,iChronology = chronology.withoutChronology();
compilation error,155,add,[CE] method getChronology in class DateTimeUtils cannot be applied to given types;, ,    chronology  =  DateTimeUtils.getChronology(chronology);  chronology = DateTimeUtils.getChronology(chronology, ISODateTimeFormat.dateOptionalTimeParser());
compilation error,224,replace,[CE] cannot find symbol,   if(loopType.getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  ,chronology = DateTimeUtils.getChronology(chronology).withZoneUTC();
increase failing tests,223,replace, [FE] IllegalArgumentException testWith_baseAndArgHaveNoRange, if(loopType.getRangeDurationType()  ==  null  ||  loopType.getRangeDurationType()  ==  null)  {  ,if(loopType.getRangeDurationType() == null || loopType.getRangeDurationType()!= null) {
increase failing tests,223,replace, [FE] IllegalArgumentException testWith_baseAndArgHaveNoRange, if(loopType.getRangeDurationType()  ==  null  ||  loopType.getRangeDurationType()  ==  null)  {  ,if(loopType.getRangeDurationType() == null || loopType.getRangeDurationType().getField(iChronology)!= null) {
compilation error,153,add,[CE] call to super must be first statement in constructor, ,    this(type,  value,  chronology.withUTC());  chronology = DateTimeUtils.getChronology(chronology).withUTC();
increase failing tests,156,replace, [FE] IllegalArgumentException testWith_argHasNoRange, if(type  ==  null  ||  value  <  0)  {  ,if(value == 0 || type == null || value > 0) {
increase failing tests,156,replace, [FE] IllegalArgumentException testWith_argHasNoRange, if(type  ==  null  ||  value  <  0)  {  ,if(type == null || value!= 0) {
increase failing tests,156,replace, [FE] IllegalArgumentException testWith_argHasNoRange, if(type  ==  null  ||  value  <  0)  {  ,if(value == 0 || type == null || value >= 0) {
compilation error,155,replace,[CE] cannot find symbol,   chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  ,chronology = DateTimeUtils.getChronology(chronology).withZoneUTC();
compilation error,223,replace,[CE] <identifier> expected, if(loopType.getRangeDurationType()  ==  null  ||(compare  ==  0  &&  loopUnitField.isSupported()  ==  false))  {  ,if(types[i - 1].getRangeDurationType() == null) { throw new IllegalArgumentException(""); }
increase failing tests,154,add, [FE] IllegalArgumentException testWith_argHasNoRange, ,    chronology  =  DateTimeUtils.getChronology(chronology);  if(chronology == null) { chronology = DateTimeUtils.getChronology(chronology).withUTC(); } else { throw new IllegalArgumentException(""); }
increase failing tests,154,add, [FE] IllegalArgumentException testWith_argHasNoRange, ,    chronology  =  DateTimeUtils.getChronology(chronology);  if(chronology == null) { chronology = DateTimeUtils.getChronology(chronology).withUTC(); } else { throw new IllegalArgumentException("The field type must not be null"); }
compilation error,224,add,[CE] unreachable statement, ,throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  + "  consulted   "  +  loopType.getName());  throw new IllegalArgumentException("Types array must not contain duplicate:" + types[i - 1].getName() +" consulted " + loopType.getName());
compilation error,223,replace,[CE] cannot find symbol, if(loopType.getDurationType()  ==  null)  {  ,if(loopType.getDoubleDurationType() == null) {
increase failing tests,156,replace, [FE] IllegalArgumentException testWith_baseAndArgHaveNoRange, if(type  ==  null  ||  value  <  0)  {  ,if(type == null || value <= 0) {
increase failing tests,223,replace, [FE] IllegalArgumentException testWith_baseAndArgHaveNoRange, if(loopType.getDurationType()  ==  null)  {  ,if(loopType.getDurationType()!= null) {
compilation error,223,replace,[CE] <identifier> expected, if(loopType.getRangeDurationType()  ==  null  ||(compare  ==  0  &&  loopUnitField.isSupported()  ==  false))  {  ,if(compare < 0) { throw new IllegalArgumentException(""); }
compilation error,155,replace,[CE] cannot find symbol, iChronology  =(chronology  ==  null)?  chronology  :  DateTimeUtils.getChronology(chronology).withUTC();  ,iChronology =(chronology == null)? chronology : DateTimeUtils.getChronology(chronology).withInstance();
compilation error,155,replace,[CE] cannot find symbol, iChronology  =  DateTimeUtils.getChronology(chronology);  ,iChronology = chronology.getChronology(DateTimeUtils.getChronology(chronology));
compilation error,224,replace,[CE] cannot find symbol,   if(loopType.getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  ,chronology = DateTimeUtils.getChronology(chronology).withStandardTree();
compilation error,155,replace,[CE] cannot find symbol, iChronology  =  chronology.withUTC();  ,iChronology = chronology.withInstance();
increase failing tests,223,replace, [FE] IllegalArgumentException testWith_baseAndArgHaveNoRange, if(loopType.getRangeDurationType()  ==  null  ||  loopType.getRangeDurationType()  ==  null)  {  ,if(loopType.getRangeDurationType()!= null || loopType.getRangeDurationType() == null) {
increase failing tests,223,replace, [FE] IllegalArgumentException testWith_baseAndArgHaveNoRange, if(loopType.getRangeDurationType()  ==  null  ||  loopType.getRangeDurationType()  ==  null)  {  ,if(loopType.getRangeDurationType() == null || lastUnitField.isSupported() == false) {
compilation error,155,replace,[CE] method getChronology in class DateTimeUtils cannot be applied to given types;,   chronology  =  DateTimeUtils.getChronology(chronology);  ,chronology = DateTimeUtils.getChronology(chronology, type);
compilation error,155,add,[CE] cannot find symbol iPartial, ,    chronology  =  DateTimeUtils.getChronology(chronology);  chronology.validate(this, iPartial);
compilation error,155,add,[CE] variable iChronology might already have been assigned, ,iChronology  =  chronology.withUTC();  chronology = DateTimeUtils.getChronology(chronology).withUTC();
compilation error,224,add,[CE] cannot find symbol iPartial, ,    if(loopType.getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  chronology.validate(this, iPartial);
compilation error,224,replace,[CE] <identifier> expected,   if(loopType.getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  ,}
compilation error,154,add,[CE] variable iChronology might already have been assigned, ,    chronology  =  DateTimeUtils.getChronology(chronology);  iChronology = DateTimeUtils.getChronology(chronology).withUTC();
compilation error,155,replace,[CE] variable iChronology might not have been initialized,   chronology  =  DateTimeUtils.getChronology(chronology);  ,if(chronology == null) { chronology = DateTimeUtils.getChronology(chronology).withUTC(); } else { chronology = DateTimeUtils.getChronology(chronology).withUTC(); }
compilation error,153,add,[CE] cannot find symbol, ,    this(type,  value,  chronology.withUTC());  setChronology(chronology).withUTC();
compilation error,156,replace,[CE] <identifier> expected,   type  =  chronology.withUTC();  ,type = chronology.withInstance();
compilation error,153,replace,[CE] cannot find symbol,   this(type,  value,  chronology.withUTC());  ,this(type, value, chronology.getChronology());
compilation error,154,replace,[CE] variable iChronology might already have been assigned,   chronology  =  DateTimeUtils.getChronology(chronology);  ,if(chronology == null) { chronology = DateTimeUtils.getChronology(chronology); } else { chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology.withUTC(); }
compilation error,155,replace,[CE] ';' expected, iChronology  =(chronology  ==  null)?  chronology  :  DateTimeUtils.getChronology(chronology);  ,iChronology =(chronology == null)? chronology : DateTimeUtils.getChronology(chronology), value);
compilation error,155,add,[CE] cannot find symbol iPartial, ,iChronology  =  DateTimeUtils.getChronology(chronology);  chronology.validate(this, iPartial);
compilation error,155,replace,[CE] cannot find symbol,   chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  ,chronology = DateTimeUtils.getChronology(chronology).withStandardTree();
compilation error,155,replace,[CE] cannot find symbol iPartial, iChronology  =(chronology  ==  null)?  chronology  :  DateTimeUtils.getChronology(chronology).withUTC();  ,chronology = DateTimeUtils.getChronology(chronology).withUTC(); iPartial = partial;
compilation error,224,add,[CE] unreachable statement, ,throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  + "  consulted   "  +  loopType.getName());  throw new IllegalArgumentException("Types array must not contain duplicate:" + types[i - 1].getName() +" inspected " + loopType.getName());
compilation error,155,add,[CE] variable iChronology might already have been assigned, ,iChronology  =(chronology  ==  null)?  chronology  :  DateTimeUtils.getChronology(chronology).withUTC();  chronology = DateTimeUtils.getChronology(chronology).withUTC();
compilation error,223,replace,[CE] <identifier> expected, if(loopType.getRangeDurationType()  ==  null  ||(compare  ==  0  &&  loopUnitField.isSupported()  ==  false))  {  ,throw new IllegalArgumentException("Types array must not contain duplicate:" + types[i - 1].getName() +" and " + loopType.getName());
compilation error,155,replace,[CE] cannot find symbol, iChronology  =  chronology.withUTC();  ,iChronology = chronology.withUnitMillis(getChronology().withUnitMillis(chronology.getUnitMillis()));
compilation error,223,replace,[CE] bad operand types for binary operator '<', if(loopType.getRangeDurationType()  ==  null  ||  loopType.getRangeDurationType()  ==  null)  {  ,if(loopType.getRangeDurationType() == null || loopType.getRangeDurationType() < null) {
compilation error,224,add,[CE] incomparable types: DurationField and int, ,    if(loopType.getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(types[i - 1].getRangeDurationType().getField(iChronology)!= 0) { throw new IllegalArgumentException(""); }
compilation error,153,replace,[CE] cannot find symbol,   this(type,  value,  chronology.withUTC());  ,setValue(type, value, chronology.withUTC());
compilation error,155,replace,[CE] cannot find symbol dateTimeUtils,   chronology  =  DateTimeUtils.getChronology(chronology);  ,chronology = dateTimeUtils.getChronology(chronology);
compilation error,155,add,[CE] method validate in class Chronology cannot be applied to given types;, ,    chronology  =  DateTimeUtils.getChronology(chronology);  chronology.validate(this, value);
compilation error,155,replace,[CE] cannot find symbol dateTimeUtils,   chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  ,chronology = dateTimeUtils.getChronology(chronology).withUTC();
compilation error,223,replace,[CE] method isSupported in class DateTimeFieldType cannot be applied to given types;, if(loopType.getRangeDurationType()  ==  null  ||(compare!=  0  &&  loopUnitField.isSupported()  ==  false))  {  ,if(loopType.getRangeDurationType() == null ||(compare!= 0 && loopType.isSupported() == false)) {
compilation error,155,replace,[CE] cannot find symbol iPartial,   chronology  =  DateTimeUtils.getChronology(chronology);  ,iPartial =(Partial)chronology.withUTC();
compilation error,224,add,[CE] unreachable statement, ,throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  + "  consulted   "  +  loopType.getName());  throw new IllegalArgumentException("Types array must not contain duplicate:" + types[i - 1].getName() +" and " + loopType.getName());
compilation error,155,add,[CE] variable iChronology might already have been assigned, ,iChronology  =  DateTimeUtils.getChronology(chronology);  chronology = DateTimeUtils.getChronology(chronology).withUTC();
increase failing tests,154,replace, [FE] IllegalArgumentException testWith_argHasNoRange,   chronology  =  DateTimeUtils.getChronology(chronology);  ,if(type == null) { chronology = DateTimeUtils.getChronology(chronology); } else { throw new IllegalArgumentException(""); }
increase failing tests,154,replace, [FE] IllegalArgumentException testWith_argHasNoRange,   chronology  =  DateTimeUtils.getChronology(chronology);  ,if(type == null) { chronology = DateTimeUtils.getChronology(chronology); } else { throw new IllegalArgumentException("The field must not be null"); }
increase failing tests,223,replace, [FE] IllegalArgumentException testWith_baseAndArgHaveNoRange, if(loopType.getRangeDurationType()  ==  null  ||(compare  ==  0  &&  loopUnitField.isSupported()  ==  false))  {  ,if(compare == 0 ||(compare!= 0 && loopUnitField.isSupported() == false)) {
compilation error,155,replace,[CE] cannot find symbol iPartial, iChronology  =(chronology  ==  null)?  chronology  :  DateTimeUtils.getChronology(chronology).withUTC();  ,chronology = DateTimeUtils.getChronology(chronology); iPartial = chronology.withUTC();
compilation error,155,replace,[CE] cannot find symbol dateTimeUtils, iChronology  =(chronology  ==  null)?  chronology  :  DateTimeUtils.getChronology(chronology).withUTC();  ,iChronology =(chronology == null)? chronology : dateTimeUtils.getChronology(chronology).withUTC();
increase failing tests,223,replace, [FE] IllegalArgumentException testWith_baseAndArgHaveNoRange, if(loopType.getDurationType()  ==  null)  {  ,if(loopType.getDurationType() == null || types[i - 1].getRangeDurationType() == null) {
compilation error,156,replace,[CE] <identifier> expected,   type  =  chronology.withUTC();  ,type = chronology.withChronology(this, value);
compilation error,224,add,[CE] cannot find symbol iPartial, ,    if(loopType.getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  chronology = DateTimeUtils.getChronology(chronology).withUTC(); iPartial = chronology.withUTC();
compilation error,224,replace,[CE] cannot find symbol dateTimeUtils,   if(loopType.getRangeDurationType().getField(iChronology)  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  ,chronology = dateTimeUtils.getChronology(chronology).withUTC();
increase failing tests,156,replace, [FE] IllegalArgumentException testWith_baseAndArgHaveNoRange, if(type  ==  null  ||  value  <  0)  {  ,if(type == null || value == 0) {
compilation error,153,add,[CE] call to this must be first statement in constructor, ,    this(type,  value,  chronology.withUTC());  this(type, value, chronology.withUTC());
