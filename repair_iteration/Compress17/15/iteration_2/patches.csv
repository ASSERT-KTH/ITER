bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  end  =  buffer[end-1];  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[end-1];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[end-1];	  end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
2	[BUG]  [BUGGY]  end  =  buffer[start-1]  +  length;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start-1]  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[start-1]  +  length;	  end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
3	[BUG]  [BUGGY]  end  =  buffer[start-1]  +  1;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start-1]  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[start-1]  +  1;	  end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
4	[BUG]  [BUGGY]  end  =  buffer[start-1]  &  0xff;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start-1]  &  0xff;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[start-1]  &  0xff;	  end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
5	[BUG]  [BUGGY]  end  =  buffer[start-1]  &  0xfff;  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start-1]  &  0xfff;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[start-1]  &  0xfff;	  end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
6	[BUG]  [BUGGY]  end  =  buffer[start-1]  -  1;  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start-1]  -  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[start-1]  -  1;	  end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
7	[BUG]  [BUGGY]  End  end  =  buffer[end];  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[end];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  buffer[end];	  End    end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
8	[BUG]  [BUGGY]  End  end  =  buffer[start]  -  1;  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start]  -  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  buffer[start]  -  1;	  End    end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
9	[BUG]  [BUGGY]  End  end  =  buffer[offset];  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[offset];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  buffer[offset];	  End    end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
10	[BUG]  [BUGGY]  End  end  =  buffer[start+1];  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start+1];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  buffer[start+1];	  End    end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
11	[BUG]  [BUGGY]  End  end  =  buffer[start]  &  0xfff;  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start]  &  0xfff;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  buffer[start]  &  0xfff;	  End    end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
12	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[end-1]!=  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
13	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start-1]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start-1]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  buffer[start-1]!=  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
14	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start-1]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start-1]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start-1]!=  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
15	[BUG]  [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  ''  &&  buffer[start-1]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  ''  &&  buffer[start-1]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  >=  end  &&  buffer[start]  ==  ''  &&  buffer[start-1]!=  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
16	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start-1]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start-1]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  &&  buffer[start-1]!=  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
17	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  &&  buffer[start-1]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  &&  buffer[start-1]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '-'  &&  buffer[start-1]!=  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
18	[BUG]  [BUGGY]  End  end  =  buffer[end-1];  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[end-1];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  buffer[end-1];	  End    end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
19	[BUG]  [BUGGY]  End  end  =  buffer[start-1]  +  1;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1]  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  buffer[start-1]  +  1;	  End    end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
20	[BUG]  [BUGGY]  End  end  =  buffer[start-1]  &  0xfff;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1]  &  0xfff;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  buffer[start-1]  &  0xfff;	  End    end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
21	[BUG]  [BUGGY]  End  end  =  buffer[start-1]  &  0xff;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1]  &  0xff;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  buffer[start-1]  &  0xff;	  End    end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
22	[BUG]  [BUGGY]  End  end  =  buffer[start-1]  +  length;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1]  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  buffer[start-1]  +  length;	  End    end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
23	[BUG]  [BUGGY]  End  end  =  buffer[start-1]  &  0x7F;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1]  &  0x7F;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  buffer[start-1]  &  0x7F;	  End    end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
24	[BUG]  [BUGGY]  if  (start  <  end)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end)  {	  if    (end    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
25	[BUG]  [BUGGY]  if  (end  <  =  length)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  =  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  =  length)  {	  if    (end    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
26	[BUG]  [BUGGY]  if  (end  <  offset)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  offset)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  offset)  {	  if    (end    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
27	[BUG]  [BUGGY]  if  (end  <  offset  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  offset  ||  end  >  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  offset  ||  end  >  buffer.length)  {	  if    (end    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
28	[BUG]  [BUGGY]  if  (end  <  offset  ||  end  >  length)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  offset  ||  end  >  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  offset  ||  end  >  length)  {	  if    (end    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
29	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  end  >  buffer[start]  ==  '-')  {	  if    (length[start]    ==''    ||    end    >    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
30	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  end  >  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  end  >  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  end  >  buffer[start]  ==  '-')  {	  if    (length[start]    ==''    ||    end    >    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
31	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >  length[start]  {  '-')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >  length[start]  {  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  end  >  length[start]  {  '-')  {	  if    (length[start]    ==''    ||    end    >    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
32	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >  buffer[start]  >>  '-')  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >  buffer[start]  >>  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  end  >  buffer[start]  >>  '-')  {	  if    (length[start]    ==''    ||    end    >    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
33	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[end-1]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[end-1]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  buffer[end-1]  ==  'E')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start-1]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
34	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start-1]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start-1]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start-1]  ==  'E')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start-1]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
35	[BUG]  [BUGGY]  if  (length[start]  ==  'e'  ||  length[start-1]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  'e'  ||  length[start-1]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  'e'  ||  length[start-1]  ==  'E')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start-1]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
36	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  buffer[end-1]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  0  ||  buffer[end-1]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  0  ||  buffer[end-1]  ==  0)  {	  if    (buffer[start]    ==    0    ||    buffer[end]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
37	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  ==  0  ||  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  ==  0  ||  buffer[start]  ==  0)  {	  if    (buffer[start]    ==    0    ||    buffer[end]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
38	[BUG]  [BUGGY]  if  (length[start]  ==  0  ||  length[end]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  0  ||  length[end]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  0  ||  length[end]  ==  0)  {	  if    (buffer[start]    ==    0    ||    buffer[end]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
39	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  0  ||  buffer[end]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  0  ||  buffer[end]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  <  =  0  ||  buffer[start]  ==  0  ||  buffer[end]  ==  0)  {	  if    (buffer[start]    ==    0    ||    buffer[end]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
40	[BUG]  [BUGGY]  ||  end  <  offset)  {  return  0;  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ||  end  <  offset)  {  return  0;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	||  end  <  offset)  {  return  0;	  ||    end    <    length)    {    return    0;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
41	[BUG]  [BUGGY]  ||  end  <  length)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ||  end  <  length)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	||  end  <  length)  {  throw  new  IllegalArgumentException( " ");	  ||    end    <    length)    {    return    0;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
42	[BUG]  [BUGGY]  ||  end  <  buffer.length)  {  return  0;  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ||  end  <  buffer.length)  {  return  0;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	||  end  <  buffer.length)  {  return  0;	  ||    end    <    length)    {    return    0;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
43	[BUG]  [BUGGY]  ||  end  <  0)  {  return  0;  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ||  end  <  0)  {  return  0;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	||  end  <  0)  {  return  0;	  ||    end    <    length)    {    return    0;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
44	[BUG]  [BUGGY]  ||  end  <  =  length)  {  return  0;  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ||  end  <  =  length)  {  return  0;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	||  end  <  =  length)  {  return  0;	  ||    end    <    length)    {    return    0;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
45	[BUG]  [BUGGY]  int  end  =  buffer[end-1];  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[end-1];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer[end-1];	  int    end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
46	[BUG]  [BUGGY]  int  end  =  buffer[start-1]  &  0xff;  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start-1]  &  0xff;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer[start-1]  &  0xff;	  int    end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
47	[BUG]  [BUGGY]  int  end  =  buffer[start-1]  +  length;  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start-1]  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer[start-1]  +  length;	  int    end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
48	[BUG]  [BUGGY]  int  end  =  buffer[start-1]  +  1;  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start-1]  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer[start-1]  +  1;	  int    end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
49	[BUG]  [BUGGY]  int  end  =  buffer[start-1]  &  0xFF;  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start-1]  &  0xFF;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer[start-1]  &  0xFF;	  int    end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
50	[BUG]  [BUGGY]  int  end  =  buffer[start-1]  &  0x7F;  [CE]  illegal  start  of  expression  [FE]                                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start-1]  &  0x7F;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer[start-1]  &  0x7F;	  int    end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
51	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
52	[BUG]  [BUGGY]  if  (end  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
53	[BUG]  [BUGGY]  if  (length[start]  ==  'e'  ||  length[start]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  'e'  ||  length[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  'e'  ||  length[start]  ==  'E')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
54	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[end]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[end]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  buffer[end]  ==  'E')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
55	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  buffer[start  +  1]  ==  '-')  {	  if    (length[start]    ==    ''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
56	[BUG]  [BUGGY]  if  (end  <  end  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  end  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  end  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
57	[BUG]  [BUGGY]  if  (length  <  end  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length  <  end  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length  <  end  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
58	[BUG]  [BUGGY]  if  (start  <  =  end  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  =  end  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  =  end  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
59	[BUG]  [BUGGY]  if  (start  <  length  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  length  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  length  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
60	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start  +  1]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start  +  1]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start  +  1]!=  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
61	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[end-1]  ==  'e')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
62	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start-1]  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start-1]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  buffer[start-1]  ==  'e')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
63	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start-1]  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start-1]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start-1]  ==  'e')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
64	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start-1]  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start-1]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  buffer[start-1]  ==  'e')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
65	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[start-1]  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[start-1]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  buffer[start-1]  ==  'e')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
66	[BUG]  [BUGGY]  if(start  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(start  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {	  if(length    <    2    ||    buffer[start]    ==    ''    ||    buffer[end-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
67	[BUG]  [BUGGY]  if(end  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(end  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(end  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {	  if(length    <    2    ||    buffer[start]    ==    ''    ||    buffer[end-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
68	[BUG]  [BUGGY]  if(length  <  1  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  1  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  <  1  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {	  if(length    <    2    ||    buffer[start]    ==    ''    ||    buffer[end-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
69	[BUG]  [BUGGY]  if(length  >=  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  >=  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  >=  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {	  if(length    <    2    ||    buffer[start]    ==    ''    ||    buffer[end-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
70	[BUG]  [BUGGY]  if(length  <  =  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  =  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  <  =  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {	  if(length    <    2    ||    buffer[start]    ==    ''    ||    buffer[end-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
71	[BUG]  [BUGGY]  if(length  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '/')  {	  if(length    <    2    ||    buffer[start]    ==    ''    ||    buffer[end-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
72	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
73	[BUG]  [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  >=  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
74	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
75	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start]!=  '-')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
76	[BUG]  [BUGGY]  if(length[end]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[end]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[end]  ==  0)  {	  if    (buffer[end]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
77	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
78	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  if  (buffer[start]  ==  '0'  &&  buffer[start]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  if  (buffer[start]  ==  '0'  &&  buffer[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    if  (buffer[start]  ==  '0'  &&  buffer[start]!=  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
79	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  if  (buffer[start]!=  '0'  &&  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  if  (buffer[start]!=  '0'  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    if  (buffer[start]!=  '0'  &&  buffer[start]  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
80	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  If  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  If  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    If  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
81	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  if  (buffer[start]  >=  '0'  &&  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  if  (buffer[start]  >=  '0'  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    if  (buffer[start]  >=  '0'  &&  buffer[start]  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
82	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  if  (buffer[start]  ==  '0'  &&  buffer[start]  >=  '-')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  if  (buffer[start]  ==  '0'  &&  buffer[start]  >=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    if  (buffer[start]  ==  '0'  &&  buffer[start]  >=  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
83	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[end-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[end-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[end-1]  ==  '-')  {	  if    (buffer[start]    ==    '.'    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
84	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  '.'  ||  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  '.'  ||  buffer[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  '.'  ||  buffer[start-1]  ==  '-')  {	  if    (buffer[start]    ==    '.'    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
85	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  &&  buffer[start-1]  ==  '-')  {	  if    (buffer[start]    ==    '.'    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
86	[BUG]  [BUGGY]  if  (length[start]  ==  '.'  ||  length[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  '.'  ||  length[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  '.'  ||  length[start-1]  ==  '-')  {	  if    (buffer[start]    ==    '.'    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
87	[BUG]  [BUGGY]  byte  trailer  =  buffer[end-1]  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte  trailer  =  buffer[end-1]  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	byte  trailer  =  buffer[end-1]  +  1;	  byte    trailer    =    buffer[end-1];    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
88	[BUG]  [BUGGY]  byte  trailer  =  buffer[end-1]  +  length;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte  trailer  =  buffer[end-1]  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	byte  trailer  =  buffer[end-1]  +  length;	  byte    trailer    =    buffer[end-1];    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
89	[BUG]  [BUGGY]  byte  trailer  =  buffer[end-2];  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte  trailer  =  buffer[end-2];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	byte  trailer  =  buffer[end-2];	  byte    trailer    =    buffer[end-1];    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
90	[BUG]  [BUGGY]  if  (length[start]  ==  '0'  &&  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  '0'  &&  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  '0'  &&  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
91	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
92	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  <  =  end)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  <  =  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start]  <  =  end)  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
93	[BUG]  [BUGGY]  if  (end  <  0  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  0  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  0  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
94	[BUG]  [BUGGY]  if(buffer[start]  ==  ''  ||  end  >  length[start])  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ''  ||  end  >  length[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  ''  ||  end  >  length[start])  {	  if(length[start]    ==''    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
95	[BUG]  [BUGGY]  if(length[start]  ==  ''  &&  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  ''  &&  end  >  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start]  ==  ''  &&  end  >  buffer[start])  {	  if(length[start]    ==''    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
96	[BUG]  [BUGGY]  if(buffer[start]  ==  ''  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ''  ||  end  >  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  ''  ||  end  >  buffer[start])  {	  if(length[start]    ==''    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
97	[BUG]  [BUGGY]  if(length[start]  ==  ''  ||  end  <  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  ''  ||  end  <  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start]  ==  ''  ||  end  <  buffer[start])  {	  if(length[start]    ==''    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
98	[BUG]  [BUGGY]  if(length[start]  ==  ''  ||  end  >=  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  ''  ||  end  >=  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start]  ==  ''  ||  end  >=  buffer[start])  {	  if(length[start]    ==''    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
99	[BUG]  [BUGGY]  if(buffer[start]  ==  ''  ||  end  <  length)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ''  ||  end  <  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  ''  ||  end  <  length)  {	  if(length[start]    ==''    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
100	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[end-1]  ==  '/')  {	  if    (buffer[start]    ==    ''    ||    buffer[end-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
101	[BUG]  [BUGGY]  if  (length[start]  ==  ''  ||  length[end-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  ||  length[end-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  ||  length[end-1]  ==  '/')  {	  if    (buffer[start]    ==    ''    ||    buffer[end-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
102	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]!=  '/')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]!=  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[end-1]!=  '/')  {	  if    (buffer[start]    ==    ''    ||    buffer[end-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
103	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]  ==  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[end-1]  ==  '.')  {	  if    (buffer[start]    ==    ''    ||    buffer[end-1]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
104	[BUG]  [BUGGY]  if(length  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '.')  {	  if    (buffer[start]    ==    ''    ||    buffer[end-1]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
105	[BUG]  [BUGGY]  if  (length[start]  ==  ''  ||  length[end-1]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  ||  length[end-1]  ==  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  ||  length[end-1]  ==  '.')  {	  if    (buffer[start]    ==    ''    ||    buffer[end-1]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
106	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]!=  '.')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]!=  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[end-1]!=  '.')  {	  if    (buffer[start]    ==    ''    ||    buffer[end-1]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
107	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[end-1]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
108	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  buffer[start-1]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
109	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start-1]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
110	[BUG]  [BUGGY]  if  (end  <  start  ||  buffer[start-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  start  ||  buffer[start-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  start  ||  buffer[start-1]  ==  '')  {	  if    (start    <    end    ||    buffer[start-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
111	[BUG]  [BUGGY]  if  (start  <  =  end  ||  buffer[start-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  =  end  ||  buffer[start-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  =  end  ||  buffer[start-1]  ==  '')  {	  if    (start    <    end    ||    buffer[start-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
112	[BUG]  [BUGGY]  if  (start  <  length  ||  buffer[start-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  length  ||  buffer[start-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  length  ||  buffer[start-1]  ==  '')  {	  if    (start    <    end    ||    buffer[start-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
113	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start-1]!='')  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start-1]!='')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start-1]!='')  {	  if    (start    <    end    ||    buffer[start-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
114	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  end  <  buffer[start-1])  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  end  <  buffer[start-1])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  end  <  buffer[start-1])  {	  if    (buffer[start]    ==    ''    ||    end    <    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
115	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  end  <  buffer[end-1])  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  end  <  buffer[end-1])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  end  <  buffer[end-1])  {	  if    (buffer[start]    ==    ''    ||    end    <    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
116	[BUG]  [BUGGY]  if  (buffer[start]  ==''  ||  buffer[start]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==''  ||  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==''  ||  buffer[start]!=  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
117	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  buffer[start]!=  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
118	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  &&  buffer[start]!=  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
119	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]!=  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
120	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[start]!=  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
121	[BUG]  [BUGGY]  if  (buffer[start++]  ==  ''  ||  buffer[start++]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start++]  ==  ''  ||  buffer[start++]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start++]  ==  ''  ||  buffer[start++]  ==  '-')  {	  if    (buffer[start    +    1]    ==    ''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
122	[BUG]  [BUGGY]  if  (buffer[start  +  1]  ==  ''  ||  buffer[end  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start  +  1]  ==  ''  ||  buffer[end  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start  +  1]  ==  ''  ||  buffer[end  +  1]  ==  '-')  {	  if    (buffer[start    +    1]    ==    ''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
123	[BUG]  [BUGGY]  if(length[start  +  1]  ==  ''  ||  length[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start  +  1]  ==  ''  ||  length[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start  +  1]  ==  ''  ||  length[start  +  1]  ==  '-')  {	  if    (buffer[start    +    1]    ==    ''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
124	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  end  >  buffer[start]  ==  '')  {	  if    (length[start]    ==''    ||    end    >    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
125	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  end  >  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  end  >  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  end  >  buffer[start]  ==  '')  {	  if    (length[start]    ==''    ||    end    >    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
126	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >  length[start]  {  '')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >  length[start]  {  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  end  >  length[start]  {  '')  {	  if    (length[start]    ==''    ||    end    >    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
127	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >  length[start]  >>  '')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >  length[start]  >>  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  end  >  length[start]  >>  '')  {	  if    (length[start]    ==''    ||    end    >    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
128	[BUG]  [BUGGY]  if  (end  <  start  ||  buffer[start]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  start  ||  buffer[start]  ==  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  start  ||  buffer[start]  ==  '.')  {	  if    (start    <    end    ||    buffer[start]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
129	[BUG]  [BUGGY]  if  (start  <  length  ||  buffer[start]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  length  ||  buffer[start]  ==  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  length  ||  buffer[start]  ==  '.')  {	  if    (start    <    end    ||    buffer[start]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
130	[BUG]  [BUGGY]  if  (start  <  =  end  ||  buffer[start]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  =  end  ||  buffer[start]  ==  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  =  end  ||  buffer[start]  ==  '.')  {	  if    (start    <    end    ||    buffer[start]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
131	[BUG]  [BUGGY]  if  (end  <  end  ||  buffer[start]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  end  ||  buffer[start]  ==  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  end  ||  buffer[start]  ==  '.')  {	  if    (start    <    end    ||    buffer[start]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
132	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start-1]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start-1]  ==  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start-1]  ==  '.')  {	  if    (start    <    end    ||    buffer[start]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
133	[BUG]  [BUGGY]  ||  end  <  offset)  {  return  0L;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ||  end  <  offset)  {  return  0L;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	||  end  <  offset)  {  return  0L;	  ||    end    <    length)    {    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
134	[BUG]  [BUGGY]  ||  end  <  0)  {  return  0L;  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ||  end  <  0)  {  return  0L;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	||  end  <  0)  {  return  0L;	  ||    end    <    length)    {    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
135	[BUG]  [BUGGY]  ||  end  <  buffer.length)  {  return  0L;  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ||  end  <  buffer.length)  {  return  0L;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	||  end  <  buffer.length)  {  return  0L;	  ||    end    <    length)    {    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
136	[BUG]  [BUGGY]  ||  end  <  =  length)  {  return  0L;  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ||  end  <  =  length)  {  return  0L;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	||  end  <  =  length)  {  return  0L;	  ||    end    <    length)    {    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
137	[BUG]  [BUGGY]  ||  end  <  len)  {  return  0L;  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ||  end  <  len)  {  return  0L;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	||  end  <  len)  {  return  0L;	  ||    end    <    length)    {    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
138	[BUG]  [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-1];  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-1];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End    end    =    buffer[start-1];    End  end  =  buffer[start-1];	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
139	[BUG]  [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-1];  if(trailer  ==  0  ||  trailer  =='')  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-1];  if(trailer  ==  0  ||  trailer  =='')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End    end    =    buffer[start-1];    End  end  =  buffer[start-1];  if(trailer  ==  0  ||  trailer  =='')  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
140	[BUG]  [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-1];  if(trailer  ==  0  ||  trailer  =='')  {  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-1];  if(trailer  ==  0  ||  trailer  =='')  {  break;  }  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End    end    =    buffer[start-1];    End  end  =  buffer[start-1];  if(trailer  ==  0  ||  trailer  =='')  {  break;  }	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
141	[BUG]  [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-1];  if(trailer  ==  0  ||  trailer  =='')  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-1];  if(trailer  ==  0  ||  trailer  =='')  {  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End    end    =    buffer[start-1];    End  end  =  buffer[start-1];  if(trailer  ==  0  ||  trailer  =='')  {  return  0;  }	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
142	[BUG]  [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-1];  if(trailer  ==  0  ||  trailer  =='')  {  start++;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-1];  if(trailer  ==  0  ||  trailer  =='')  {  start++;  }  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End    end    =    buffer[start-1];    End  end  =  buffer[start-1];  if(trailer  ==  0  ||  trailer  =='')  {  start++;  }	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
143	[BUG]  [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-1];  if(trailer  ==  0  ||  trailer  =='')  {  continue;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-1];  if(trailer  ==  0  ||  trailer  =='')  {  continue;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End    end    =    buffer[start-1];    End  end  =  buffer[start-1];  if(trailer  ==  0  ||  trailer  =='')  {  continue;	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
144	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
145	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
146	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '-'  ||  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
147	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  &&  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
148	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  &&  buffer[start]!=  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
149	[BUG]  [BUGGY]  if  (length[start]  ==  'n'  ||  length[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  'n'  ||  length[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  'n'  ||  length[start]  ==  end)  {	  if    (buffer[start]    ==    'n'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
150	[BUG]  [BUGGY]  int  end  =  buffer.length  -  start  +  1;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer.length  -  start  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer.length  -  start  +  1;	  int    end    =    buffer.length    -    start;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
151	[BUG]  [BUGGY]  int  end  =  buffer.length  -  offset;  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer.length  -  offset;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer.length  -  offset;	  int    end    =    buffer.length    -    start;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
152	[BUG]  [BUGGY]  int  end  =  buffer[start].length  -  start;  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start].length  -  start;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer[start].length  -  start;	  int    end    =    buffer.length    -    start;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
153	[BUG]  [BUGGY]  int  end  =  buffer.length  -  start-1;  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer.length  -  start-1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer.length  -  start-1;	  int    end    =    buffer.length    -    start;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
154	[BUG]  [BUGGY]  int  end  =  buffer.length  /  start;  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer.length  /  start;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer.length  /  start;	  int    end    =    buffer.length    -    start;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
155	[BUG]  [BUGGY]  int  end  =  buffer.length  -  start  +  2;  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer.length  -  start  +  2;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer.length  -  start  +  2;	  int    end    =    buffer.length    -    start;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
156	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  end!=  buffer[start-1])  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  end!=  buffer[start-1])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  end!=  buffer[start-1])  {	  if    (buffer[start]    ==    ''    ||    end!=    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
157	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  end  ==  buffer[end-1])  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  end  ==  buffer[end-1])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  end  ==  buffer[end-1])  {	  if    (buffer[start]    ==    ''    ||    end!=    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
158	[BUG]  [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
159	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
160	[BUG]  [BUGGY]  bucket  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	bucket  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
161	[BUG]  [BUGGY]  End  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  offset  +  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
162	[BUG]  [BUGGY]  bucket  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	bucket  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
163	[BUG]  [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
164	[BUG]  [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	bucket  =  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
165	[BUG]  [BUGGY]  if(start  <  end  ||  buffer[start  +  1]  ==  'e'  ||  buffer[start  +  1]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  end  ||  buffer[start  +  1]  ==  'e'  ||  buffer[start  +  1]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(start  <  end  ||  buffer[start  +  1]  ==  'e'  ||  buffer[start  +  1]  ==  'E')  {	  if(buffer[start]    ==    'e'    ||    buffer[start    +    1]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
166	[BUG]  [BUGGY]  if(start  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start  +  1]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start  +  1]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(start  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start  +  1]  ==  'E')  {	  if(buffer[start]    ==    'e'    ||    buffer[start    +    1]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
167	[BUG]  [BUGGY]  if(buffer[start]  ==  'e'  &&  buffer[start  +  1]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  'e'  &&  buffer[start  +  1]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  'e'  &&  buffer[start  +  1]  ==  'E')  {	  if(buffer[start]    ==    'e'    ||    buffer[start    +    1]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
168	[BUG]  [BUGGY]  if(end  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start  +  1]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(end  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start  +  1]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(end  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start  +  1]  ==  'E')  {	  if(buffer[start]    ==    'e'    ||    buffer[start    +    1]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
169	[BUG]  [BUGGY]  if(length[start]  ==  'e'  ||  length[start  +  1]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  'e'  ||  length[start  +  1]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start]  ==  'e'  ||  length[start  +  1]  ==  'E')  {	  if(buffer[start]    ==    'e'    ||    buffer[start    +    1]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
170	[BUG]  [BUGGY]  if  (end  >=  start  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  >=  start  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  >=  start  ||  buffer[start]  ==  '')  {	  if    (start    >=    end    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
171	[BUG]  [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  >=  end  &&  buffer[start]  ==  '')  {	  if    (start    >=    end    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
172	[BUG]  [BUGGY]  if  (start  >=  end  ||  buffer[start]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  ||  buffer[start]  ==  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  >=  end  ||  buffer[start]  ==  '.')  {	  if    (start    >=    end    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
173	[BUG]  [BUGGY]  if  (end  <  start  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  start  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  start  ||  buffer[start  +  1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
174	[BUG]  [BUGGY]  if  (start  <  =  end  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  =  end  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  =  end  ||  buffer[start  +  1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
175	[BUG]  [BUGGY]  if  (start  <  length  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  length  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  length  ||  buffer[start  +  1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
176	[BUG]  [BUGGY]  if  (end  <  end  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  end  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  end  ||  buffer[start  +  1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
177	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start-1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
178	[BUG]  [BUGGY]  int  end  =  buffer[end];  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[end];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer[end];	  int    end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
179	[BUG]  [BUGGY]  byte  end  =  buffer[start];  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte  end  =  buffer[start];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	byte  end  =  buffer[start];	  int    end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
180	[BUG]  [BUGGY]  int  end  =  buffer[offset];  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[offset];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer[offset];	  int    end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
181	[BUG]  [BUGGY]  int  end  =  buffer[start]  -  1;  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start]  -  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer[start]  -  1;	  int    end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
182	[BUG]  [BUGGY]  int  end  =  buffer[start]  +  length;  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start]  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer[start]  +  length;	  int    end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
183	[BUG]  [BUGGY]  int  end  =  buffer[start]  &  0xFF;  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start]  &  0xFF;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer[start]  &  0xFF;	  int    end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
184	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  buffer[start-1]  ==  '')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
185	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start-1]  ==  '')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
186	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start-1]  ==  '/')  {	  if    (buffer[start]    ==    ''    ||    buffer[start-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
187	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '/')  {	  if    (buffer[start]    ==    ''    ||    buffer[start-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
188	[BUG]  [BUGGY]  if  (length[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  ||  buffer[end-1]  ==  '')  {	  if    (length[start]    ==    ''    ||    buffer[start-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
189	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer[start]  ==  '-'  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  ==  0  ||  buffer[start]  ==  '-'  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  ==  0  ||  buffer[start]  ==  '-'  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    '-'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
190	[BUG]  [BUGGY]  if(end  ==  0  ||  buffer[start]  ==  '-'  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(end  ==  0  ||  buffer[start]  ==  '-'  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(end  ==  0  ||  buffer[start]  ==  '-'  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    '-'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
191	[BUG]  [BUGGY]  if  (length[start]  ==  '-'  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  '-'  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  '-'  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    '-'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
192	[BUG]  [BUGGY]  if  (length[start]  ==  '-'  ||  length[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  '-'  ||  length[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  '-'  ||  length[start]  ==  end)  {	  if    (buffer[start]    ==    '-'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
193	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  '-'  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  '-'  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  '-'  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    '-'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
194	[BUG]  [BUGGY]  if(length  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  'e')  {	  if    (buffer[start]    ==    ''    ||    buffer[end-1]    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
195	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]!=  'e')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]!=  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[end-1]!=  'e')  {	  if    (buffer[start]    ==    ''    ||    buffer[end-1]    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
196	[BUG]  [BUGGY]  if  (length[start]  ==  ''  ||  length[end-1]  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  ||  length[end-1]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  ||  length[end-1]  ==  'e')  {	  if    (buffer[start]    ==    ''    ||    buffer[end-1]    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
197	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start]  ==  '')  {	  if    (buffer[start]    ==    ''    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
198	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start]  ==  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start]  ==  '.')  {	  if    (buffer[start]    ==    ''    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
199	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start]  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start]  ==  'e')  {	  if    (buffer[start]    ==    ''    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
200	[BUG]  [BUGGY]  if  (end  <  start  ||  buffer[start]!=  '')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  start  ||  buffer[start]!=  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  start  ||  buffer[start]!=  '')  {	  if    (start    <    end    ||    buffer[start]!='')    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
201	[BUG]  [BUGGY]  if  (start  <  length  ||  buffer[start]!=  '')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  length  ||  buffer[start]!=  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  length  ||  buffer[start]!=  '')  {	  if    (start    <    end    ||    buffer[start]!='')    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
202	[BUG]  [BUGGY]  if  (start  <  =  end  ||  buffer[start]!=  '')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  =  end  ||  buffer[start]!=  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  =  end  ||  buffer[start]!=  '')  {	  if    (start    <    end    ||    buffer[start]!='')    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
203	[BUG]  [BUGGY]  if  (end  <  end  ||  buffer[start]!=  '')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  end  ||  buffer[start]!=  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  end  ||  buffer[start]!=  '')  {	  if    (start    <    end    ||    buffer[start]!='')    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
204	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  end  <  length)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  end  <  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  end  <  length)  {	  if    (length[start]    ==''    ||    end    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
205	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  end  <  =  length)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  end  <  =  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  end  <  =  length)  {	  if    (length[start]    ==''    ||    end    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
206	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[end-1]!='')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[end-1]!='')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  buffer[end-1]!='')  {	  if    (length[start]    ==''    ||    end    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
207	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (buffer[start]    ==    ''    ||    buffer[start]    ==    '')    {    if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
208	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  if  (buffer[start]  ==  ''  ||  buffer[start]!=  '')  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  if  (buffer[start]  ==  ''  ||  buffer[start]!=  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (buffer[start]    ==    ''    ||    buffer[start]    ==    '')    {    if  (buffer[start]  ==  ''  ||  buffer[start]!=  '')  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
209	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  if  (buffer[start]!=  ''  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  if  (buffer[start]!=  ''  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (buffer[start]    ==    ''    ||    buffer[start]    ==    '')    {    if  (buffer[start]!=  ''  ||  buffer[start]  ==  '')  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
210	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  If  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  If  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (buffer[start]    ==    ''    ||    buffer[start]    ==    '')    {    If  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
211	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  if  (buffer[start]  >=  ''  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  if  (buffer[start]  >=  ''  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (buffer[start]    ==    ''    ||    buffer[start]    ==    '')    {    if  (buffer[start]  >=  ''  ||  buffer[start]  ==  '')  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
212	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  if  (buffer[start]  ==  ''  ||  buffer[start]  >=  '')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  if  (buffer[start]  ==  ''  ||  buffer[start]  >=  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (buffer[start]    ==    ''    ||    buffer[start]    ==    '')    {    if  (buffer[start]  ==  ''  ||  buffer[start]  >=  '')  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
213	[BUG]  [BUGGY]  if  (start  ==  0  ||  buffer[start]  =='')  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  ==  0  ||  buffer[start]  =='')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  ==  0  ||  buffer[start]  =='')  {	  if    (end    ==    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
214	[BUG]  [BUGGY]  if  (length  ==  0  ||  buffer[start]  =='')  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length  ==  0  ||  buffer[start]  =='')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length  ==  0  ||  buffer[start]  =='')  {	  if    (end    ==    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
215	[BUG]  [BUGGY]  if  (end  >=  0  ||  buffer[start]  =='')  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  >=  0  ||  buffer[start]  =='')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  >=  0  ||  buffer[start]  =='')  {	  if    (end    ==    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
216	[BUG]  [BUGGY]  if  (trailer  ==  0  ||  trailer  =='')  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (trailer  ==  0  ||  trailer  =='')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (trailer  ==  0  ||  trailer  =='')  {	  if    (end    ==    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
217	[BUG]  [BUGGY]  if(end  <  =  0  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(end  <  =  0  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(end  <  =  0  ||  buffer[start]  ==  '')  {	  if(length    <    =    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
218	[BUG]  [BUGGY]  if(start  <  =  0  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  =  0  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(start  <  =  0  ||  buffer[start]  ==  '')  {	  if(length    <    =    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
219	[BUG]  [BUGGY]  if(length  <  0  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  0  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  <  0  ||  buffer[start]  ==  '')  {	  if(length    <    =    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
220	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[end]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  =  0  ||  buffer[end]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  <  =  0  ||  buffer[end]  ==  '')  {	  if(length    <    =    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
221	[BUG]  [BUGGY]  if(length  >=  0  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  >=  0  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  >=  0  ||  buffer[start]  ==  '')  {	  if(length    <    =    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
222	[BUG]  [BUGGY]  if(length[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start]  ==  end)  {	  if    (buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
223	[BUG]  [BUGGY]  if  (buffer[start]  ==  start)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  start)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  start)  {	  if    (buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
224	[BUG]  [BUGGY]  if  (buffer[start]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]!=  end)  {	  if    (buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
225	[BUG]  [BUGGY]  if  (buffer[start]  ==  end  ||  buffer[end-1]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  end  ||  buffer[end-1]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  end  ||  buffer[end-1]  ==  end)  {	  if    (buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
226	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start-1]!=  '')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start-1]!=  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  buffer[start-1]!=  '')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    '')    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
227	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start-1]!=  '')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start-1]!=  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start-1]!=  '')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    '')    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
228	[BUG]  [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  ''  &&  buffer[start-1]!=  '')  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  ''  &&  buffer[start-1]!=  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  >=  end  &&  buffer[start]  ==  ''  &&  buffer[start-1]!=  '')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    '')    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
229	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start-1]!=  '')  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start-1]!=  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  buffer[start-1]!=  '')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    '')    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
230	[BUG]  [BUGGY]  if  (buffer[start]!=  ''  &&  buffer[end-1]!=  '')  {  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]!=  ''  &&  buffer[end-1]!=  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]!=  ''  &&  buffer[end-1]!=  '')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    '')    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
231	[BUG]  [BUGGY]  if(length[start]  ==  ''  &&  buffer[start]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  ''  &&  buffer[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start]  ==  ''  &&  buffer[start]!=  '-')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
232	[BUG]  [BUGGY]  if(start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]!=  '-')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
233	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  '.'  ||  buffer[start]!=  '-')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
234	[BUG]  [BUGGY]  if(buffer[start]  ==  ''  &&  buffer[end]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ''  &&  buffer[end]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  ''  &&  buffer[end]!=  '-')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
235	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  buffer[end-1]!=  '')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  buffer[end-1]!=  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  buffer[end-1]!=  '')  {	  if    (buffer[start]    ==    ''    &&    buffer[end-1]!=    '')    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
236	[BUG]  [BUGGY]  if(buffer[start]  ==  '0'  &&  end  <  =  length)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '0'  &&  end  <  =  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  '0'  &&  end  <  =  length)  {	  if(length[start]    ==    '0'    &&    end    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
237	[BUG]  [BUGGY]  if(length[start]  ==  '0'  &&  end  <  length)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  &&  end  <  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start]  ==  '0'  &&  end  <  length)  {	  if(length[start]    ==    '0'    &&    end    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
238	[BUG]  [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start]  ==  '0'  &&  end  <  =  buffer.length)  {	  if(length[start]    ==    '0'    &&    end    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
239	[BUG]  [BUGGY]  if(length[start]  ==  '0'  ||  end  <  =  length)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  ||  end  <  =  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start]  ==  '0'  ||  end  <  =  length)  {	  if(length[start]    ==    '0'    &&    end    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
240	[BUG]  [BUGGY]  if(length[start]  >=  '0'  &&  end  <  =  length)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  >=  '0'  &&  end  <  =  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start]  >=  '0'  &&  end  <  =  length)  {	  if(length[start]    ==    '0'    &&    end    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
241	[BUG]  [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  offset)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  offset)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start]  ==  '0'  &&  end  <  =  offset)  {	  if(length[start]    ==    '0'    &&    end    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
242	[BUG]  [BUGGY]  if  (end  <  length  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  length  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  length  ||  buffer[start]  ==  '')  {	  if    (end    <    end    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
243	[BUG]  [BUGGY]  if  (end  <  buffer.length  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  buffer.length  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  buffer.length  ||  buffer[start]  ==  '')  {	  if    (end    <    end    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
244	[BUG]  [BUGGY]  if  (end  <  =  end  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  =  end  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  =  end  ||  buffer[start]  ==  '')  {	  if    (end    <    end    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
245	[BUG]  [BUGGY]  if  (end  <  =  length  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  =  length  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  =  length  ||  buffer[start]  ==  '')  {	  if    (end    <    end    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
246	[BUG]  [BUGGY]  if  (end  <  len  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  len  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  len  ||  buffer[start]  ==  '')  {	  if    (end    <    end    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
247	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  end  <  length)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  0  ||  end  <  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  0  ||  end  <  length)  {	  if    (buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
248	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  end  >=  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  0  ||  end  >=  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  0  ||  end  >=  buffer.length)  {	  if    (buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
249	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  end  ==  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  0  ||  end  ==  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  0  ||  end  ==  buffer.length)  {	  if    (buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
250	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  end!=  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  0  ||  end!=  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  0  ||  end!=  buffer.length)  {	  if    (buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
251	[BUG]  [BUGGY]  if(length  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '-')  {	  if    (buffer[start]    ==    ''    ||    buffer[end-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
252	[BUG]  [BUGGY]  if  (length[start]  ==  ''  ||  length[end-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  ||  length[end-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  ||  length[end-1]  ==  '-')  {	  if    (buffer[start]    ==    ''    ||    buffer[end-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
253	[BUG]  [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    1;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
254	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    1;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
255	[BUG]  [BUGGY]  End  end  =  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  offset  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  offset  +  1;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    1;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
256	[BUG]  [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  1;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    1;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
257	[BUG]  [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  end,  0,  buffer.length);  end  =  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  end,  0,  buffer.length);  end  =  offset  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	bucket  =  System.arraycopy(buffer,  start,  end,  0,  buffer.length);  end  =  offset  +  1;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    1;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
258	[BUG]  [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	bucket  =  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  1;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    1;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
259	[BUG]  [BUGGY]  if  (length  <  start  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length  <  start  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length  <  start  ||  buffer[start]  ==  '')  {	  if    (start    <    length    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
260	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[end  +  1]  ==  '-')  {	  if    (buffer[start]    ==    ''    ||    buffer[end    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
261	[BUG]  [BUGGY]  if(length[start]  ==  ''  &&  buffer[end  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  ''  &&  buffer[end  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start]  ==  ''  &&  buffer[end  +  1]  ==  '-')  {	  if    (buffer[start]    ==    ''    ||    buffer[end    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
262	[BUG]  [BUGGY]  if(length  <  2  ||  buffer[start]  ==  ''  ||  buffer[end  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  2  ||  buffer[start]  ==  ''  ||  buffer[end  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  <  2  ||  buffer[start]  ==  ''  ||  buffer[end  +  1]  ==  '-')  {	  if    (buffer[start]    ==    ''    ||    buffer[end    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
263	[BUG]  [BUGGY]  if(length[start]  ==  ''  ||  length[end  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  ''  ||  length[end  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start]  ==  ''  ||  length[end  +  1]  ==  '-')  {	  if    (buffer[start]    ==    ''    ||    buffer[end    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
264	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  '9')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  '9')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '9')    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
265	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]!=  '9')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]!=  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start]!=  '9')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '9')    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
266	[BUG]  [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  '9')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  >=  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  '9')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '9')    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
267	[BUG]  [BUGGY]  if  (length[start]  ==  '0'  &&  buffer[start]  ==  '9')  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  '0'  &&  buffer[start]  ==  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  '0'  &&  buffer[start]  ==  '9')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '9')    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
268	[BUG]  [BUGGY]  if  (length[start]  ==  'e'  ||  length[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  'e'  ||  length[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  'e'  ||  length[start]  ==  end)  {	  if    (buffer[start]    ==    'e'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
269	[BUG]  [BUGGY]  if(end  ==  0  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(end  ==  0  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(end  ==  0  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    'e'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
270	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    'e'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
271	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start  +  1]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
272	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[end]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[end]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  '.'  ||  buffer[end]  ==  '-')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
273	[BUG]  [BUGGY]  if(end  <  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(end  <  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(end  <  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
274	[BUG]  [BUGGY]  if(start  <  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(start  <  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
275	[BUG]  [BUGGY]  if(length[start]  ==  '.'  ||  length[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '.'  ||  length[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start]  ==  '.'  ||  length[start]  ==  '-')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
276	[BUG]  [BUGGY]  End  end  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    +=    length;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
277	[BUG]  [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    +=    length;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
278	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    +=    length;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
279	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    +=    length;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
280	[BUG]  [BUGGY]  End  <?>  end  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <?>  end  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  <?>  end  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    +=    length;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
281	[BUG]  [BUGGY]  End  end  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  length;  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    +=    length;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
282	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    +=    length;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
283	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  &&  buffer[end-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  &&  buffer[end-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  '.'  &&  buffer[end-1]  ==  '/')  {	  if(buffer[start]    ==    '.'    ||    buffer[end-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
284	[BUG]  [BUGGY]  if(length[start]  ==  '.'  ||  length[end-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '.'  ||  length[end-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start]  ==  '.'  ||  length[end-1]  ==  '/')  {	  if(buffer[start]    ==    '.'    ||    buffer[end-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
285	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer[start-1]  ==  '.'  ||  buffer[end-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  ==  0  ||  buffer[start-1]  ==  '.'  ||  buffer[end-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  ==  0  ||  buffer[start-1]  ==  '.'  ||  buffer[end-1]  ==  '/')  {	  if(buffer[start]    ==    '.'    ||    buffer[end-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
286	[BUG]  [BUGGY]  if(buff[start]  ==  '.'  ||  buffer[end-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buff[start]  ==  '.'  ||  buffer[end-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buff[start]  ==  '.'  ||  buffer[end-1]  ==  '/')  {	  if(buffer[start]    ==    '.'    ||    buffer[end-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
287	[BUG]  [BUGGY]  if(length  <  2  ||  buffer[start]  ==  '.'  ||  buffer[end-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  2  ||  buffer[start]  ==  '.'  ||  buffer[end-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  <  2  ||  buffer[start]  ==  '.'  ||  buffer[end-1]  ==  '/')  {	  if(buffer[start]    ==    '.'    ||    buffer[end-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
288	[BUG]  [BUGGY]  if(buffer[start]!=  '.'  ||  buffer[end-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]!=  '.'  ||  buffer[end-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]!=  '.'  ||  buffer[end-1]  ==  '/')  {	  if(buffer[start]    ==    '.'    ||    buffer[end-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
289	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  end  ==  buffer[start-1])  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  end  ==  buffer[start-1])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  end  ==  buffer[start-1])  {	  if    (buffer[start]    ==    ''    ||    end    ==    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
290	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  ||  end  ==  buffer[start-1])  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  ||  end  ==  buffer[start-1])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  ||  end  ==  buffer[start-1])  {	  if    (buffer[start]    ==    ''    ||    end    ==    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
291	[BUG]  [BUGGY]  if  (end  ==  0  ||  buffer[start]  =='')  {  if  (end  ==  0  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  ==  0  ||  buffer[start]  =='')  {  if  (end  ==  0  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (end    ==    0    ||    buffer[start]    =='')    {    if  (end  ==  0  ||  buffer[start]  ==  '')  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
292	[BUG]  [BUGGY]  if  (end  ==  0  ||  buffer[start]  =='')  {  if  (end  ==  0  ||  buffer[start]!=  '')  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  ==  0  ||  buffer[start]  =='')  {  if  (end  ==  0  ||  buffer[start]!=  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (end    ==    0    ||    buffer[start]    =='')    {    if  (end  ==  0  ||  buffer[start]!=  '')  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
293	[BUG]  [BUGGY]  if  (end  ==  0  ||  buffer[start]  =='')  {  if  (end  ==  0  ||  buffer[start]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  ==  0  ||  buffer[start]  =='')  {  if  (end  ==  0  ||  buffer[start]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (end    ==    0    ||    buffer[start]    =='')    {    if  (end  ==  0  ||  buffer[start]  ==  '/')  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
294	[BUG]  [BUGGY]  if  (end  ==  0  ||  buffer[start]  =='')  {  if  (end!=  0  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  ==  0  ||  buffer[start]  =='')  {  if  (end!=  0  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (end    ==    0    ||    buffer[start]    =='')    {    if  (end!=  0  ||  buffer[start]  ==  '')  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
295	[BUG]  [BUGGY]  if  (end  ==  0  ||  buffer[start]  =='')  {  if  (end  >=  0  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  ==  0  ||  buffer[start]  =='')  {  if  (end  >=  0  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (end    ==    0    ||    buffer[start]    =='')    {    if  (end  >=  0  ||  buffer[start]  ==  '')  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
296	[BUG]  [BUGGY]  if  (end  ==  0  ||  buffer[start]  =='')  {  if  (end  ==  0  ||  buffer[start]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  ==  0  ||  buffer[start]  =='')  {  if  (end  ==  0  ||  buffer[start]  ==  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (end    ==    0    ||    buffer[start]    =='')    {    if  (end  ==  0  ||  buffer[start]  ==  '.')  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
297	[BUG]  [BUGGY]  byte  trailer  =  buffer[start-1]  +  length;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte  trailer  =  buffer[start-1]  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	byte  trailer  =  buffer[start-1]  +  length;	  byte    trailer    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
298	[BUG]  [BUGGY]  byte  trailer  =  buffer[start-1]  +  end;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte  trailer  =  buffer[start-1]  +  end;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	byte  trailer  =  buffer[start-1]  +  end;	  byte    trailer    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
299	[BUG]  [BUGGY]  byte  trailer  =  buffer[start-1]  +  1;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte  trailer  =  buffer[start-1]  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	byte  trailer  =  buffer[start-1]  +  1;	  byte    trailer    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
300	[BUG]  [BUGGY]  byte  trailer  =  buffer[start-1]  +  start;  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte  trailer  =  buffer[start-1]  +  start;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	byte  trailer  =  buffer[start-1]  +  start;	  byte    trailer    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
301	[BUG]  [BUGGY]  if  (end  <  length  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  length  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  length  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {	  if    (end    <    end    ||    buffer[start]    ==    ''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
302	[BUG]  [BUGGY]  if  (end  <  =  end  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  =  end  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  =  end  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {	  if    (end    <    end    ||    buffer[start]    ==    ''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
303	[BUG]  [BUGGY]  if  (end  <  =  length  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  =  length  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  =  length  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {	  if    (end    <    end    ||    buffer[start]    ==    ''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
304	[BUG]  [BUGGY]  if  (length  <  end  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length  <  end  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length  <  end  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {	  if    (end    <    end    ||    buffer[start]    ==    ''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
305	[BUG]  [BUGGY]  if  (end  <  len  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  len  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  len  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {	  if    (end    <    end    ||    buffer[start]    ==    ''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
306	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
307	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
308	[BUG]  [BUGGY]  if  (end  <  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  0)  {	  if    (end    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
309	[BUG]  [BUGGY]  if  (end  <  start)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  start)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  start)  {	  if    (end    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
310	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  length[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  length[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  length[start]  ==  '-')  {	  if    (length[start]    ==    ''    ||    length[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
311	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  length[start]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  length[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  length[start]!=  '-')  {	  if    (length[start]    ==    ''    ||    length[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
312	[BUG]  [BUGGY]  if  (length[start]  ==  ''  ||  length[end]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  ||  length[end]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  ||  length[end]  ==  '-')  {	  if    (length[start]    ==    ''    ||    length[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
313	[BUG]  [BUGGY]  end  =  buffer[end];  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[end];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[end];	  end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
314	[BUG]  [BUGGY]  end  =  buffer[start]  -  1;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start]  -  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[start]  -  1;	  end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
315	[BUG]  [BUGGY]  end  =  buffer[start]  +  length;  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start]  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[start]  +  length;	  end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
316	[BUG]  [BUGGY]  end  =  buffer[start]  +  1;  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start]  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[start]  +  1;	  end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
317	[BUG]  [BUGGY]  end  =  buffer[start]  &  0xFF;  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start]  &  0xFF;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[start]  &  0xFF;	  end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
318	[BUG]  [BUGGY]  end  =  buffer[start]  -  start;  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start]  -  start;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[start]  -  start;	  end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
319	[BUG]  [BUGGY]  if  (start  <  =  end  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  =  end  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  =  end  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
320	[BUG]  [BUGGY]  if  (length  <  end  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length  <  end  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length  <  end  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
321	[BUG]  [BUGGY]  if  (start  <  length  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  length  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  length  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
322	[BUG]  [BUGGY]  if  (end  <  end  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  end  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  end  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
323	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start-1]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start-1]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start-1]  ==  ''  ||  buffer[start-1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
324	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
325	[BUG]  [BUGGY]  if  (end  <  buffer[start]  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  buffer[start]  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  buffer[start]  ||  buffer[start]  ==  '')  {	  if    (end    <    start    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
326	[BUG]  [BUGGY]  if  (end  <  offset  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  offset  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  offset  ||  buffer[start]  ==  '')  {	  if    (end    <    start    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
327	[BUG]  [BUGGY]  start  =  buffer[end-1]  +  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  start  =  buffer[end-1]  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	start  =  buffer[end-1]  +  1;	  start    =    buffer[end-1];    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
328	[BUG]  [BUGGY]  start  =  buffer[end-1]  +  length;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  start  =  buffer[end-1]  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	start  =  buffer[end-1]  +  length;	  start    =    buffer[end-1];    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
329	[BUG]  [BUGGY]  start  =  buffer[end-1]  &  0xff;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  start  =  buffer[end-1]  &  0xff;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	start  =  buffer[end-1]  &  0xff;	  start    =    buffer[end-1];    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
330	[BUG]  [BUGGY]  start  =  buffer[end-1]  -  1;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  start  =  buffer[end-1]  -  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	start  =  buffer[end-1]  -  1;	  start    =    buffer[end-1];    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
331	[BUG]  [BUGGY]  start  =  buffer[end-1]  &  0xfff;  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  start  =  buffer[end-1]  &  0xfff;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	start  =  buffer[end-1]  &  0xfff;	  start    =    buffer[end-1];    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
332	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >  buffer[start]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >  buffer[start]  ==  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  end  >  buffer[start]  ==  '.')  {	  if    (length[start]    ==''    ||    end    >    buffer[start]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
333	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  end  >  buffer[start]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  end  >  buffer[start]  ==  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  end  >  buffer[start]  ==  '.')  {	  if    (length[start]    ==''    ||    end    >    buffer[start]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
334	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >  length[start]  {  '.')  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >  length[start]  {  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  end  >  length[start]  {  '.')  {	  if    (length[start]    ==''    ||    end    >    buffer[start]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
335	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >  buffer[start]  >>  '.')  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >  buffer[start]  >>  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  end  >  buffer[start]  >>  '.')  {	  if    (length[start]    ==''    ||    end    >    buffer[start]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
336	[BUG]  [BUGGY]  start  =  buffer[start-1]  &  0xff;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  start  =  buffer[start-1]  &  0xff;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	start  =  buffer[start-1]  &  0xff;	  start    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
337	[BUG]  [BUGGY]  start  =  buffer[start-1]  +  end;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  start  =  buffer[start-1]  +  end;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	start  =  buffer[start-1]  +  end;	  start    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
338	[BUG]  [BUGGY]  start  =  buffer[start-1]  +  1;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  start  =  buffer[start-1]  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	start  =  buffer[start-1]  +  1;	  start    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
339	[BUG]  [BUGGY]  start  =  buffer[start-1]  +  length;  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  start  =  buffer[start-1]  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	start  =  buffer[start-1]  +  length;	  start    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
340	[BUG]  [BUGGY]  start  =  buffer[start-1]  &  0xfff;  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  start  =  buffer[start-1]  &  0xfff;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	start  =  buffer[start-1]  &  0xfff;	  start    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
341	[BUG]  [BUGGY]  if(end  ==  0  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(end  ==  0  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(end  ==  0  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    '.'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
342	[BUG]  [BUGGY]  if  (length[start]  ==  '.'  ||  length[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  '.'  ||  length[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  '.'  ||  length[start]  ==  end)  {	  if    (buffer[start]    ==    '.'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
343	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  ==  0  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  ==  0  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    '.'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
344	[BUG]  [BUGGY]  if  (length[start]  ==  '.'  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  '.'  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  '.'  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    '.'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
345	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[end-1]!=  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
346	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start-1]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start-1]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  buffer[start-1]!=  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
347	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start-1]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start-1]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  &&  buffer[start-1]!=  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
348	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]  >=  end)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]  >=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start-1]  >=  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
349	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  buffer[end-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  buffer[end-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  &&  buffer[end-1]  ==  '')  {	  if    (buffer[start]    ==    ''    &&    buffer[end-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
350	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  end  >=  buffer[start-1])  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  end  >=  buffer[start-1])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  end  >=  buffer[start-1])  {	  if    (buffer[start]    ==    ''    &&    end    >    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
351	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  end  <  =  buffer[start-1])  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  end  <  =  buffer[start-1])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  end  <  =  buffer[start-1])  {	  if    (buffer[start]    ==    ''    &&    end    >    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
352	[BUG]  [BUGGY]  if  (end  <  =  start  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  =  start  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  =  start  ||  buffer[start]  ==  '')  {	  if    (start    <    =    end    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
353	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  'e')  {	  if    (start    <    =    end    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
354	[BUG]  [BUGGY]  if  (buffer[end]  ==  ''  &&  buffer[start-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[end]  ==  ''  &&  buffer[start-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[end]  ==  ''  &&  buffer[start-1]  ==  '')  {	  if    (buffer[end]    ==    ''    ||    buffer[start-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
355	[BUG]  [BUGGY]  if(buff[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buff[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buff[start]  ==  ''  ||  buffer[end-1]  ==  '')  {	  if    (buffer[end]    ==    ''    ||    buffer[start-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
356	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
357	[BUG]  [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
358	[BUG]  [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
359	[BUG]  [BUGGY]  End  end  =  offset;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  offset;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  offset;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
360	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset;  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
361	[BUG]  [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  length;  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
362	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
363	[BUG]  [BUGGY]  if(buffer[start]  ==  '0'  &&  end  <  length)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '0'  &&  end  <  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  '0'  &&  end  <  length)  {	  if(length[start]    ==    '0'    &&    end    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
364	[BUG]  [BUGGY]  if  (length[start]  ==  ''  ||  length[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  ||  length[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  ||  length[start]  ==  '')  {	  if    (length[start]    ==    ''    ||    length[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
365	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start-1]  ==  '.'  ||  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start-1]  ==  '.'  ||  buffer[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start-1]  ==  '.'  ||  buffer[start-1]  ==  '-')  {	  if    (buffer[start]    ==    '.'    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
366	[BUG]  [BUGGY]  if  (buffer[end]  ==  '.'  ||  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[end]  ==  '.'  ||  buffer[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[end]  ==  '.'  ||  buffer[start-1]  ==  '-')  {	  if    (buffer[start]    ==    '.'    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
367	[BUG]  [BUGGY]  End  end  =  buffer[start]  +  length;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start]  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  buffer[start]  +  length;	  End    end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
368	[BUG]  [BUGGY]  End  end  =  buffer[start]  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start]  &  BYTE_MASK;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  buffer[start]  &  BYTE_MASK;	  End    end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
369	[BUG]  [BUGGY]  if  (end  <  0  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  0  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  0  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
370	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[end]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[end]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[end]  ==  '-')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
371	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start-1]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start-1]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start-1]!=  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
372	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[end-1]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[end-1]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  &&  buffer[end-1]!=  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
373	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[start-1]!=  'E')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[start-1]!=  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  buffer[start-1]!=  'E')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
374	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start-1]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start-1]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '-'  ||  buffer[start-1]!=  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
375	[BUG]  [BUGGY]  if  (end  <  0  ||  buffer[start]  =='')  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  0  ||  buffer[start]  =='')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  0  ||  buffer[start]  =='')  {	  if    (end    ==    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
376	[BUG]  [BUGGY]  if  (start  ==  0  ||  end  =='')  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  ==  0  ||  end  =='')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  ==  0  ||  end  =='')  {	  if    (end    ==    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
377	[BUG]  [BUGGY]  if  (start  >=  0  ||  buffer[start]  =='')  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  0  ||  buffer[start]  =='')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  >=  0  ||  buffer[start]  =='')  {	  if    (end    ==    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
378	[BUG]  [BUGGY]  End  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
379	[BUG]  [BUGGY]  rackEnd  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  rackEnd  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	rackEnd  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
380	[BUG]  [BUGGY]  End  =  System.arraycopy(buffer,  start,  end,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  =  System.arraycopy(buffer,  start,  end,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  =  System.arraycopy(buffer,  start,  end,  buffer,  0,  end);  end  =  offset  +  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
381	[BUG]  [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  end,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  end,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	bucket  =  System.arraycopy(buffer,  start,  end,  buffer,  0,  end);  end  =  offset  +  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
382	[BUG]  [BUGGY]  if  (buffer[end]  ==  ''  ||  buffer[start-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[end]  ==  ''  ||  buffer[start-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[end]  ==  ''  ||  buffer[start-1]  ==  '/')  {	  if    (buffer[start]    ==    ''    ||    buffer[start-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
383	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start-1]  ==  '/')  {	  if    (buffer[start]    ==    ''    ||    buffer[start-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
384	[BUG]  [BUGGY]  if  (buffer[start-1]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start-1]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start-1]  ==  ''  ||  buffer[start-1]  ==  '-')  {	  if    (buffer[start    +    1]    ==    ''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
385	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start  +  1]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
386	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  &&  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  &&  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '-'  &&  buffer[start  +  1]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
387	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '-'  ||  buffer[start  +  1]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
388	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  &&  buffer[start  +  1]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
389	[BUG]  [BUGGY]  if  (start  >=  end  &&  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  &&  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  >=  end  &&  buffer[start  +  1]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
390	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start-1]  ==  'e'  ||  buffer[start-1]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start-1]  ==  'e'  ||  buffer[start-1]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start-1]  ==  'e'  ||  buffer[start-1]  ==  'E')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start-1]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
391	[BUG]  [BUGGY]  if  (start  >=  end  ||  buffer[start-1]  ==  'e'  ||  buffer[start-1]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  ||  buffer[start-1]  ==  'e'  ||  buffer[start-1]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  >=  end  ||  buffer[start-1]  ==  'e'  ||  buffer[start-1]  ==  'E')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start-1]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
392	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  ||  end  >  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  ||  end  >  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  ||  end  >  '-')  {	  if    (end    <    end    ||    buffer[start]    ==    ''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
393	[BUG]  [BUGGY]  if  (end  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  '-')  {	  if    (end    <    end    ||    buffer[start]    ==    ''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
394	[BUG]  [BUGGY]  if  (end  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]!=  '-')  {	  if    (end    <    end    ||    buffer[start]    ==    ''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
395	[BUG]  [BUGGY]  if  (end  <  length  ||  buffer[start]  ==  ''  ||  end  >  '-')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  length  ||  buffer[start]  ==  ''  ||  end  >  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  length  ||  buffer[start]  ==  ''  ||  end  >  '-')  {	  if    (end    <    end    ||    buffer[start]    ==    ''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
396	[BUG]  [BUGGY]  if  (buffer[start]  ==''  ||  buffer[start-1]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==''  ||  buffer[start-1]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==''  ||  buffer[start-1]  ==  end)  {	  if    (buffer[start]    ==    ''    &&    end    >    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
397	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  end  >  buffer[start-1])  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  ||  end  >  buffer[start-1])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  end  >  buffer[start-1])  {	  if    (buffer[start]    ==    ''    &&    end    >    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
398	[BUG]  [BUGGY]  if  (buffer[start]  ==  'n'  ||  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'n'  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  'n'  ||  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    'n'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
399	[BUG]  [BUGGY]  if  (buffer[start]  ==  ','  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ','  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ','  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    'n'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
400	[BUG]  [BUGGY]  if(buffer[start]  ==  '-'  &&  buffer[start]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '-'  &&  buffer[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  '-'  &&  buffer[start]!=  '-')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
401	[BUG]  [BUGGY]  if(buffer[start]  ==  '-'  ||  buffer[start]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '-'  ||  buffer[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  '-'  ||  buffer[start]!=  '-')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
402	[BUG]  [BUGGY]  if(buffer[start]  ==  'e'  ||  buffer[start]!=  'E')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  'e'  ||  buffer[start]!=  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  'e'  ||  buffer[start]!=  'E')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
403	[BUG]  [BUGGY]  if(buffer[start]  ==  ''  &&  buffer[start]!=  '')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ''  &&  buffer[start]!=  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  ''  &&  buffer[start]!=  '')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
404	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]!=  '.')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]!=  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]!=  '.')  {	  if    (start    <    end    ||    buffer[start]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
405	[BUG]  [BUGGY]  int  end  =  buffer[start+1];  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start+1];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer[start+1];	  int    end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
406	[BUG]  [BUGGY]  int  end  =  buffer[start]  -  start;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start]  -  start;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer[start]  -  start;	  int    end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
407	[BUG]  [BUGGY]  if(start  <  0  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  0  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(start  <  0  ||  buffer[start]  ==  '')  {	  if(length    <    =    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
408	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[end-1]  ==  '9')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[end-1]  ==  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[end-1]  ==  '9')  {	  if    (buffer[start]    ==    ''    &&    buffer[end-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
409	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '.')  {	  if    (length[start]    ==''    ||    end    >    buffer[start]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
410	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  end  ==  buffer[start-1])  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  ||  end  ==  buffer[start-1])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  end  ==  buffer[start-1])  {	  if    (buffer[start]    ==    ''    ||    end!=    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
411	[BUG]  [BUGGY]  if  (buffer[start]  ==  end  ||  buffer[end-1]  =='')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  end  ||  buffer[end-1]  =='')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  end  ||  buffer[end-1]  =='')  {	  if    (buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
412	[BUG]  [BUGGY]  if  (buffer[start]  ==  end  ||  buffer[end-1]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  end  ||  buffer[end-1]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  end  ||  buffer[end-1]  ==  0)  {	  if    (buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
413	[BUG]  [BUGGY]  if  (buffer[start]  ==  end  ||  buffer[end]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  end  ||  buffer[end]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  end  ||  buffer[end]  ==  0)  {	  if    (buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
414	[BUG]  [BUGGY]  if  (buffer[end]  ==  ''  ||  buffer[start-1]  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[end]  ==  ''  ||  buffer[start-1]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[end]  ==  ''  ||  buffer[start-1]  ==  'e')  {	  if    (buffer[end]    ==    ''    ||    buffer[start-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
415	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start]!=  end)  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
416	[BUG]  [BUGGY]  if(buffer[start]  ==  ''  ||  end  >=  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ''  ||  end  >=  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  ''  ||  end  >=  buffer[start])  {	  if(length[start]    ==''    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
417	[BUG]  [BUGGY]  if  (end  <  start  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  start  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  start  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
418	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start-1]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
419	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[end-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[end-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  &&  buffer[end-1]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
420	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '-'  ||  buffer[start-1]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
421	[BUG]  [BUGGY]  if  (buffer[start]  ==''  &&  buffer[start]  >=  end)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==''  &&  buffer[start]  >=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==''  &&  buffer[start]  >=  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
422	[BUG]  [BUGGY]  if  (end  <  offset  ||  end  >  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  offset  ||  end  >  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  offset  ||  end  >  buffer[start]  ==  '')  {	  if    (end    <    end    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
423	[BUG]  [BUGGY]  End  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
424	[BUG]  [BUGGY]  bucket  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;  }  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	bucket  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
425	[BUG]  [BUGGY]  rackEnd  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  rackEnd  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	rackEnd  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
426	[BUG]  [BUGGY]  rackEnd  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  rackEnd  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	rackEnd  =  System.arraycopy(buffer,  start,  buffer,  0,  end);	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
427	[BUG]  [BUGGY]  if  (end  ==  0  ||  buffer[start]  =='')  {  If  (end  ==  0  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  ==  0  ||  buffer[start]  =='')  {  If  (end  ==  0  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if    (end    ==    0    ||    buffer[start]    =='')    {    If  (end  ==  0  ||  buffer[start]  ==  '')  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
428	[BUG]  [BUGGY]  if  (end  >  start)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  >  start)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  >  start)  {	  if    (end    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
429	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start-1]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start-1]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '-'  ||  buffer[start-1]  ==  end)  {	  if    (buffer[start]    ==    '-'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
430	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start]  ==  '+')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start]  ==  '+')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '-'  ||  buffer[start]  ==  '+')  {	  if    (buffer[start]    ==    '-'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
431	[BUG]  [BUGGY]  if(start  >=  0  ||  buffer[start-1]  ==  '.'  ||  buffer[end-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  >=  0  ||  buffer[start-1]  ==  '.'  ||  buffer[end-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(start  >=  0  ||  buffer[start-1]  ==  '.'  ||  buffer[end-1]  ==  '/')  {	  if(buffer[start]    ==    '.'    ||    buffer[end-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
432	[BUG]  [BUGGY]  if(start  <  =  0  ||  buffer[start-1]  ==  '.'  ||  buffer[end-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  =  0  ||  buffer[start-1]  ==  '.'  ||  buffer[end-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(start  <  =  0  ||  buffer[start-1]  ==  '.'  ||  buffer[end-1]  ==  '/')  {	  if(buffer[start]    ==    '.'    ||    buffer[end-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
433	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  '.'  ||  buffer[start-1]  ==  '/')  {	  if(buffer[start]    ==    '.'    ||    buffer[end-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
434	[BUG]  [BUGGY]  if(buffer[start]  ==  ','  ||  buffer[end-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ','  ||  buffer[end-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  ','  ||  buffer[end-1]  ==  '/')  {	  if(buffer[start]    ==    '.'    ||    buffer[end-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
435	[BUG]  [BUGGY]  if  (start  >=  end  ||  buffer[start-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  ||  buffer[start-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  >=  end  ||  buffer[start-1]  ==  '')  {	  if    (start    >=    end    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
436	[BUG]  [BUGGY]  if  (end  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  =  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  =  0)  {	  if    (end    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
437	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  end  <  length)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  end  <  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  end  <  length)  {	  if    (length[start]    ==''    ||    end    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
438	[BUG]  [BUGGY]  if  (length[start]  ==  ''  ||  end  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  ||  end  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  ||  end  ==  '-')  {	  if    (length[start]    ==''    ||    end    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
439	[BUG]  [BUGGY]  if  (length[start]  ==  ''  ||  end  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  ||  end  ==  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  ||  end  ==  '.')  {	  if    (length[start]    ==''    ||    end    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
440	[BUG]  [BUGGY]  if  (start  <  end  &&  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  &&  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  &&  buffer[start  +  1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
441	[BUG]  [BUGGY]  if  (start  >=  end  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  >=  end  ||  buffer[start  +  1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
442	[BUG]  [BUGGY]  if  (start  >=  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  >=  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
443	[BUG]  [BUGGY]  if  (start  <  =  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  =  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  =  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
444	[BUG]  [BUGGY]  byte  trailer  =  buffer[end-1]  +  start;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte  trailer  =  buffer[end-1]  +  start;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	byte  trailer  =  buffer[end-1]  +  start;	  byte    trailer    =    buffer[end-1];    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
445	[BUG]  [BUGGY]  byte  trailer  =  buffer[end-1]  +  offset;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte  trailer  =  buffer[end-1]  +  offset;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	byte  trailer  =  buffer[end-1]  +  offset;	  byte    trailer    =    buffer[end-1];    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
446	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  end  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  end  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  end  ==  0)  {	  if    (buffer[start]    ==    ''    ||    end    <    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
447	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]  <  end)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]  <  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start-1]  <  end)  {	  if    (buffer[start]    ==    ''    ||    end    <    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
448	[BUG]  [BUGGY]  end  =  buffer[start-1]  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start-1]  &  BYTE_MASK;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[start-1]  &  BYTE_MASK;	  end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
449	[BUG]  [BUGGY]  if  (length[start]  ==  0  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  0  ||  end  >  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  0  ||  end  >  buffer[start])  {	  if    (length[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
450	[BUG]  [BUGGY]  end  =  buffer[start+1];  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start+1];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[start+1];	  end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
451	[BUG]  [BUGGY]  end  =  buffer[offset];  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[offset];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[offset];	  end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
452	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start-1]  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start-1]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start-1]  ==  'e')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
453	[BUG]  [BUGGY]  End  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    +=    length;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
454	[BUG]  [BUGGY]  rackEnd  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  rackEnd  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	rackEnd  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    +=    length;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
455	[BUG]  [BUGGY]  if(end  ==  0  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(end  ==  0  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(end  ==  0  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
456	[BUG]  [BUGGY]  if(start  >=  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  >=  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(start  >=  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
457	[BUG]  [BUGGY]  if  (start  <  length  &&  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  length  &&  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  length  &&  buffer[start]  ==  '')  {	  if    (start    <    length    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
458	[BUG]  [BUGGY]  int  end  =  buffer[start-1]  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start-1]  &  BYTE_MASK;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer[start-1]  &  BYTE_MASK;	  int    end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
459	[BUG]  [BUGGY]  if  (start  >=  end  ||  buffer[start]!='')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  ||  buffer[start]!='')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  >=  end  ||  buffer[start]!='')  {	  if    (start    <    end    ||    buffer[start]!='')    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
460	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  start  >=  end)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  0  ||  start  >=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  0  ||  start  >=  end)  {	  if    (buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
461	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  buffer[end-1]  <  end)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  0  ||  buffer[end-1]  <  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  0  ||  buffer[end-1]  <  end)  {	  if    (buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
462	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  end  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  0  ||  end  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  0  ||  end  ==  0)  {	  if    (buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
463	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  buffer[end-1]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  0  ||  buffer[end-1]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  0  ||  buffer[end-1]!=  end)  {	  if    (buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
464	[BUG]  [BUGGY]  int  end  =  offset  -  start;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  offset  -  start;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  offset  -  start;	  int    end    =    buffer.length    -    start;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
465	[BUG]  [BUGGY]  int  end  =  start  -  buffer.length;  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  start  -  buffer.length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  start  -  buffer.length;	  int    end    =    buffer.length    -    start;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
466	[BUG]  [BUGGY]  End  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    1;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
467	[BUG]  [BUGGY]  rackEnd  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  rackEnd  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	rackEnd  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    1;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
468	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  buffer[end+1]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  0  ||  buffer[end+1]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  0  ||  buffer[end+1]  ==  0)  {	  if    (buffer[start]    ==    0    ||    buffer[end]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
469	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  buffer[start-1]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  0  ||  buffer[start-1]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  0  ||  buffer[start-1]  ==  0)  {	  if    (buffer[start]    ==    0    ||    buffer[end]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
470	[BUG]  [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  >=  end  &&  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
471	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[end-1]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[end-1]  ==  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[end-1]  ==  '.')  {	  if    (buffer[start]    ==    ''    ||    buffer[end-1]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
472	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  ',')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  ',')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  ',')  {	  if    (buffer[start]    ==    '.'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
473	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  '/')  {	  if    (buffer[start]    ==    '.'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
474	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  ':')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  ':')  {	  if    (buffer[start]    ==    '.'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
475	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start-1]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start-1]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[start-1]  ==  end)  {	  if    (buffer[start]    ==    '.'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
476	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  'n')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  'n')  {	  if    (buffer[start]    ==    '.'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
477	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start-1]  ==  end)  {	  if    (buffer[start]    ==    ''    ||    end    ==    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
478	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start-1]  ==  '9')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start-1]  ==  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start-1]  ==  '9')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
479	[BUG]  [BUGGY]  if  (end  <  start  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  start  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  start  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
480	[BUG]  [BUGGY]  start  =  buffer[start-1]  &  0x7F;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  start  =  buffer[start-1]  &  0x7F;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	start  =  buffer[start-1]  &  0x7F;	  start    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
481	[BUG]  [BUGGY]  start  =  buffer[start-1]  -  1;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  start  =  buffer[start-1]  -  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	start  =  buffer[start-1]  -  1;	  start    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
482	[BUG]  [BUGGY]  if(start  <  0  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  0  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(start  <  0  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {	  if(length    <    2    ||    buffer[start]    ==    ''    ||    buffer[end-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
483	[BUG]  [BUGGY]  if(start  <  =  0  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  =  0  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(start  <  =  0  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {	  if(length    <    2    ||    buffer[start]    ==    ''    ||    buffer[end-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
484	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer[start]  {  ''  ||  buffer[end-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  0  ||  end  >  buffer[start]  {  ''  ||  buffer[end-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(start  <  0  ||  end  >  buffer[start]  {  ''  ||  buffer[end-1]  ==  '')  {	  if(length    <    2    ||    buffer[start]    ==    ''    ||    buffer[end-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
485	[BUG]  [BUGGY]  if(length  <  2  ||  buffer[start]  ==  ''  &&  buffer[end-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  2  ||  buffer[start]  ==  ''  &&  buffer[end-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  <  2  ||  buffer[start]  ==  ''  &&  buffer[end-1]  ==  '')  {	  if(length    <    2    ||    buffer[start]    ==    ''    ||    buffer[end-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
486	[BUG]  [BUGGY]  if  (buffer[start]  ==''  ||  buffer[start-1]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==''  ||  buffer[start-1]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==''  ||  buffer[start-1]!=  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
487	[BUG]  [BUGGY]  if  (end  <  buffer[start]  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  buffer[start]  ||  end  >  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  buffer[start]  ||  end  >  buffer[start])  {	  if    (end    <    start    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
488	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start-1]!=  '9')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start-1]!=  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start-1]!=  '9')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    '')    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
489	[BUG]  [BUGGY]  if(buffer[start]  ==  'e'  ||  buffer[end  +  1]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  'e'  ||  buffer[end  +  1]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  'e'  ||  buffer[end  +  1]  ==  'E')  {	  if(buffer[start]    ==    'e'    ||    buffer[start    +    1]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
490	[BUG]  [BUGGY]  End  end  =  buffer[start-1];  end  =  buffer[start-1];  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1];  end  =  buffer[start-1];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End    end    =    buffer[start-1];    end  =  buffer[start-1];	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
491	[BUG]  [BUGGY]  End  end  =  buffer[start-1];  Integer  end  =  buffer[start-1];  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1];  Integer  end  =  buffer[start-1];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End    end    =    buffer[start-1];    Integer  end  =  buffer[start-1];	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
492	[BUG]  [BUGGY]  End  end  =  buffer[start-1];  final  End  end  =  buffer[start-1];  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1];  final  End  end  =  buffer[start-1];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End    end    =    buffer[start-1];    final  End  end  =  buffer[start-1];	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
493	[BUG]  [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-2];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-2];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End    end    =    buffer[start-1];    End  end  =  buffer[start-2];	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
494	[BUG]  [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[end-1];  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[end-1];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End    end    =    buffer[start-1];    End  end  =  buffer[end-1];	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
495	[BUG]  [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-1].getEnd();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-1].getEnd();  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End    end    =    buffer[start-1];    End  end  =  buffer[start-1].getEnd();	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
496	[BUG]  [BUGGY]  End  end  =  buffer[start-1];  byte  end  =  buffer[start-1];  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1];  byte  end  =  buffer[start-1];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End    end    =    buffer[start-1];    byte  end  =  buffer[start-1];	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
497	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[end-1]  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[end-1]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[end-1]  ==  'e')  {	  if    (buffer[start]    ==    ''    ||    buffer[end-1]    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
498	[BUG]  [BUGGY]  if(length  <  0  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  0  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  <  0  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {	  if(length    <    2    ||    buffer[start]    ==    ''    ||    buffer[end-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
499	[BUG]  [BUGGY]  if(start  <  =  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  =  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(start  <  =  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {	  if(length    <    2    ||    buffer[start]    ==    ''    ||    buffer[end-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
500	[BUG]  [BUGGY]  End  end  =  buffer[start]  -  start;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start]  -  start;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  buffer[start]  -  start;	  End    end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
501	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  '/')  {	  if    (start    <    =    end    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
502	[BUG]  [BUGGY]  int  end  =  length  -  buffer.length;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  length  -  buffer.length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  length  -  buffer.length;	  int    end    =    buffer.length    -    start;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
503	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;  }  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
504	[BUG]  [BUGGY]  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end  +  1);  end  =  offset;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end  +  1);  end  =  offset;  }  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end  +  1);  end  =  offset;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
505	[BUG]  [BUGGY]  if  (buffer[start]  ==  'E'  ||  buffer[start-1]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'E'  ||  buffer[start-1]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  'E'  ||  buffer[start-1]  ==  'E')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start-1]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
506	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start-1]  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start-1]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[start-1]  ==  'e')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start-1]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
507	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[start-1]  ==  '')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
508	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start-1]  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start-1]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  &&  buffer[start-1]  ==  'e')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
509	[BUG]  [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-1].getValue();  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-1].getValue();  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End    end    =    buffer[start-1];    End  end  =  buffer[start-1].getValue();	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
510	[BUG]  [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-1].getByte();  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1];  End  end  =  buffer[start-1].getByte();  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End    end    =    buffer[start-1];    End  end  =  buffer[start-1].getByte();	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
511	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
512	[BUG]  [BUGGY]  End  <?>  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <?>  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  <?>  end  =  offset  +  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
513	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
514	[BUG]  [BUGGY]  end  =  buffer[start]  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start]  &  BYTE_MASK;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[start]  &  BYTE_MASK;	  end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
515	[BUG]  [BUGGY]  end  =  buffer[start]  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start]  *  BYTE_MASK;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[start]  *  BYTE_MASK;	  end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
516	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start-1]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start-1]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[start-1]!=  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
517	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[start-1]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[start-1]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  buffer[start-1]!=  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
518	[BUG]  [BUGGY]  end  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    +=    length;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
519	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  length;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    +=    length;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
520	[BUG]  [BUGGY]  end  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  length;  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  length;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    +=    length;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
521	[BUG]  [BUGGY]  if(end  <  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(end  <  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(end  <  buffer.length)  {	  if    (buffer[end]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
522	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start-1]!=  '.')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start-1]!=  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  &&  buffer[start-1]!=  '.')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    '')    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
523	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[end  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[end  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  '.'  ||  buffer[end  +  1]  ==  '-')  {	  if    (buffer[start]    ==    ''    ||    buffer[end    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
524	[BUG]  [BUGGY]  int  end  =  buffer[start]  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start]  &  BYTE_MASK;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer[start]  &  BYTE_MASK;	  int    end    =    buffer[start];    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
525	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  &&  end  <  buffer[start-1])  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  &&  end  <  buffer[start-1])  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  &&  end  <  buffer[start-1])  {	  if    (buffer[start]    ==    ''    &&    end    >    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
526	[BUG]  [BUGGY]  if  (length[start]  ==  ''  ||  end  >  buffer[start]  >>  '.')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  ||  end  >  buffer[start]  >>  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  ||  end  >  buffer[start]  >>  '.')  {	  if    (length[start]    ==''    ||    end    >    buffer[start]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
527	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  0  ||  end  >  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  0  ||  end  >  buffer.length)  {	  if    (buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
528	[BUG]  [BUGGY]  if  (end  <  length  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  length  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  length  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
529	[BUG]  [BUGGY]  if  (end  <  0  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  0  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  0  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
530	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start-1]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start-1]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[start-1]!=  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start-1]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
531	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '-'  ||  buffer[start]!=  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
532	[BUG]  [BUGGY]  if(buffer[start  +  start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start  +  start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start  +  start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {	  if    (buffer[start    +    1]    ==    ''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
533	[BUG]  [BUGGY]  if(buffer[start  +  1]  ==  ''  ||  buffer[start  +  2]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start  +  1]  ==  ''  ||  buffer[start  +  2]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start  +  1]  ==  ''  ||  buffer[start  +  2]  ==  '-')  {	  if    (buffer[start    +    1]    ==    ''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
534	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[end-1]!=  'E')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[end-1]!=  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  buffer[end-1]!=  'E')  {	  if    (buffer[start]    ==    ''    &&    buffer[end-1]!=    '')    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
535	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[end-1]!=  '.')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[end-1]!=  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  &&  buffer[end-1]!=  '.')  {	  if    (buffer[start]    ==    ''    &&    buffer[end-1]!=    '')    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
536	[BUG]  [BUGGY]  start  =  buffer[end-1]  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  start  =  buffer[end-1]  &  BYTE_MASK;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	start  =  buffer[end-1]  &  BYTE_MASK;	  start    =    buffer[end-1];    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
537	[BUG]  [BUGGY]  start  =  buffer[end-1]  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  start  =  buffer[end-1]  *  BYTE_MASK;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	start  =  buffer[end-1]  *  BYTE_MASK;	  start    =    buffer[end-1];    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
538	[BUG]  [BUGGY]  end  =  buffer[start-1]  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start-1]  *  BYTE_MASK;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[start-1]  *  BYTE_MASK;	  end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
539	[BUG]  [BUGGY]  if  (length[start]  ==  ''  ||  end]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  ||  end]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  ||  end]  ==  '-')  {	  if    (length[start]    ==    ''    ||    length[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
540	[BUG]  [BUGGY]  if(buffer[start]  ==  ''  ||  end  >  length)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ''  ||  end  >  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  ''  ||  end  >  length)  {	  if(length[start]    ==''    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
541	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  'e')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
542	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  'E')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
543	[BUG]  [BUGGY]  if  (buffer[start]  ==  'n'  ||  buffer[start]  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'n'  ||  buffer[start]  ==  'r')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  'n'  ||  buffer[start]  ==  'r')  {	  if    (buffer[start]    ==    ''    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
544	[BUG]  [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {	  if    (buffer[start]    ==    ''    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
545	[BUG]  [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  LAST_VALID_BYTE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  LAST_VALID_BYTE)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start]  ==  '0'  &&  end  <  =  LAST_VALID_BYTE)  {	  if(length[start]    ==    '0'    &&    end    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
546	[BUG]  [BUGGY]  if  (end  <  length  ||  buffer[start]  ==  ''  ||  end  >  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  length  ||  buffer[start]  ==  ''  ||  end  >  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  length  ||  buffer[start]  ==  ''  ||  end  >  buffer[start]  ==  '-')  {	  if    (end    <    end    ||    buffer[start]    ==    ''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
547	[BUG]  [BUGGY]  if  (end  <  length  ||  buffer[start]  ==  ''  ||  end  >  buffer[start]  {  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  length  ||  buffer[start]  ==  ''  ||  end  >  buffer[start]  {  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  length  ||  buffer[start]  ==  ''  ||  end  >  buffer[start]  {  '-')  {	  if    (end    <    end    ||    buffer[start]    ==    ''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
548	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[end-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[end-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[end-1]  ==  '')  {	  if    (buffer[start]    ==    ''    &&    buffer[end-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
549	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[end-1]  ==  ',')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[end-1]  ==  ',')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[end-1]  ==  ',')  {	  if    (buffer[start]    ==    ''    ||    buffer[end-1]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
550	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[end-1]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[end-1]  ==  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[end-1]  ==  '.')  {	  if    (buffer[start]    ==    ''    ||    buffer[end-1]    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
551	[BUG]  [BUGGY]  while(buffer[start-1]  <  end)  {  trailer  =  buffer[start-1];  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  while(buffer[start-1]  <  end)  {  trailer  =  buffer[start-1];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	while(buffer[start-1]  <  end)  {  trailer  =  buffer[start-1];	  byte    trailer    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
552	[BUG]  [BUGGY]  while(buffer[start-1]  <  =  end)  {  trailer  =  buffer[start-1];  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  while(buffer[start-1]  <  =  end)  {  trailer  =  buffer[start-1];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	while(buffer[start-1]  <  =  end)  {  trailer  =  buffer[start-1];	  byte    trailer    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
553	[BUG]  [BUGGY]  while(buffer[start-1]  <  end)  {  trailer  =  buffer[end-1];  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  while(buffer[start-1]  <  end)  {  trailer  =  buffer[end-1];  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	while(buffer[start-1]  <  end)  {  trailer  =  buffer[end-1];	  byte    trailer    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
554	[BUG]  [BUGGY]  if(buffer[start]  ==  '+'  ||  buffer[start]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '+'  ||  buffer[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  '+'  ||  buffer[start]!=  '-')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
555	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;  }  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    1;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
556	[BUG]  [BUGGY]  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  2;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  2;  }  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  2;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    1;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
557	[BUG]  [BUGGY]  End  <?>  end  =  offset  +  1;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <?>  end  =  offset  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  <?>  end  =  offset  +  1;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    1;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
558	[BUG]  [BUGGY]  if  (buffer[start]  ==  '/'  ||  buffer[end-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '/'  ||  buffer[end-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '/'  ||  buffer[end-1]  ==  '/')  {	  if    (buffer[start]    ==    ''    ||    buffer[end-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
559	[BUG]  [BUGGY]  if  (end  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if    (end    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
560	[BUG]  [BUGGY]  if  (end  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if    (end    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
561	[BUG]  [BUGGY]  if(trailer  ==  0  ||  buffer[start-1]  ==  '.'  ||  buffer[end-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(trailer  ==  0  ||  buffer[start-1]  ==  '.'  ||  buffer[end-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(trailer  ==  0  ||  buffer[start-1]  ==  '.'  ||  buffer[end-1]  ==  '/')  {	  if(buffer[start]    ==    '.'    ||    buffer[end-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
562	[BUG]  [BUGGY]  if(byte  ==  0  ||  buffer[start-1]  ==  '.'  ||  buffer[end-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(byte  ==  0  ||  buffer[start-1]  ==  '.'  ||  buffer[end-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(byte  ==  0  ||  buffer[start-1]  ==  '.'  ||  buffer[end-1]  ==  '/')  {	  if(buffer[start]    ==    '.'    ||    buffer[end-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
563	[BUG]  [BUGGY]  if(start  >=  end  ||  buffer[start-1]  ==  '.'  ||  buffer[end-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  >=  end  ||  buffer[start-1]  ==  '.'  ||  buffer[end-1]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(start  >=  end  ||  buffer[start-1]  ==  '.'  ||  buffer[end-1]  ==  '/')  {	  if(buffer[start]    ==    '.'    ||    buffer[end-1]    ==    '/')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
564	[BUG]  [BUGGY]  ||  end  <  length)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ||  end  <  length)  {  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	||  end  <  length)  {  return  0;  }	  ||    end    <    length)    {    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
565	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  <  =  0  ||  buffer[start]  ==  0)  {	  if    (length[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
566	[BUG]  [BUGGY]  End  end  =  buffer[start-1]  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1]  &  BYTE_MASK;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  buffer[start-1]  &  BYTE_MASK;	  End    end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
567	[BUG]  [BUGGY]  End  end  =  buffer[start-1]  -  1;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  buffer[start-1]  -  1;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  buffer[start-1]  -  1;	  End    end    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
568	[BUG]  [BUGGY]  if  (length[start]  ==  ''  ||  end  >  length)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  ||  end  >  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  ||  end  >  length)  {	  if    (length[start]    ==''    ||    end    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
569	[BUG]  [BUGGY]  if  (length[start]  ==  ''  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  ||  end  >  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  ||  end  >  buffer.length)  {	  if    (length[start]    ==''    ||    end    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
570	[BUG]  [BUGGY]  if(buffer[start  +  1]  ==  'e'  ||  buffer[start  +  1]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start  +  1]  ==  'e'  ||  buffer[start  +  1]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start  +  1]  ==  'e'  ||  buffer[start  +  1]  ==  'E')  {	  if(buffer[start]    ==    'e'    ||    buffer[start    +    1]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
571	[BUG]  [BUGGY]  if(buffer[start]  ==  'E'  ||  buffer[start  +  1]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  'E'  ||  buffer[start  +  1]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  'E'  ||  buffer[start  +  1]  ==  'E')  {	  if(buffer[start]    ==    'e'    ||    buffer[start    +    1]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
572	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start  +  1]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start  +  1]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  '.'  ||  buffer[start  +  1]  ==  'E')  {	  if(buffer[start]    ==    'e'    ||    buffer[start    +    1]    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
573	[BUG]  [BUGGY]  if  (length[start]  ==  ''  ||  end-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  ||  end-1]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  ||  end-1]  ==  '')  {	  if    (length[start]    ==    ''    ||    buffer[start-1]    ==    '')    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
574	[BUG]  [BUGGY]  if  (end  <  length  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (end  <  length  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  length  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
575	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start  +  1]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start  +  1]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start  +  1]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
576	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  buffer[end].length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  0  ||  buffer[end].length  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  0  ||  buffer[end].length  ==  0)  {	  if    (buffer[start]    ==    0    ||    buffer[end]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
577	[BUG]  [BUGGY]  start  =  buffer[start-1]  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  start  =  buffer[start-1]  &  BYTE_MASK;  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	start  =  buffer[start-1]  &  BYTE_MASK;	  start    =    buffer[start-1];    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
578	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[start  +  1]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
579	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  buffer[start  +  1]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
580	[BUG]  [BUGGY]  ||  end  <  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ||  end  <  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	||  end  <  length)  {  throw  new  IllegalArgumentException( " ");  }	  ||    end    <    length)    {    return    0;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
