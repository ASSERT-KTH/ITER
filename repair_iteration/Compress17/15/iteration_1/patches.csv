bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(length[start]  ==''  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if(length[start]  ==''  ||  end  >  buffer[start])  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start]  ==''  ||  end  >  buffer[start])  {	  if    (length[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  if  (length[start]  ==''  ||  end  <  length)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (length[start]  ==''  ||  end  <  length)  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==''  ||  end  <  length)  {	  if    (length[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  if  (end  <  start  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (end  <  start  ||  buffer[start]  ==  '')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  start  ||  buffer[start]  ==  '')  {	  if    (start    <    end    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
4	[BUG]  [BUGGY]  if  (start  <  length  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (start  <  length  ||  buffer[start]  ==  '')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  length  ||  buffer[start]  ==  '')  {	  if    (start    <    end    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
5	[BUG]  [BUGGY]  if  (start  <  =  end  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (start  <  =  end  ||  buffer[start]  ==  '')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  =  end  ||  buffer[start]  ==  '')  {	  if    (start    <    end    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
6	[BUG]  [BUGGY]  if  (end  <  end  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (end  <  end  ||  buffer[start]  ==  '')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  end  ||  buffer[start]  ==  '')  {	  if    (start    <    end    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
7	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (start  <  end  ||  buffer[start-1]  ==  '')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start-1]  ==  '')  {	  if    (start    <    end    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
8	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  end  >  buffer[start-1])  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  &&  end  >  buffer[start-1])  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  end  >  buffer[start-1])  {	  if    (buffer[start]    ==''    ||    end    >    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  end  <  buffer[start-1])  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  ||  end  <  buffer[start-1])  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  end  <  buffer[start-1])  {	  if    (buffer[start]    ==''    ||    end    >    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >=  buffer[start-1])  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  ||  end  >=  buffer[start-1])  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  end  >=  buffer[start-1])  {	  if    (buffer[start]    ==''    ||    end    >    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
11	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  end!=  buffer[start-1])  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  ||  end!=  buffer[start-1])  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  end!=  buffer[start-1])  {	  if    (buffer[start]    ==''    ||    end    >    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
12	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start  +  1]  ==  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start  +  1]  ==  '-')  {	  if    (buffer[start]    ==''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
13	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {	  if    (buffer[start]    ==''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
14	[BUG]  [BUGGY]  if  (length[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (length[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {	  if    (buffer[start]    ==''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
15	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (start  <  end  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start  +  1]  ==  '-')  {	  if    (buffer[start]    ==''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
16	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]  ==  '')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start-1]  ==  '')  {	  if    (buffer[start]    ==''    ||    buffer[start-1]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
17	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]!=  '')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]!=  '')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start-1]!=  '')  {	  if    (buffer[start]    ==''    ||    buffer[start-1]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
18	[BUG]  [BUGGY]  if  (length[start]  ==  ''  ||  buffer[start-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (length[start]  ==  ''  ||  buffer[start-1]  ==  '')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  ||  buffer[start-1]  ==  '')  {	  if    (buffer[start]    ==''    ||    buffer[start-1]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  byte  trailer  =  buffer[end-1];  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  byte  trailer  =  buffer[end-1];  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	byte  trailer  =  buffer[end-1];	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  end  =  buffer[start-1];  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  end  =  buffer[start-1];  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[start-1];	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
21	[BUG]  [BUGGY]  byte  trailer  =  buffer[start-1];  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  byte  trailer  =  buffer[start-1];  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	byte  trailer  =  buffer[start-1];	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
22	[BUG]  [BUGGY]  end  =  buffer[start];  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  end  =  buffer[start];  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	end  =  buffer[start];	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
23	[BUG]  [BUGGY]  ||  end  <  length)  {  return  0L;  [CE]  illegal  start  of  expression  [FE]                          AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  ||  end  <  length)  {  return  0L;  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	||  end  <  length)  {  return  0L;	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
24	[BUG]  [BUGGY]  ||  end  <  length)  {  return  0;  [CE]  illegal  start  of  expression  [FE]                            AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  ||  end  <  length)  {  return  0;  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	||  end  <  length)  {  return  0;	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
25	[BUG]  [BUGGY]  int  end  =  buffer[start-1];  [CE]  illegal  start  of  expression  [FE]                              AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  int  end  =  buffer[start-1];  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer[start-1];	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
26	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start]  ==  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
27	[BUG]  [BUGGY]  if  (end  <  end  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (end  <  end  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  end  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
28	[BUG]  [BUGGY]  if(buffer[start]  ==  ''  &&  buffer[start]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if(buffer[start]  ==  ''  &&  buffer[start]!=  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  ''  &&  buffer[start]!=  '-')  {	  if    (buffer[start]    ==''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
29	[BUG]  [BUGGY]  if  (length[start]  ==  ''  ||  length[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (length[start]  ==  ''  ||  length[start]  ==  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  ''  ||  length[start]  ==  '-')  {	  if    (buffer[start]    ==''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
30	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]  ==  '')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[end-1]  ==  '')  {	  if    (buffer[start]    ==''    ||    buffer[end-1]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
31	[BUG]  [BUGGY]  if(length  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if(length  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  <  2  ||  buffer[start]  ==  ''  ||  buffer[end-1]  ==  '')  {	  if    (buffer[start]    ==''    ||    buffer[end-1]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
32	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]!=  '')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[end-1]!=  '')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[end-1]!=  '')  {	  if    (buffer[start]    ==''    ||    buffer[end-1]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  if  (buffer[end]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[end]  ==  0)  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[end]  ==  0)  {	  if    (buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
34	[BUG]  [BUGGY]  if  (length[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (length[start]  ==  0)  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==  0)  {	  if    (buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
35	[BUG]  [BUGGY]  if  (buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  end)  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  end)  {	  if    (buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
36	[BUG]  [BUGGY]  if  (end  <  end)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (end  <  end)  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  end)  {	  if    (buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
37	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]  ==  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start-1]  ==  '-')  {	  if    (buffer[start]    ==''    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
38	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[end-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[end-1]  ==  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  buffer[end-1]  ==  '-')  {	  if    (buffer[start]    ==''    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
39	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  ||  buffer[start-1]  ==  '-')  {	  if    (buffer[start]    ==''    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
40	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]!=  '-')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]!=  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start-1]!=  '-')  {	  if    (buffer[start]    ==''    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
41	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start]  ==  end)  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start]  ==  end)  {	  if    (buffer[start]    ==''    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
42	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start]!=  end)  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start]!=  end)  {	  if    (buffer[start]    ==''    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
43	[BUG]  [BUGGY]  if  (length[start]  ==''  ||  end  >  buffer[start]  =='')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (length[start]  ==''  ||  end  >  buffer[start]  =='')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==''  ||  end  >  buffer[start]  =='')  {	  if    (length[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
44	[BUG]  [BUGGY]  if  (end  <  length)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (end  <  length)  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  <  length)  {	  if    (length[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
45	[BUG]  [BUGGY]  if  (length[start]  ==''  ||  end  >  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (length[start]  ==''  ||  end  >  buffer[start]  ==  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==''  ||  end  >  buffer[start]  ==  '-')  {	  if    (length[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
46	[BUG]  [BUGGY]  if  (length[start]  ==''  ||  end  >  buffer[start]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (length[start]  ==''  ||  end  >  buffer[start]  ==  '.')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (length[start]  ==''  ||  end  >  buffer[start]  ==  '.')  {	  if    (length[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (end  ==  0  ||  buffer[start]  =='')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	add	if  (end  ==  0  ||  buffer[start]  =='')  {	  if    (length[start]    =='')    {    	compilable	  [FE]  AssertionError  	3	1	replace
48	[BUG]  [BUGGY]  if  (end  ==  0  ||  buffer[start]  =='')  {  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (end  ==  0  ||  buffer[start]  =='')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (end  ==  0  ||  buffer[start]  =='')  {	  if    (length[start]    =='')    {    	compilable	  [FE]  AssertionError  	3	1	replace
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  End  end  =  buffer[start-1];  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	add	End  end  =  buffer[start-1];	      	compilable	  [FE]  AssertionError  	6	1	replace
50	[BUG]  [BUGGY]  End  end  =  buffer[start-1];  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  End  end  =  buffer[start-1];  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  buffer[start-1];	      	compilable	  [FE]  AssertionError  	6	1	replace
51	[BUG]  [BUGGY]  start  =  buffer[end-1];  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  start  =  buffer[end-1];  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	start  =  buffer[end-1];	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
52	[BUG]  [BUGGY]  start  =  buffer[start-1];  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  start  =  buffer[start-1];  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	start  =  buffer[start-1];	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
53	[BUG]  [BUGGY]  int  end  =  buffer[start];  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  int  end  =  buffer[start];  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer[start];	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
54	[BUG]  [BUGGY]  End  end  =  buffer[start];  [CE]  illegal  start  of  expression  [FE]                          AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  End  end  =  buffer[start];  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	End  end  =  buffer[start];	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
55	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[end  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[end  +  1]  ==  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  buffer[end  +  1]  ==  '-')  {	  if    (buffer[start]    ==''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
56	[BUG]  [BUGGY]  if  (start  >=  end  ||  buffer[start]  =='')  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (start  >=  end  ||  buffer[start]  =='')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  >=  end  ||  buffer[start]  =='')  {	  if    (start    <    end    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
57	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]!='')  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (start  <  end  ||  buffer[start]!='')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]!='')  {	  if    (start    <    end    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
58	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[start-1]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[start-1]  ==  'E')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  buffer[start-1]  ==  'E')  {	  if    (buffer[start]    ==''    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
59	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  end  ==  buffer[start-1])  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  ||  end  ==  buffer[start-1])  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  end  ==  buffer[start-1])  {	  if    (buffer[start]    ==''    ||    end    >    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
60	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]!=  end)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]!=  end)  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start-1]!=  end)  {	  if    (buffer[start]    ==''    ||    end    >    buffer[start-1])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
61	[BUG]  [BUGGY]  if  (buffer[end]  ==  ''  ||  buffer[start-1]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[end]  ==  ''  ||  buffer[start-1]  ==  '')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[end]  ==  ''  ||  buffer[start-1]  ==  '')  {	  if    (buffer[start]    ==''    ||    buffer[start-1]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
62	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start-1]  ==  'e')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start-1]  ==  'e')  {	  if    (buffer[start]    ==''    ||    buffer[start-1]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
63	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {	  if    (buffer[start]    ==''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	add	if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {	  if    (buffer[start]    ==''    ||    buffer[start]    ==    '-')    {    	compilable	  [FE]  AssertionError  	10	1	replace
65	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  buffer[start]  ==  '')  {	  if    (buffer[start]    ==''    ||    buffer[start]    ==    '-')    {    	compilable	  [FE]  AssertionError  	10	1	replace
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	add	if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==''    ||    buffer[start]    ==    '-')    {    	compilable	  [FE]  AssertionError  	10	1	replace
67	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==''    ||    buffer[start]    ==    '-')    {    	compilable	  [FE]  AssertionError  	10	1	replace
68	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '9')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '9')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  '9')  {	  if    (buffer[start]    ==''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
69	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[end-1]  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[end-1]  ==  'e')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  buffer[end-1]  ==  'e')  {	  if    (buffer[start]    ==''    ||    buffer[end-1]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
70	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[end-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[end-1]  ==  '/')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  buffer[end-1]  ==  '/')  {	  if    (buffer[start]    ==''    ||    buffer[end-1]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
71	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[end-1]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[end-1]  ==  '.')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  buffer[end-1]  ==  '.')  {	  if    (buffer[start]    ==''    ||    buffer[end-1]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
72	[BUG]  [BUGGY]  if  (buffer[start]  ==  'n'  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  'n'  ||  buffer[start]  ==  end)  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  'n'  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==''    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
73	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  end)  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  end)  {	  if    (buffer[start]    ==''    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
74	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start]  ==  end)  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '-'  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==''    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
75	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  end  <  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  0  ||  end  <  buffer.length)  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  0  ||  end  <  buffer.length)  {	  if    (buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
76	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[start]  =='')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if(length  <  =  0  ||  buffer[start]  =='')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length  <  =  0  ||  buffer[start]  =='')  {	  if    (length[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
77	[BUG]  [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  length)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  length)  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(length[start]  ==  '0'  &&  end  <  =  length)  {	  if    (length[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
78	[BUG]  [BUGGY]  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
79	[BUG]  [BUGGY]  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;  }  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
80	[BUG]  [BUGGY]  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;  }  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
81	[BUG]  [BUGGY]  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  }  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
82	[BUG]  [BUGGY]  int  end  =  buffer.length  -  start;  [CE]  illegal  start  of  expression  [FE]                          AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  int  end  =  buffer.length  -  start;  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	int  end  =  buffer.length  -  start;	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
83	[BUG]  [BUGGY]  if  (buffer[start  +  1]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start  +  1]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start  +  1]  ==  ''  ||  buffer[start  +  1]  ==  '-')  {	  if    (buffer[start]    ==''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
84	[BUG]  [BUGGY]  if(buffer[start]  ==  'e'  ||  buffer[start  +  1]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if(buffer[start]  ==  'e'  ||  buffer[start  +  1]  ==  'E')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  'e'  ||  buffer[start  +  1]  ==  'E')  {	  if    (buffer[start]    ==''    ||    buffer[start    +    1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
85	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  '.')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  '.')  {	  if    (start    <    end    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
86	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[end-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[end-1]  ==  '/')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  '.'  ||  buffer[end-1]  ==  '/')  {	  if    (buffer[start]    ==''    ||    buffer[end-1]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
87	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  end)  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==''    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
88	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[start]  ==  end)  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==''    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
89	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  buffer[end]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  0  ||  buffer[end]  ==  0)  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  0  ||  buffer[end]  ==  0)  {	  if    (buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
90	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if(buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
91	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start-1]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start-1]  ==  '-')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[start-1]  ==  '-')  {	  if    (buffer[start]    ==''    ||    buffer[start-1]    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
92	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start-1]  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){    [BUGGY]  if  (buffer[start]  ==  ''  ||  buffer[start-1]  ==  '/')  {  [BUGGY]    start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  if  (trailer  ==  0  ||  trailer  ==  '  '){  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	117	117	1	replace	if  (buffer[start]  ==  ''  ||  buffer[start-1]  ==  '/')  {	  if    (buffer[start]    ==''    ||    buffer[start-1]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
