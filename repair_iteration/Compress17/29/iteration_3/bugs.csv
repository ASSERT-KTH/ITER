bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  length,  0,  encoding.length);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  length,  0,  encoding.length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  length,  0,  encoding.length);	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    0,    encoding.length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
2	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  0,  length);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  0,  length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  0,  length);	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    0,    encoding.length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
3	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  length,  encoding.length,  0,  len);  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  length,  encoding.length,  0,  len);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  length,  encoding.length,  0,  len);	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    0,    encoding.length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
4	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  0,  encoding.length  -  1);  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  0,  encoding.length  -  1);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  0,  encoding.length  -  1);	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    0,    encoding.length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
5	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  1,  encoding.length);  [CE]  <identifier>  expected  [FE]                                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  1,  encoding.length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  1,  encoding.length);	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    0,    encoding.length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
6	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length);	  System.arraycopy(buffer,    offset,    buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
7	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  len  +  1);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  len  +  1);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  len  +  1);	  System.arraycopy(buffer,    offset,    buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
8	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  len  -  1);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  len  -  1);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  len  -  1);	  System.arraycopy(buffer,    offset,    buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  len,  length);  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  len,  length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  len,  length);	  System.arraycopy(buffer,    offset,    buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
10	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  len,  encoding);  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  len,  encoding);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  len,  encoding);	  System.arraycopy(buffer,    offset,    buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
11	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  buffer,  offset,  len);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  encoding,  buffer,  offset,  len);	  System.arraycopy(buffer,    offset,    buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
12	[BUG]  [BUGGY]  for(;  len  <  offset  +  len;  len--)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  <  offset  +  len;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  <  offset  +  len;  len--)  {	  for(;    len    <    offset;    len--)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
13	[BUG]  [BUGGY]  for(;  len  <  start;  len--)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  <  start;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  <  start;  len--)  {	  for(;    len    <    offset;    len--)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
14	[BUG]  [BUGGY]  for(;  len  >=  offset;  len--)  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  >=  offset;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  >=  offset;  len--)  {	  for(;    len    <    offset;    len--)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
15	[BUG]  [BUGGY]  for(;  len  <  =  offset;  len--)  {  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  <  =  offset;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  <  =  offset;  len--)  {	  for(;    len    <    offset;    len--)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
17	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len  -  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len  -  1);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len  -  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
18	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len  +  1);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len  +  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  bytes,  0,  len);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  bytes,  0,  len);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  bytes,  0,  len);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
20	[BUG]  [BUGGY]  for(;  len  ==  1;  len--)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  ==  1;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  ==  1;  len--)  {	  for(;    len    <    =    1;    len--)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
21	[BUG]  [BUGGY]  for(;  len  <  end;  len--)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  <  end;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  <  end;  len--)  {	  for(;    len    <    =    start;    len--)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
22	[BUG]  [BUGGY]  for(;  len  <  =  length;  len--)  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  <  =  length;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  <  =  length;  len--)  {	  for(;    len    <    =    start;    len--)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
23	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.decode(buffer,  0,  buffer.length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.decode(buffer,  0,  buffer.length);	  int    len    =    encoding.decode(buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
24	[BUG]  [BUGGY]  int  len  =  encoding.parse(buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.parse(buffer,  0,  len);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.parse(buffer,  0,  len);	  int    len    =    encoding.decode(buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
25	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  0,  len  +  1);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.decode(buffer,  0,  len  +  1);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.decode(buffer,  0,  len  +  1);	  int    len    =    encoding.decode(buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
26	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  0,  length);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.decode(buffer,  0,  length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.decode(buffer,  0,  length);	  int    len    =    encoding.decode(buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
27	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  len);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  len);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.decode(buffer,  offset,  0,  len);	  int    len    =    encoding.decode(buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
28	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  0,  offset);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.decode(buffer,  0,  offset);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.decode(buffer,  0,  offset);	  int    len    =    encoding.decode(buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
29	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
30	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  length  -  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  length  -  1);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  length  -  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
31	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
32	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
33	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
34	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  else  {  System.arraycopy(buffer,  offset,  offset  +  len  -  1);  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  else  {  System.arraycopy(buffer,  offset,  offset  +  len  -  1);  }  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  else  {  System.arraycopy(buffer,  offset,  offset  +  len  -  1);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
35	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
36	[BUG]  [BUGGY]  for(;  len!=  1;  len--)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len!=  1;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len!=  1;  len--)  {	  for(;    len    >    1;    len--)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
37	[BUG]  [BUGGY]  for(;  len  >>  1;  len--)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  >>  1;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  >>  1;  len--)  {	  for(;    len    >    1;    len--)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
38	[BUG]  [BUGGY]  for(;  len  >=  length;  len--)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  >=  length;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  >=  length;  len--)  {	  for(;    len    <    length;    len--)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
39	[BUG]  [BUGGY]  for(;  len  >  length;  len--)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  >  length;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  >  length;  len--)  {	  for(;    len    <    length;    len--)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
40	[BUG]  [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  len);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.parse(buffer,  offset,  len);	  int    len    =    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
41	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  len  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  len  +  1);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.decode(buffer,  offset,  len  +  1);	  int    len    =    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
42	[BUG]  [BUGGY]  char  len  =  encoding.decode(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  char  len  =  encoding.decode(buffer,  offset,  len);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	char  len  =  encoding.decode(buffer,  offset,  len);	  int    len    =    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
43	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  buffer.length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  buffer.length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.decode(buffer,  offset,  buffer.length);	  int    len    =    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
44	[BUG]  [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  len);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	byte  len  =  encoding.decode(buffer,  offset,  len);	  int    len    =    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
45	[BUG]  [BUGGY]  for(;  len  >  start;  len--)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  >  start;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  >  start;  len--)  {	  for(;    len    >=    start;    len--)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
46	[BUG]  [BUGGY]  for(;  len  >=  start  +  length;  len--)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  >=  start  +  length;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  >=  start  +  length;  len--)  {	  for(;    len    >=    start;    len--)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
47	[BUG]  [BUGGY]  for(;  len  >=  end;  len--)  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  >=  end;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  >=  end;  len--)  {	  for(;    len    >=    start;    len--)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
48	[BUG]  [BUGGY]  for(;  len  >  2;  len--)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  >  2;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  >  2;  len--)  {	  for(;    len    <    2;    len--)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
49	[BUG]  [BUGGY]  for(;  len  >=  2;  len--)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  >=  2;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  >=  2;  len--)  {	  for(;    len    <    2;    len--)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
50	[BUG]  [BUGGY]  for(;  len  <  =  2;  len--)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  <  =  2;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  <  =  2;  len--)  {	  for(;    len    <    2;    len--)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
51	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  length,  encoding.decode(len));  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  length,  encoding.decode(len));  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  length,  encoding.decode(len));	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    encoding.decode(len));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
52	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  length,  encoding.decode(len));  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  length,  encoding.decode(len));  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  length,  encoding.decode(len));	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    encoding.decode(len));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
53	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  0,  encoding.decode(len));  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  0,  encoding.decode(len));  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  0,  encoding.decode(len));	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    encoding.decode(len));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
54	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.decode(offset));  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.decode(offset));  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.decode(offset));	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    encoding.decode(len));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
55	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.decode(length));  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.decode(length));  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.decode(length));	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    encoding.decode(len));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
56	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.charAt(offset));  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.charAt(offset));  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.charAt(offset));	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    encoding.decode(len));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
57	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length  +  1);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.decode(buffer,  offset,  length  +  1);	  int    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
58	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  buffer.length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  buffer.length);	  int    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
59	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  0);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  0);	  int    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
60	[BUG]  [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.parse(buffer,  offset,  length);	  int    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
61	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  length);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.decode(buffer,  offset,  0,  length);	  int    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
62	[BUG]  [BUGGY]  char  len  =  encoding.decode(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  char  len  =  encoding.decode(buffer,  offset,  length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	char  len  =  encoding.decode(buffer,  offset,  length);	  int    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
63	[BUG]  [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	byte  len  =  encoding.decode(buffer,  offset,  length);	  int    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
64	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  encoding,  0,  length);	  System.arraycopy(buffer,    offset,    encoding,    0,    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
65	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  len  +  1);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  len  +  1);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  encoding,  0,  len  +  1);	  System.arraycopy(buffer,    offset,    encoding,    0,    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
66	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  buffer.length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  encoding,  0,  buffer.length);	  System.arraycopy(buffer,    offset,    encoding,    0,    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
67	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buf,  0,  len);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buf,  0,  len);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buf,  0,  len);	  System.arraycopy(buffer,    offset,    encoding,    0,    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
68	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  b,  0,  length);	  System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
69	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len  +  1);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len  +  1);	  System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
70	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  buffer.length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  b,  0,  buffer.length);	  System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
71	[BUG]  [BUGGY]  int  len  =  encoding.getLength()  +  1;  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.getLength()  +  1;  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.getLength()  +  1;	  int    len    =    encoding.getLength();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
72	[BUG]  [BUGGY]  int  len  =  buffer.getLength();  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  buffer.getLength();  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  buffer.getLength();	  int    len    =    encoding.getLength();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
73	[BUG]  [BUGGY]  int  len  =  encoding.getCharacterEncoding();  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.getCharacterEncoding();  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.getCharacterEncoding();	  int    len    =    encoding.getLength();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
74	[BUG]  [BUGGY]  int  len  =  encoding.getLength()  *  2;  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.getLength()  *  2;  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.getLength()  *  2;	  int    len    =    encoding.getLength();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
75	[BUG]  [BUGGY]  int  len  =  encoding.getLength()  +  2;  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.getLength()  +  2;  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.getLength()  +  2;	  int    len    =    encoding.getLength();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
76	[BUG]  [BUGGY]  int  len  =  encoding.length()  +  1;  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.length()  +  1;  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.length()  +  1;	  int    len    =    encoding.length();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
77	[BUG]  [BUGGY]  int  len  =  buffer.length();  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  buffer.length();  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  buffer.length();	  int    len    =    encoding.length();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
78	[BUG]  [BUGGY]  int  len  =  encoding.length()  *  2;  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.length()  *  2;  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.length()  *  2;	  int    len    =    encoding.length();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
79	[BUG]  [BUGGY]  int  len  =  length  -  encoding.length();  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  length  -  encoding.length();  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  length  -  encoding.length();	  int    len    =    encoding.length();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
80	[BUG]  [BUGGY]  int  len  =  encoding.length()  *  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.length()  *  BYTE_MASK;  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.length()  *  BYTE_MASK;	  int    len    =    encoding.length();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
81	[BUG]  [BUGGY]  int  len  =  encoding.length()  -  1;  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.length()  -  1;  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.length()  -  1;	  int    len    =    encoding.length();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
82	[BUG]  [BUGGY]  for(;  len  <  start  +  length;  len--)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  <  start  +  length;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  <  start  +  length;  len--)  {	  for(;    len    <    =    start;    len--)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
83	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length  -  1);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.decode(buffer,  offset,  length  -  1);	  int    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
84	[BUG]  [BUGGY]  for(;  len  <  1)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  <  1)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  <  1)  {	  for(;    len    <    =    1;    len--)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
85	[BUG]  [BUGGY]  for(;  offset  <  len;  len--)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  offset  <  len;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  offset  <  len;  len--)  {	  for(;    len    <    offset;    len--)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
86	[BUG]  [BUGGY]  for(;  len  >  offset;  len--)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  >  offset;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  >  offset;  len--)  {	  for(;    len    <    offset;    len--)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
87	[BUG]  [BUGGY]  for(;  len  <  offset  +  length;  len--)  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  for(;  len  <  offset  +  length;  len--)  {  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  <  offset  +  length;  len--)  {	  for(;    len    <    offset;    len--)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
88	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  encoding.length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  encoding.length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  encoding.length);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
89	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.encodeName(buffer));  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.encodeName(buffer));  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.encodeName(buffer));	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    encoding.decode(len));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
90	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  length  -  encoding.decode(len));  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  length  -  encoding.decode(len));  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  length  -  encoding.decode(len));	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    encoding.decode(len));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
91	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.decode(buffer,  offset));  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.decode(buffer,  offset));  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.decode(buffer,  offset));	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    encoding.decode(len));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
92	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.decode(buffer,  offset  +  length));  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.decode(buffer,  offset  +  length));  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.decode(buffer,  offset  +  length));	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    encoding.decode(len));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
93	[BUG]  [BUGGY]  char  len  =  encoding.decode(buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  char  len  =  encoding.decode(buffer,  0,  len);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	char  len  =  encoding.decode(buffer,  0,  len);	  int    len    =    encoding.decode(buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
94	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  len,  0,  encoding.length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  len,  0,  encoding.length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  len,  0,  encoding.length);	  System.arraycopy(buffer,    offset,    encoding,    0,    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
95	[BUG]  [BUGGY]  char  len  =  encoding.length();  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  char  len  =  encoding.length();  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	char  len  =  encoding.length();	  int    len    =    encoding.length();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
96	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len  -  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len  -  1);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len  -  1);	  System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
97	[BUG]  [BUGGY]  int  len  =  encoding.getEnd();  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.getEnd();  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.getEnd();	  int    len    =    encoding.getLength();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
98	[BUG]  [BUGGY]  int  len  =  encoding.getChars(0,  len);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.getChars(0,  len);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.getChars(0,  len);	  int    len    =    encoding.getLength();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
99	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len);	  System.arraycopy(buffer,    offset,    buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
100	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  len  +  1,  length);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  len  +  1,  length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  len  +  1,  length);	  System.arraycopy(buffer,    offset,    buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
101	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  -  len,  0,  encoding.length);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  -  len,  0,  encoding.length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  -  len,  0,  encoding.length);	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    0,    encoding.length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
102	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  0,  size);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  0,  size);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  0,  size);	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    0,    encoding.length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
103	[BUG]  [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
104	[BUG]  [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
105	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
106	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.decode(buffer,  offset  +  len));  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.decode(buffer,  offset  +  len));  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.decode(buffer,  offset  +  len));	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    encoding.decode(len));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
107	[BUG]  [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.parseName(buffer,  offset,  length);	  int    len    =    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
108	[BUG]  [BUGGY]  int  len  =  encoding.decodeName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.decodeName(buffer,  offset,  length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.decodeName(buffer,  offset,  length);	  int    len    =    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
109	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  len,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  len,  0,  buffer.length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  len,  0,  buffer.length);	  System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
110	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  length);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  length);	  System.arraycopy(buffer,    offset,    buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
111	[BUG]  [BUGGY]  int  len  =  encoding.parseName(buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.parseName(buffer,  0,  len);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.parseName(buffer,  0,  len);	  int    len    =    encoding.decode(buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
112	[BUG]  [BUGGY]  int  len  =  encoding.getName();  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  int  len  =  encoding.getName();  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.getName();	  int    len    =    encoding.getLength();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
113	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.length,  0,  length);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.length,  0,  length);  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.length,  0,  length);	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len,    0,    encoding.length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
114	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
115	[BUG]  [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;      [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }  [BUGGY]      if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
