bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
2	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
3	[BUG]  [BUGGY]  int  len  =  encoding.length();  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  int  len  =  encoding.length();  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.length();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
4	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  len);  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  encoding,  0,  len);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
5	[BUG]  [BUGGY]  int  len  =  encoding.getLength();  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  int  len  =  encoding.getLength();  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.getLength();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
6	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  len);  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  len);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
7	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  0,  encoding.length);  [CE]  <identifier>  expected  [FE]                                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  0,  encoding.length);  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  0,  encoding.length);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
8	[BUG]  [BUGGY]  for(;  len  >=  start;  len--)  {  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  for(;  len  >=  start;  len--)  {  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  >=  start;  len--)  {	  for(;    len!=    0;    len--)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
9	[BUG]  [BUGGY]  for(;  len  <  length;  len--)  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  for(;  len  <  length;  len--)  {  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  <  length;  len--)  {	  for(;    len    <    0;    len--)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
10	[BUG]  [BUGGY]  for(;  len  <  =  start;  len--)  {  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  for(;  len  <  =  start;  len--)  {  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  <  =  start;  len--)  {	  for(;    len    <    =    0;    len--)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
11	[BUG]  [BUGGY]  for(;  len  >  1;  len--)  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  for(;  len  >  1;  len--)  {  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  >  1;  len--)  {	  for(;    len    <    1;    len--)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
12	[BUG]  [BUGGY]  for(;  len  >=  1;  len--)  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  for(;  len  >=  1;  len--)  {  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  >=  1;  len--)  {	  for(;    len    <    1;    len--)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
13	[BUG]  [BUGGY]  for(;  len  <  =  1;  len--)  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  for(;  len  <  =  1;  len--)  {  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  <  =  1;  len--)  {	  for(;    len    <    1;    len--)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
14	[BUG]  [BUGGY]  for(;  len  <  offset;  len--)  {  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  for(;  len  <  offset;  len--)  {  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  <  offset;  len--)  {	  for(;    len    <    1;    len--)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
15	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  len);  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.decode(buffer,  offset,  len);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
16	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  int  len  =  encoding.decode(buffer,  0,  len);  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.decode(buffer,  0,  len);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
17	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length);  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	int  len  =  encoding.decode(buffer,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
18	[BUG]  [BUGGY]  for(;  len  [Delete]  0;  len--)  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  for(;  len  [Delete]  0;  len--)  {  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  [Delete]  0;  len--)  {	  for(;    len    >=    0;    len--)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
20	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.decode(len));  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.decode(len));  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding.decode(len));	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
21	[BUG]  [BUGGY]  for(;  len  <  2;  len--)  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;    [BUGGY]  for(;  len  <  2;  len--)  {  [BUGGY]    if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	288	288	1	replace	for(;  len  <  2;  len--)  {	  for(;    len    <    1;    len--)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
