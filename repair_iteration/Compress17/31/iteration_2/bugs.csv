bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len);	  unwrap(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
2	[BUG]  [BUGGY]  unwrap(buffer,  offset  +  len,  length);  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  unwrap(buffer,  offset  +  len,  length);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset  +  len,  length);	  unwrap(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
3	[BUG]  [BUGGY]  unwrap(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  unwrap(buffer,  offset  +  length);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset  +  length);	  unwrap(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
4	[BUG]  [BUGGY]  parseName(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  parseName(buffer,  offset  +  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parseName(buffer,  offset  +  len);	  unwrap(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
5	[BUG]  [BUGGY]  parse(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  parse(buffer,  offset  +  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parse(buffer,  offset  +  len);	  unwrap(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
6	[BUG]  [BUGGY]  validate(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  validate(buffer,  offset  +  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validate(buffer,  offset  +  len);	  unwrap(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
7	[BUG]  [BUGGY]  unwrap(buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  unwrap(buffer,  offset  +  len  -  1);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset  +  len  -  1);	  unwrap(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
8	[BUG]  [BUGGY]  if(encoding  ==  null)  {  break;  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(encoding  ==  null)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null)  {  break;  }	  if(deFAULT_ENCODING    ==    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
9	[BUG]  [BUGGY]  ||(deFAULT_ENCODING  ==  null  &&  buffer.length  >  0)||(deFAULT_ENCODING.equals(encoding)))  {  break;  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  ||(deFAULT_ENCODING  ==  null  &&  buffer.length  >  0)||(deFAULT_ENCODING.equals(encoding)))  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(deFAULT_ENCODING  ==  null  &&  buffer.length  >  0)||(deFAULT_ENCODING.equals(encoding)))  {  break;  }	  if(deFAULT_ENCODING    ==    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
10	[BUG]  [BUGGY]  ||(deFAULT_ENCODING!=  null  &&  buffer.length  >  0)||(deFAULT_ENCODING.equals(encoding)))  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  ||(deFAULT_ENCODING!=  null  &&  buffer.length  >  0)||(deFAULT_ENCODING.equals(encoding)))  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(deFAULT_ENCODING!=  null  &&  buffer.length  >  0)||(deFAULT_ENCODING.equals(encoding)))  {  break;  }	  if(deFAULT_ENCODING    ==    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
11	[BUG]  [BUGGY]  if(encoding.equals(buffer))  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(encoding.equals(buffer))  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding.equals(buffer))  {  break;  }	  if(deFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
12	[BUG]  [BUGGY]  if(!deFAULT_ENCODING.equals(buffer))  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(!deFAULT_ENCODING.equals(buffer))  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!deFAULT_ENCODING.equals(buffer))  {  break;  }	  if(deFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
13	[BUG]  [BUGGY]  if(deFAULT_ENCODING.equals(encoding))  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING.equals(encoding))  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING.equals(encoding))  {  break;  }	  if(deFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
14	[BUG]  [BUGGY]  if(deFAULT_ENCODING.equals(buffer,  offset))  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING.equals(buffer,  offset))  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING.equals(buffer,  offset))  {  break;  }	  if(deFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
15	[BUG]  [BUGGY]  ||  DEFAULT_ENCODING.equals(buffer))  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  ||  DEFAULT_ENCODING.equals(buffer))  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||  DEFAULT_ENCODING.equals(buffer))  {  break;  }	  if(deFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);	  unwrap(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
17	[BUG]  [BUGGY]  parseName(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  parseName(buffer,  offset,  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parseName(buffer,  offset,  len);	  unwrap(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  parse(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  parse(buffer,  offset,  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parse(buffer,  offset,  len);	  unwrap(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  unwrap(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  unwrap(buffer,  offset,  length);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset,  length);	  unwrap(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
20	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  bytes,  0,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  System.arraycopy(buffer,  offset,  bytes,  0,  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  bytes,  0,  len);	  unwrap(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
21	[BUG]  [BUGGY]  validate(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  validate(buffer,  offset,  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validate(buffer,  offset,  len);	  unwrap(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
22	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);	  unwrap(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]	  continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
24	[BUG]  [BUGGY]  if(len  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(len  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]	  continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
25	[BUG]  [BUGGY]  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }	  continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
26	[BUG]  [BUGGY]  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,	  continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
27	[BUG]  [BUGGY]  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,	  continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
28	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  len);	  throw    new    IOException(   "   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
29	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  len);	  throw    new    IOException(   "   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
30	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  encoding.decode(buffer,  offset  +  length);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  length);	  return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
31	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  1);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  encoding.decode(buffer,  offset  +  1);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  1);	  return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
32	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len,  length);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  encoding.decode(buffer,  offset  +  len,  length);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len,  length);	  return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
33	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  1,  len);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  encoding.decode(buffer,  offset  +  1,  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  1,  len);	  return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
34	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  length,  len);  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  encoding.decode(buffer,  offset  +  length,  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  length,  len);	  return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
35	[BUG]  [BUGGY]  return  encoding.parseName(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  encoding.parseName(buffer,  offset  +  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parseName(buffer,  offset  +  len);	  return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
36	[BUG]  [BUGGY]  return  buffer.decode(encoding,  offset  +  len);  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  buffer.decode(encoding,  offset  +  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  buffer.decode(encoding,  offset  +  len);	  return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
37	[BUG]  [BUGGY]  if(encoding  ==  DEFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(encoding  ==  DEFAULT_ENCODING)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  DEFAULT_ENCODING)  {  break;  }	  if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
38	[BUG]  [BUGGY]  if(encoding!=  DEFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(encoding!=  DEFAULT_ENCODING)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding!=  DEFAULT_ENCODING)  {  break;  }	  if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
39	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.equals(buffer))  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(encoding  ==  null  ||  encoding.equals(buffer))  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||  encoding.equals(buffer))  {  break;  }	  if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
40	[BUG]  [BUGGY]  handleMissingName();  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  handleMissingName();  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	handleMissingName();	  rethrowInternal();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
41	[BUG]  [BUGGY]  rethrowAsIOException( " ");  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  rethrowAsIOException( " ");  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rethrowAsIOException( " ");	  rethrowInternal();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  rehashInternal();  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  rehashInternal();  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rehashInternal();	  rethrowInternal();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
43	[BUG]  [BUGGY]  rethrowAsIOException();  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  rethrowAsIOException();  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rethrowAsIOException();	  rethrowInternal();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
44	[BUG]  [BUGGY]  rehashCode();  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  rehashCode();  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rehashCode();	  rethrowInternal();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
45	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
46	[BUG]  [BUGGY]  if(deFAULT_ENCODING!=  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING!=  FALLBACK_ENCODING)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING!=  FALLBACK_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
47	[BUG]  [BUGGY]  because(deFAULT_ENCODING  ==  DEFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  because(deFAULT_ENCODING  ==  DEFAULT_ENCODING)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	because(deFAULT_ENCODING  ==  DEFAULT_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
48	[BUG]  [BUGGY]  ||(deFAULT_ENCODING  ==  FALLBACK_ENCODING))  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  ||(deFAULT_ENCODING  ==  FALLBACK_ENCODING))  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(deFAULT_ENCODING  ==  FALLBACK_ENCODING))  {  break;  }	  if(deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
49	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
50	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  deFAULT_ENCODING  ==  DEFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  deFAULT_ENCODING  ==  DEFAULT_ENCODING)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  deFAULT_ENCODING  ==  DEFAULT_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
51	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
52	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(encoding.getName()));  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(encoding.getName()));  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " ".equals(encoding.getName()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
53	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer.length));  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer.length));  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " ".equals(buffer.length));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
54	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer,  offset  +  len));  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer,  offset  +  len));  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " ".equals(buffer,  offset  +  len));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
55	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".getMessage());  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".getMessage());  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " ".getMessage());	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
56	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(encoding));  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(encoding));  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " ".equals(encoding));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
57	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  encoding.decode(buffer,  offset,  length);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  length);	  return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
58	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  len  +  1);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  encoding.decode(buffer,  offset,  len  +  1);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  len  +  1);	  return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
59	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  len,  length);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  encoding.decode(buffer,  offset,  len,  length);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  len,  length);	  return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
60	[BUG]  [BUGGY]  return  encoding.parseName(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  encoding.parseName(buffer,  offset,  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parseName(buffer,  offset,  len);	  return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
61	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  0,  len);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  encoding.decode(buffer,  offset,  0,  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  0,  len);	  return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
62	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  len,  buffer.length);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  encoding.decode(buffer,  offset,  len,  buffer.length);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  len,  buffer.length);	  return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
63	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len,  len);  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  encoding.decode(buffer,  offset  +  len,  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len,  len);	  return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
64	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.toString();  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.toString();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
65	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
66	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  buffer[offset  +  len  -  1]  =  encoding;  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  buffer[offset  +  len  -  1]  =  encoding;  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);  buffer[offset  +  len  -  1]  =  encoding;	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
67	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
68	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(encoding));  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(encoding));  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( " ".equals(encoding));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
69	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".getMessage());  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  throw  new  IllegalStateException( " ".getMessage());  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( " ".getMessage());	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
70	[BUG]  [BUGGY]  if(deFAULT_ENCODING.equals(buffer)||  buffer.length  ==  0)  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING.equals(buffer)||  buffer.length  ==  0)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING.equals(buffer)||  buffer.length  ==  0)  {  break;  }	  if(deFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
71	[BUG]  [BUGGY]  if(deFAULT_ENCODING.equals(buffer)||  buffer.length!=  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING.equals(buffer)||  buffer.length!=  0)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING.equals(buffer)||  buffer.length!=  0)  {  break;  }	  if(deFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
72	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  encoding.decode(buffer,  offset  +  len  -  1);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len  -  1);	  return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
73	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len  +  1);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  encoding.decode(buffer,  offset  +  len  +  1);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len  +  1);	  return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
74	[BUG]  [BUGGY]  ||(deFAULT_ENCODING  ==  null  &&  buffer.length  >  0))  {  break;  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  ||(deFAULT_ENCODING  ==  null  &&  buffer.length  >  0))  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(deFAULT_ENCODING  ==  null  &&  buffer.length  >  0))  {  break;  }	  if(deFAULT_ENCODING    ==    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
75	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length  <  =  len)  {  break;  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length  <  =  len)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  null  ||  buffer.length  <  =  len)  {  break;  }	  if(deFAULT_ENCODING    ==    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
76	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(deFAULT_ENCODING    ==    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
77	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length  <  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length  <  0)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  null  ||  buffer.length  <  0)  {  break;  }	  if(deFAULT_ENCODING    ==    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
78	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(b);  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(b);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(b);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
79	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
80	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer);  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
81	[BUG]  [BUGGY]  if(encoding!=  null)  {  continue;  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(encoding!=  null)  {  continue;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding!=  null)  {  continue;  }	  continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
82	[BUG]  [BUGGY]  if(encoding  ==  null)  {  continue;  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(encoding  ==  null)  {  continue;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null)  {  continue;  }	  continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
83	[BUG]  [BUGGY]  continue  null;  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  continue  null;  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	continue  null;	  continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
84	[BUG]  [BUGGY]  if(!encoding.isName())  {  continue;  }  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(!encoding.isName())  {  continue;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isName())  {  continue;  }	  continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
85	[BUG]  [BUGGY]  rethrowInternal(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  rethrowInternal(buffer,  offset  +  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rethrowInternal(buffer,  offset  +  len);	  rethrowInternal();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
86	[BUG]  [BUGGY]  return  encoding.parse(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  encoding.parse(buffer,  offset,  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parse(buffer,  offset,  len);	  return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
87	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  len  -  1);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  encoding.decode(buffer,  offset,  len  -  1);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  len  -  1);	  return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
88	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(buffer,  offset  +  len));  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(buffer,  offset  +  len));  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( " ".equals(buffer,  offset  +  len));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
89	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: ");  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: ");  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  name: ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
90	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(buffer,  offset));  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(buffer,  offset));  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( " ".equals(buffer,  offset));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
91	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer,  offset));  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer,  offset));  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " ".equals(buffer,  offset));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
92	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " ".equals(buffer);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
93	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  DEFAULT_FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING  ==  DEFAULT_FALLBACK_ENCODING)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  DEFAULT_FALLBACK_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
94	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  0)  {  break;  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING  ==  0)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  0)  {  break;  }	  if(deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
95	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset  +  len,  0,  buffer.length);	  throw    new    IOException(   "   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
96	[BUG]  [BUGGY]  unwrap(buffer,  offset,  len  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  unwrap(buffer,  offset,  len  -  1);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset,  len  -  1);	  unwrap(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
97	[BUG]  [BUGGY]  unwrap(buffer,  offset,  len  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  unwrap(buffer,  offset,  len  +  1);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset,  len  +  1);	  unwrap(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
98	[BUG]  [BUGGY]  ||(deFAULT_ENCODING!=  null  &&  buffer.length  >  0))  {  break;  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  ||(deFAULT_ENCODING!=  null  &&  buffer.length  >  0))  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(deFAULT_ENCODING!=  null  &&  buffer.length  >  0))  {  break;  }	  if(deFAULT_ENCODING!=    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
99	[BUG]  [BUGGY]  if(deFAULT_ENCODING!=  null  ||  buffer.length  ==  0)  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING!=  null  ||  buffer.length  ==  0)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING!=  null  ||  buffer.length  ==  0)  {  break;  }	  if(deFAULT_ENCODING!=    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
100	[BUG]  [BUGGY]  unwrap(buffer,  offset,  len,  encoding);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  unwrap(buffer,  offset,  len,  encoding);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset,  len,  encoding);	  unwrap(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
101	[BUG]  [BUGGY]  validateName(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  validateName(buffer,  offset,  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validateName(buffer,  offset,  len);	  unwrap(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
102	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer.toString()));  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer.toString()));  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " ".equals(buffer.toString()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
103	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer.getName()));  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer.getName()));  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " ".equals(buffer.getName()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
104	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length  <  =  length)  {  break;  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length  <  =  length)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  null  ||  buffer.length  <  =  length)  {  break;  }	  if(deFAULT_ENCODING    ==    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
105	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length  <  len)  {  break;  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length  <  len)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  null  ||  buffer.length  <  len)  {  break;  }	  if(deFAULT_ENCODING    ==    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
106	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  len  <  0)  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  len  <  0)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  null  ||  len  <  0)  {  break;  }	  if(deFAULT_ENCODING    ==    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
107	[BUG]  [BUGGY]  validateName(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  validateName(buffer,  offset  +  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validateName(buffer,  offset  +  len);	  unwrap(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
108	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL	  continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
109	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL	  continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
110	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }	  continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
111	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_	  continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
112	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }	  continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
113	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }	  continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
114	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }	  continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
115	[BUG]  [BUGGY]  if(DEFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(DEFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(DEFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
116	[BUG]  [BUGGY]  if(buffer.equals(deFAULT_ENCODING))  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(buffer.equals(deFAULT_ENCODING))  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer.equals(deFAULT_ENCODING))  {  break;  }	  if(deFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
117	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  len,  0);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  encoding.decode(buffer,  offset,  len,  0);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  len,  0);	  return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
118	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  encoding. ");  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  encoding. ");  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  encoding. ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
119	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(encoding.getName()));  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(encoding.getName()));  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( " ".equals(encoding.getName()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
120	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(buffer.toString()));  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(buffer.toString()));  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( " ".equals(buffer.toString()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
121	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  1);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  1);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
122	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  len  -  1);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  len  -  1);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
123	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length);  return  encoding.decode(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length);  return  encoding.decode(buffer,  offset  +  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset  +  len,  0,  buffer.length);  return  encoding.decode(buffer,  offset  +  len);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
124	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  new  String(buffer,  offset  +  len  -  1);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  len  -  1);	  throw    new    IOException(   "   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
125	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  new  String(buffer,  offset  +  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  len);	  throw    new    IOException(   "   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
126	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  len  -  1,  len);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  return  new  String(buffer,  offset  +  len  -  1,  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  len  -  1,  len);	  throw    new    IOException(   "   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
127	[BUG]  [BUGGY]  encoding.decode(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  encoding.decode(buffer,  offset  +  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	encoding.decode(buffer,  offset  +  len);	  rethrowInternal();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
128	[BUG]  [BUGGY]  encoding.decodeName(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  encoding.decodeName(buffer,  offset  +  len);  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	encoding.decodeName(buffer,  offset  +  len);	  rethrowInternal();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
129	[BUG]  [BUGGY]  _reportUnsupportedOperation();  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  _reportUnsupportedOperation();  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	_reportUnsupportedOperation();	  rethrowInternal();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
130	[BUG]  [BUGGY]  if(encoding!=  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  break;  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(encoding!=  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding!=  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  break;  }	  if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
131	[BUG]  [BUGGY]  if(encoding!=  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  break;  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(encoding!=  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding!=  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  break;  }	  if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
132	[BUG]  [BUGGY]  if(encoding!=  null  ||  encoding.decode(buffer,  offset  +  len)>  0)  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(encoding!=  null  ||  encoding.decode(buffer,  offset  +  len)>  0)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding!=  null  ||  encoding.decode(buffer,  offset  +  len)>  0)  {  break;  }	  if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
133	[BUG]  [BUGGY]  if(deFAULT_ENCODING!=  null  &&  buffer.length  >  0)  {  break;  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING!=  null  &&  buffer.length  >  0)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING!=  null  &&  buffer.length  >  0)  {  break;  }	  if(deFAULT_ENCODING!=    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
134	[BUG]  [BUGGY]  if(deFAULT_ENCODING!=  null  ||  buffer.length  <  =  len)  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING!=  null  ||  buffer.length  <  =  len)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING!=  null  ||  buffer.length  <  =  len)  {  break;  }	  if(deFAULT_ENCODING!=    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
135	[BUG]  [BUGGY]  if(deFAULT_ENCODING!=  null  ||  buffer.length  <  =  length)  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {    [BUGGY]  if(deFAULT_ENCODING!=  null  ||  buffer.length  <  =  length)  {  break;  }  [BUGGY]    }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING!=  null  ||  buffer.length  <  =  length)  {  break;  }	  if(deFAULT_ENCODING!=    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
