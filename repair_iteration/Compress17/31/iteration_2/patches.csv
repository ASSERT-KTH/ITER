bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(encoding!=  null  ||  encoding.equals(buffer))  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding!=  null  ||  encoding.equals(buffer))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding!=  null  ||  encoding.equals(buffer))  {  break;  }	  if(encoding    ==    null    ||    encoding.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
2	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.equals(buffer,  offset  +  len))  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  ||  encoding.equals(buffer,  offset  +  len))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||  encoding.equals(buffer,  offset  +  len))  {  break;  }	  if(encoding    ==    null    ||    encoding.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
3	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.equals(buffer,  offset))  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  ||  encoding.equals(buffer,  offset))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||  encoding.equals(buffer,  offset))  {  break;  }	  if(encoding    ==    null    ||    encoding.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
4	[BUG]  [BUGGY]  if(encoding  ==  null  &&  encoding.equals(buffer))  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  &&  encoding.equals(buffer))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  &&  encoding.equals(buffer))  {  break;  }	  if(encoding    ==    null    ||    encoding.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
5	[BUG]  [BUGGY]  if(encoding!=  null  &&  encoding.equals(buffer))  {  break;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding!=  null  &&  encoding.equals(buffer))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding!=  null  &&  encoding.equals(buffer))  {  break;  }	  if(encoding    ==    null    ||    encoding.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
6	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  encoding.toString());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  encoding.toString());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( " "  +  encoding.toString());	  throw    new    IllegalStateException(   "   ".equals(buffer.toString()));    	non-compiled	[CE]  <identifier>  expected	120	None	replace
7	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ").equals(buffer.toString());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( " ").equals(buffer.toString());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( " ").equals(buffer.toString());	  throw    new    IllegalStateException(   "   ".equals(buffer.toString()));    	non-compiled	[CE]  <identifier>  expected	120	None	replace
8	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer.toString());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer.toString());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer.toString());	  throw    new    IllegalStateException(   "   ".equals(buffer.toString()));    	non-compiled	[CE]  <identifier>  expected	120	None	replace
9	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  encoding: "  +  buffer.toString());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  encoding: "  +  buffer.toString());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  encoding: "  +  buffer.toString());	  throw    new    IllegalStateException(   "   ".equals(buffer.toString()));    	non-compiled	[CE]  <identifier>  expected	120	None	replace
10	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_    	non-compiled	[CE]  <identifier>  expected	111	None	replace
11	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_    	non-compiled	[CE]  <identifier>  expected	111	None	replace
12	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_    	non-compiled	[CE]  <identifier>  expected	111	None	replace
13	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_    	non-compiled	[CE]  <identifier>  expected	111	None	replace
14	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_    	non-compiled	[CE]  <identifier>  expected	111	None	replace
15	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_    	non-compiled	[CE]  <identifier>  expected	111	None	replace
16	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_    	non-compiled	[CE]  <identifier>  expected	111	None	replace
17	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  length  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  length  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  length  -  1);	  return    new    String(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	124	None	replace
18	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  len  -  1,  length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  len  -  1,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  len  -  1,  length);	  return    new    String(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	124	None	replace
19	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  len  *  MIN_VALUE  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  len  *  MIN_VALUE  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  len  *  MIN_VALUE  -  1);	  return    new    String(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	124	None	replace
20	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  len  -  2);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  len  -  2);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  len  -  2);	  return    new    String(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	124	None	replace
21	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  len  *  2  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  len  *  2  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  len  *  2  -  1);	  return    new    String(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	124	None	replace
22	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  len  -  1],  length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  len  -  1],  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  len  -  1],  length);	  return    new    String(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	124	None	replace
23	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    	non-compiled	[CE]  <identifier>  expected	27	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    	non-compiled	[CE]  <identifier>  expected	27	None	replace
25	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    	non-compiled	[CE]  <identifier>  expected	27	None	replace
26	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    	non-compiled	[CE]  <identifier>  expected	27	None	replace
27	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    	non-compiled	[CE]  <identifier>  expected	27	None	replace
28	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    	non-compiled	[CE]  <identifier>  expected	27	None	replace
29	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    	non-compiled	[CE]  <identifier>  expected	27	None	replace
30	[BUG]  [BUGGY]  return  encoding.parseName(buffer,  offset  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parseName(buffer,  offset  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parseName(buffer,  offset  +  1);	  return    encoding.decode(buffer,    offset    +    1);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
31	[BUG]  [BUGGY]  return  encoding.parse(buffer,  offset  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parse(buffer,  offset  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parse(buffer,  offset  +  1);	  return    encoding.decode(buffer,    offset    +    1);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
32	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding.decode(buffer,  offset));  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding.decode(buffer,  offset));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " "  +  encoding.decode(buffer,  offset));	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    offset));    	non-compiled	[CE]  <identifier>  expected	91	None	replace
33	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding.getName());  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding.getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " "  +  encoding.getName());	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    offset));    	non-compiled	[CE]  <identifier>  expected	91	None	replace
34	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  len  + "  is  not  encoding. ");  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  len  + "  is  not  encoding. ");  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " "  +  len  + "  is  not  encoding. ");	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    offset));    	non-compiled	[CE]  <identifier>  expected	91	None	replace
35	[BUG]  [BUGGY]  ||  buffer.equals(DEFAULT_ENCODING))  {  break;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||  buffer.equals(DEFAULT_ENCODING))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||  buffer.equals(DEFAULT_ENCODING))  {  break;  }	  ||    DEFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
36	[BUG]  [BUGGY]  ||  buffer.equals(deFAULT_ENCODING))  {  break;  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||  buffer.equals(deFAULT_ENCODING))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||  buffer.equals(deFAULT_ENCODING))  {  break;  }	  ||    DEFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
37	[BUG]  [BUGGY]  ||  offset.equals(buffer))  {  break;  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||  offset.equals(buffer))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||  offset.equals(buffer))  {  break;  }	  ||    DEFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
38	[BUG]  [BUGGY]  ||  encoding.equals(buffer))  {  break;  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||  encoding.equals(buffer))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||  encoding.equals(buffer))  {  break;  }	  ||    DEFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
39	[BUG]  [BUGGY]  ||  DEFAULT_ENCODING.equals(encoding))  {  break;  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||  DEFAULT_ENCODING.equals(encoding))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||  DEFAULT_ENCODING.equals(encoding))  {  break;  }	  ||    DEFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
40	[BUG]  [BUGGY]  ||  len.equals(buffer))  {  break;  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||  len.equals(buffer))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||  len.equals(buffer))  {  break;  }	  ||    DEFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
41	[BUG]  [BUGGY]  ||  buffer.equals(definableEncoding))  {  break;  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||  buffer.equals(definableEncoding))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||  buffer.equals(definableEncoding))  {  break;  }	  ||    DEFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
42	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  deFAULT_ENCODING!=  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  deFAULT_ENCODING!=  FALLBACK_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  deFAULT_ENCODING!=  FALLBACK_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    FALLBACK_ENCODING    ||    deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
43	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  DEFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  DEFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  DEFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    FALLBACK_ENCODING    ||    deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
44	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  DEFAULT_ENCODING  ||  deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  DEFAULT_ENCODING  ||  deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  DEFAULT_ENCODING  ||  deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    FALLBACK_ENCODING    ||    deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
45	[BUG]  [BUGGY]  ||  deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||  deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||  deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    FALLBACK_ENCODING    ||    deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
46	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  DEFAULT_ENCODING  ||  deFAULT_ENCODING  ==  DEFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  DEFAULT_ENCODING  ||  deFAULT_ENCODING  ==  DEFAULT_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  DEFAULT_ENCODING  ||  deFAULT_ENCODING  ==  DEFAULT_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    FALLBACK_ENCODING    ||    deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
47	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  encoding: "  +  encoding.getName());  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  encoding: "  +  encoding.getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  encoding: "  +  encoding.getName());	  throw    new    IllegalStateException(   "   ".equals(encoding.getName()));    	non-compiled	[CE]  <identifier>  expected	119	None	replace
48	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  encoding.getName());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  encoding.getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( " "  +  encoding.getName());	  throw    new    IllegalStateException(   "   ".equals(encoding.getName()));    	non-compiled	[CE]  <identifier>  expected	119	None	replace
49	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  encoding.getName());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  encoding.getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  name: "  +  encoding.getName());	  throw    new    IllegalStateException(   "   ".equals(encoding.getName()));    	non-compiled	[CE]  <identifier>  expected	119	None	replace
50	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  encoding. "  +  encoding.getName());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  encoding. "  +  encoding.getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  encoding. "  +  encoding.getName());	  throw    new    IllegalStateException(   "   ".equals(encoding.getName()));    	non-compiled	[CE]  <identifier>  expected	119	None	replace
51	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  encoding  name: "  +  encoding.getName());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Unexpected  encoding  name: "  +  encoding.getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Unexpected  encoding  name: "  +  encoding.getName());	  throw    new    IllegalStateException(   "   ".equals(encoding.getName()));    	non-compiled	[CE]  <identifier>  expected	119	None	replace
52	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer  ==  null  ||  buffer.length  ==  0)  {  break;  }	  if(deFAULT_ENCODING!=    null    ||    buffer.length    ==    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
53	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer!=  null  ||  buffer.length  ==  0)  {  break;  }	  if(deFAULT_ENCODING!=    null    ||    buffer.length    ==    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
54	[BUG]  [BUGGY]  if(b  ==  null  ||  buffer.length  ==  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(b  ==  null  ||  buffer.length  ==  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(b  ==  null  ||  buffer.length  ==  0)  {  break;  }	  if(deFAULT_ENCODING!=    null    ||    buffer.length    ==    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
55	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length  <  =  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length  <  =  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  null  ||  buffer.length  <  =  0)  {  break;  }	  if(deFAULT_ENCODING!=    null    ||    buffer.length    ==    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
56	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length  ==  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length  ==  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  null  ||  buffer.length  ==  0)  {  break;  }	  if(deFAULT_ENCODING!=    null    ||    buffer.length    ==    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
57	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len  +  1);	  unwrap(buffer,    offset,    len    +    1);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
58	[BUG]  [BUGGY]  unwrap(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  unwrap(buffer,  offset,  length  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset,  length  +  1);	  unwrap(buffer,    offset,    len    +    1);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
59	[BUG]  [BUGGY]  parseName(buffer,  offset,  len  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parseName(buffer,  offset,  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parseName(buffer,  offset,  len  +  1);	  unwrap(buffer,    offset,    len    +    1);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
60	[BUG]  [BUGGY]  validate(buffer,  offset,  len  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validate(buffer,  offset,  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validate(buffer,  offset,  len  +  1);	  unwrap(buffer,    offset,    len    +    1);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
61	[BUG]  [BUGGY]  unwrap(buffer,  offset,  len  +  1,  length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  unwrap(buffer,  offset,  len  +  1,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset,  len  +  1,  length);	  unwrap(buffer,    offset,    len    +    1);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
62	[BUG]  [BUGGY]  parse(buffer,  offset,  len  +  1);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parse(buffer,  offset,  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parse(buffer,  offset,  len  +  1);	  unwrap(buffer,    offset,    len    +    1);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
63	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  length);	  unwrap(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
64	[BUG]  [BUGGY]  unwrap(buffer,  offset  +  length,  len);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  unwrap(buffer,  offset  +  length,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset  +  length,  len);	  unwrap(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
65	[BUG]  [BUGGY]  unwrap(buffer,  offset  +  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  unwrap(buffer,  offset  +  length,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset  +  length,  buffer.length);	  unwrap(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
66	[BUG]  [BUGGY]  rehashIdentifier();  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rehashIdentifier();  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rehashIdentifier();	  rehashInternal();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
67	[BUG]  [BUGGY]  rehashNumber();  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rehashNumber();  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rehashNumber();	  rehashInternal();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
68	[BUG]  [BUGGY]  rehashDelimiter();  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rehashDelimiter();  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rehashDelimiter();	  rehashInternal();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
69	[BUG]  [BUGGY]  rehashIdentifiers();  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rehashIdentifiers();  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rehashIdentifiers();	  rehashInternal();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
70	[BUG]  [BUGGY]  rehashName();  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rehashName();  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rehashName();	  rehashInternal();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
71	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len  -  1);	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
72	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  length);	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
73	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  1);	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
74	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  1,  len);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  1,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  1,  len);	  System.arraycopy(buffer,    offset,    buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
75	[BUG]  [BUGGY]  if(deFAULT_ENCODING.equals(buffer,  offset  +  len))  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING.equals(buffer,  offset  +  len))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING.equals(buffer,  offset  +  len))  {  break;  }	  if(deFAULT_ENCODING.equals(buffer,    offset))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
76	[BUG]  [BUGGY]  if(encoding.equals(buffer,  offset))  {  break;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding.equals(buffer,  offset))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding.equals(buffer,  offset))  {  break;  }	  if(deFAULT_ENCODING.equals(buffer,    offset))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
77	[BUG]  [BUGGY]  if(!deFAULT_ENCODING.equals(buffer,  offset))  {  break;  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!deFAULT_ENCODING.equals(buffer,  offset))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!deFAULT_ENCODING.equals(buffer,  offset))  {  break;  }	  if(deFAULT_ENCODING.equals(buffer,    offset))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
78	[BUG]  [BUGGY]  ||  DEFAULT_ENCODING.equals(buffer,  offset))  {  break;  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||  DEFAULT_ENCODING.equals(buffer,  offset))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||  DEFAULT_ENCODING.equals(buffer,  offset))  {  break;  }	  if(deFAULT_ENCODING.equals(buffer,    offset))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
79	[BUG]  [BUGGY]  if(deFAULT_ENCODING.equals(buffer,  offset  +  length))  {  break;  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING.equals(buffer,  offset  +  length))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING.equals(buffer,  offset  +  length))  {  break;  }	  if(deFAULT_ENCODING.equals(buffer,    offset))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
80	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding.toString());  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding.toString());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " "  +  encoding.toString());	  throw    new    IllegalArgumentException(   "   ".equals(buffer.toString()));    	non-compiled	[CE]  <identifier>  expected	102	None	replace
81	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equals(buffer.toString());  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " ").equals(buffer.toString());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " ").equals(buffer.toString());	  throw    new    IllegalArgumentException(   "   ".equals(buffer.toString()));    	non-compiled	[CE]  <identifier>  expected	102	None	replace
82	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  len.toString());  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  len.toString());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " "  +  len.toString());	  throw    new    IllegalArgumentException(   "   ".equals(buffer.toString()));    	non-compiled	[CE]  <identifier>  expected	102	None	replace
83	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  name: "  +  buffer.toString());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  name: "  +  buffer.toString());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  name: "  +  buffer.toString());	  throw    new    IllegalArgumentException(   "   ".equals(buffer.toString()));    	non-compiled	[CE]  <identifier>  expected	102	None	replace
84	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(buffer.getName());  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(buffer.getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(buffer.getName());	  throw    new    IllegalArgumentException(   "   ".equals(buffer.getName()));    	non-compiled	[CE]  <identifier>  expected	103	None	replace
85	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  name: "  +  buffer.getName());  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  name: "  +  buffer.getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  name: "  +  buffer.getName());	  throw    new    IllegalArgumentException(   "   ".equals(buffer.getName()));    	non-compiled	[CE]  <identifier>  expected	103	None	replace
86	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  encoding: "  +  buffer.getName());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  encoding: "  +  buffer.getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  encoding: "  +  buffer.getName());	  throw    new    IllegalArgumentException(   "   ".equals(buffer.getName()));    	non-compiled	[CE]  <identifier>  expected	103	None	replace
87	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding.decode(buffer,  offset  +  len));  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding.decode(buffer,  offset  +  len));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " "  +  encoding.decode(buffer,  offset  +  len));	  throw    new    IllegalArgumentException(   "   ".equals(buffer.length));    	non-compiled	[CE]  <identifier>  expected	53	None	replace
88	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  len  + ": "  +  buffer.length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  len  + ": "  +  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " "  +  len  + ": "  +  buffer.length);	  throw    new    IllegalArgumentException(   "   ".equals(buffer.length));    	non-compiled	[CE]  <identifier>  expected	53	None	replace
89	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  getMessage());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  getMessage());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " "  +  getMessage());	  throw    new    IllegalArgumentException(   "   ".equals(buffer.length));    	non-compiled	[CE]  <identifier>  expected	53	None	replace
90	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL    	non-compiled	[CE]  <identifier>  expected	109	None	replace
91	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL    	non-compiled	[CE]  <identifier>  expected	109	None	replace
92	[BUG]  [BUGGY]  if(encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL    	non-compiled	[CE]  <identifier>  expected	109	None	replace
93	[BUG]  [BUGGY]  if(!deFAULT_ENCODING.equals(encoding))  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!deFAULT_ENCODING.equals(encoding))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!deFAULT_ENCODING.equals(encoding))  {  break;  }	  if(!deFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
94	[BUG]  [BUGGY]  ||!deFAULT_ENCODING.equals(buffer))  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||!deFAULT_ENCODING.equals(buffer))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||!deFAULT_ENCODING.equals(buffer))  {  break;  }	  if(!deFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
95	[BUG]  [BUGGY]  if(!encoding.equals(buffer))  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.equals(buffer))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.equals(buffer))  {  break;  }	  if(!deFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
96	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  len,  0,  len);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  len,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  len,  0,  len);	  System.arraycopy(buffer,    offset,    bytes,    0,    len);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
97	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  bytes,  0,  len);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  bytes,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  encoding,  bytes,  0,  len);	  System.arraycopy(buffer,    offset,    bytes,    0,    len);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
98	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  len);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  encoding,  0,  len);	  System.arraycopy(buffer,    offset,    bytes,    0,    len);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
99	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  chars,  0,  len);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  chars,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  chars,  0,  len);	  System.arraycopy(buffer,    offset,    bytes,    0,    len);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
100	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  encoding: "  +  encoding.getName());  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  encoding: "  +  encoding.getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  encoding: "  +  encoding.getName());	  throw    new    IllegalArgumentException(   "   ".equals(encoding.getName()));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
101	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(encoding.getName()));  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(encoding.getName()));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(encoding.getName()));	  throw    new    IllegalArgumentException(   "   ".equals(encoding.getName()));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
102	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(encoding.getName());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(encoding.getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(encoding.getName());	  throw    new    IllegalArgumentException(   "   ".equals(encoding.getName()));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
103	[BUG]  [BUGGY]  validate(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validate(buffer,  offset,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validate(buffer,  offset,  length);	  validate(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
104	[BUG]  [BUGGY]  validate(buffer,  offset,  len,  encoding);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validate(buffer,  offset,  len,  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validate(buffer,  offset,  len,  encoding);	  validate(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
105	[BUG]  [BUGGY]  validate(buffer,  offset,  len  -  1);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validate(buffer,  offset,  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validate(buffer,  offset,  len  -  1);	  validate(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
106	[BUG]  [BUGGY]  validate(buffer,  offset,  0,  len);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validate(buffer,  offset,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validate(buffer,  offset,  0,  len);	  validate(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
107	[BUG]  [BUGGY]  validate(buffer,  offset,  len,  length);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validate(buffer,  offset,  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validate(buffer,  offset,  len,  length);	  validate(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
108	[BUG]  [BUGGY]  validate(buffer,  offset,  len,  buffer.length);  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validate(buffer,  offset,  len,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validate(buffer,  offset,  len,  buffer.length);	  validate(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
109	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len  +  1);	  System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
110	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  length);	  System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
111	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buf,  0,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buf,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buf,  0,  len);	  System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
112	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  byte,  0,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  byte,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  byte,  0,  len);	  System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
113	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
114	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
115	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
116	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
117	[BUG]  [BUGGY]  ||(deFAULT_ENCODING!=  null  &&  buffer.length  >  0)||(deFAULT_FALLBACK_ENCODING.equals(encoding)))  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(deFAULT_ENCODING!=  null  &&  buffer.length  >  0)||(deFAULT_FALLBACK_ENCODING.equals(encoding)))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(deFAULT_ENCODING!=  null  &&  buffer.length  >  0)||(deFAULT_FALLBACK_ENCODING.equals(encoding)))  {  break;  }	  ||(deFAULT_ENCODING!=    null    &&    buffer.length    >    0)||(deFAULT_ENCODING.equals(encoding)))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
118	[BUG]  [BUGGY]  ||(buffer!=  null  &&  buffer.length  >  0)||(deFAULT_ENCODING.equals(encoding)))  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer!=  null  &&  buffer.length  >  0)||(deFAULT_ENCODING.equals(encoding)))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer!=  null  &&  buffer.length  >  0)||(deFAULT_ENCODING.equals(encoding)))  {  break;  }	  ||(deFAULT_ENCODING!=    null    &&    buffer.length    >    0)||(deFAULT_ENCODING.equals(encoding)))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
119	[BUG]  [BUGGY]  ||(buffer.length!=  0)&&(deFAULT_ENCODING.equals(encoding)))  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer.length!=  0)&&(deFAULT_ENCODING.equals(encoding)))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer.length!=  0)&&(deFAULT_ENCODING.equals(encoding)))  {  break;  }	  ||(deFAULT_ENCODING!=    null    &&    buffer.length    >    0)||(deFAULT_ENCODING.equals(encoding)))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
120	[BUG]  [BUGGY]  ||(buffer.length!=  0  &&  deFAULT_ENCODING.equals(encoding)))  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer.length!=  0  &&  deFAULT_ENCODING.equals(encoding)))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer.length!=  0  &&  deFAULT_ENCODING.equals(encoding)))  {  break;  }	  ||(deFAULT_ENCODING!=    null    &&    buffer.length    >    0)||(deFAULT_ENCODING.equals(encoding)))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
121	[BUG]  [BUGGY]  ||(buffer.length!=  0  &&  DEFAULT_ENCODING.equals(encoding)))  {  break;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer.length!=  0  &&  DEFAULT_ENCODING.equals(encoding)))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer.length!=  0  &&  DEFAULT_ENCODING.equals(encoding)))  {  break;  }	  ||(deFAULT_ENCODING!=    null    &&    buffer.length    >    0)||(deFAULT_ENCODING.equals(encoding)))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
122	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  length  -  1,  len);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  length  -  1,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  length  -  1,  len);	  return    new    String(buffer,    offset    +    len    -    1,    len);    	non-compiled	[CE]  <identifier>  expected	126	None	replace
123	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  len  -  1,  buffer.length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  len  -  1,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  len  -  1,  buffer.length);	  return    new    String(buffer,    offset    +    len    -    1,    len);    	non-compiled	[CE]  <identifier>  expected	126	None	replace
124	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  len  *  1,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  len  *  1,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  len  *  1,  len);	  return    new    String(buffer,    offset    +    len    -    1,    len);    	non-compiled	[CE]  <identifier>  expected	126	None	replace
125	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  len  /  1,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  len  /  1,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  len  /  1,  len);	  return    new    String(buffer,    offset    +    len    -    1,    len);    	non-compiled	[CE]  <identifier>  expected	126	None	replace
126	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  len  -  1,  size  -  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  len  -  1,  size  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  len  -  1,  size  -  1);	  return    new    String(buffer,    offset    +    len    -    1,    len);    	non-compiled	[CE]  <identifier>  expected	126	None	replace
127	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  len  -  1,  end);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  len  -  1,  end);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  len  -  1,  end);	  return    new    String(buffer,    offset    +    len    -    1,    len);    	non-compiled	[CE]  <identifier>  expected	126	None	replace
128	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
129	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  length  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  length  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  length  +  1);	  return    encoding.decode(buffer,    offset    +    len    +    1);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
130	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len  +  1,  length);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  len  +  1,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len  +  1,  length);	  return    encoding.decode(buffer,    offset    +    len    +    1);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
131	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len  +  2);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  len  +  2);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len  +  2);	  return    encoding.decode(buffer,    offset    +    len    +    1);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
132	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len  *  1  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  len  *  1  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len  *  1  +  1);	  return    encoding.decode(buffer,    offset    +    len    +    1);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
133	[BUG]  [BUGGY]  return  buffer.decode(buffer,  offset  +  len  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  buffer.decode(buffer,  offset  +  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  buffer.decode(buffer,  offset  +  len  +  1);	  return    encoding.decode(buffer,    offset    +    len    +    1);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
134	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len  *  2  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  len  *  2  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len  *  2  +  1);	  return    encoding.decode(buffer,    offset    +    len    +    1);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
135	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len,  0,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  len,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len,  0,  len);	  return    encoding.decode(buffer,    offset    +    len,    len);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
136	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len,  start,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  len,  start,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len,  start,  len);	  return    encoding.decode(buffer,    offset    +    len,    len);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
137	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len,  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  len,  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len,  1);	  return    encoding.decode(buffer,    offset    +    len,    len);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
138	[BUG]  [BUGGY]  return  buffer.decode(buffer,  offset  +  len,  length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  buffer.decode(buffer,  offset  +  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  buffer.decode(buffer,  offset  +  len,  length);	  return    encoding.decode(buffer,    offset    +    len,    len);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
139	[BUG]  [BUGGY]  ||(buffer.length  ==  0)&&(deFAULT_ENCODING.equals(encoding)))  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer.length  ==  0)&&(deFAULT_ENCODING.equals(encoding)))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer.length  ==  0)&&(deFAULT_ENCODING.equals(encoding)))  {  break;  }	  ||(deFAULT_ENCODING    ==    null    &&    buffer.length    >    0)||(deFAULT_ENCODING.equals(encoding)))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
140	[BUG]  [BUGGY]  ||(buffer.length  ==  0  &&  deFAULT_ENCODING.equals(encoding)))  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer.length  ==  0  &&  deFAULT_ENCODING.equals(encoding)))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer.length  ==  0  &&  deFAULT_ENCODING.equals(encoding)))  {  break;  }	  ||(deFAULT_ENCODING    ==    null    &&    buffer.length    >    0)||(deFAULT_ENCODING.equals(encoding)))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
141	[BUG]  [BUGGY]  ||(buffer.length  ==  0  &&  DEFAULT_ENCODING.equals(encoding)))  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer.length  ==  0  &&  DEFAULT_ENCODING.equals(encoding)))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer.length  ==  0  &&  DEFAULT_ENCODING.equals(encoding)))  {  break;  }	  ||(deFAULT_ENCODING    ==    null    &&    buffer.length    >    0)||(deFAULT_ENCODING.equals(encoding)))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
142	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer  ==  null  ||  buffer.length  <  0)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    buffer.length    <    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
143	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer!=  null  ||  buffer.length  <  0)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    buffer.length    <    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
144	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length  >=  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length  >=  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  null  ||  buffer.length  >=  0)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    buffer.length    <    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
145	[BUG]  [BUGGY]  if(b  ==  null  ||  buffer.length  <  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(b  ==  null  ||  buffer.length  <  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(b  ==  null  ||  buffer.length  <  0)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    buffer.length    <    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
146	[BUG]  [BUGGY]  if(encoding  ==  null  ||  buffer.length  <  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  ||  buffer.length  <  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||  buffer.length  <  0)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    buffer.length    <    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
147	[BUG]  [BUGGY]  if(encoding!=  null  &&  encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding!=  null  &&  encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding!=  null  &&  encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  break;  }	  if(encoding!=    null    ||    encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
148	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  break;  }	  if(encoding!=    null    ||    encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
149	[BUG]  [BUGGY]  if(encoding  ==  null  &&  encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  &&  encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  &&  encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  break;  }	  if(encoding!=    null    ||    encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
150	[BUG]  [BUGGY]  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||  encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  break;  }	  if(encoding!=    null    ||    encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
151	[BUG]  [BUGGY]  parseName(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parseName(buffer,  offset  +  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parseName(buffer,  offset  +  length);	  parseName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
152	[BUG]  [BUGGY]  parseName(buffer,  offset  +  len,  length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parseName(buffer,  offset  +  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parseName(buffer,  offset  +  len,  length);	  parseName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
153	[BUG]  [BUGGY]  parseName(buffer,  offset  +  1);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parseName(buffer,  offset  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parseName(buffer,  offset  +  1);	  parseName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
154	[BUG]  [BUGGY]  parseName(buffer,  offset  +  1,  len);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parseName(buffer,  offset  +  1,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parseName(buffer,  offset  +  1,  len);	  parseName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
155	[BUG]  [BUGGY]  parseName(buffer,  offset  +  len,  encoding);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parseName(buffer,  offset  +  len,  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parseName(buffer,  offset  +  len,  encoding);	  parseName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
156	[BUG]  [BUGGY]  parseName(buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parseName(buffer,  offset  +  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parseName(buffer,  offset  +  len  -  1);	  parseName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
157	[BUG]  [BUGGY]  ||(buffer!=  null  &&  buffer.length  >  0))  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer!=  null  &&  buffer.length  >  0))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer!=  null  &&  buffer.length  >  0))  {  break;  }	  ||(deFAULT_ENCODING!=    null    &&    buffer.length    >    0))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
158	[BUG]  [BUGGY]  ||(buffer.length!=  0  &&  defULT_ENCODING.length  >  0))  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer.length!=  0  &&  defULT_ENCODING.length  >  0))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer.length!=  0  &&  defULT_ENCODING.length  >  0))  {  break;  }	  ||(deFAULT_ENCODING!=    null    &&    buffer.length    >    0))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
159	[BUG]  [BUGGY]  ||(buffer  ==  null  &&  buffer.length  >  0))  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer  ==  null  &&  buffer.length  >  0))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer  ==  null  &&  buffer.length  >  0))  {  break;  }	  ||(deFAULT_ENCODING!=    null    &&    buffer.length    >    0))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
160	[BUG]  [BUGGY]  ||(buffer.length!=  0  &&  deFAULT_ENCODING.length  >  0))  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer.length!=  0  &&  deFAULT_ENCODING.length  >  0))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer.length!=  0  &&  deFAULT_ENCODING.length  >  0))  {  break;  }	  ||(deFAULT_ENCODING!=    null    &&    buffer.length    >    0))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
161	[BUG]  [BUGGY]  ||(buffer.length!=  0  &&  buffer.length  >  0))  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer.length!=  0  &&  buffer.length  >  0))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer.length!=  0  &&  buffer.length  >  0))  {  break;  }	  ||(deFAULT_ENCODING!=    null    &&    buffer.length    >    0))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
162	[BUG]  [BUGGY]  ||(buffer.length!=  0  &&  defULT_ENCODING.equals(encoding)))  {  break;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer.length!=  0  &&  defULT_ENCODING.equals(encoding)))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer.length!=  0  &&  defULT_ENCODING.equals(encoding)))  {  break;  }	  ||(deFAULT_ENCODING!=    null    &&    buffer.length    >    0))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
163	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  &&  deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  &&  deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  &&  deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    FALLBACK_ENCODING    ||    deFAULT_ENCODING    ==    FALLBACK_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
164	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  DEFAULT_ENCODING!=  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  DEFAULT_ENCODING!=  FALLBACK_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  DEFAULT_ENCODING!=  FALLBACK_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    FALLBACK_ENCODING    ||    deFAULT_ENCODING    ==    FALLBACK_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
165	[BUG]  [BUGGY]  if(deFAULT_ENCODING!=  FALLBACK_ENCODING  ||  deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING!=  FALLBACK_ENCODING  ||  deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING!=  FALLBACK_ENCODING  ||  deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    FALLBACK_ENCODING    ||    deFAULT_ENCODING    ==    FALLBACK_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
166	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  1);  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  1);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  1);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    1);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
167	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  1,  length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  1,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  1,  length);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    1);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
168	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  1);  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  1);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  1);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    1);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
169	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  2);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  2);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  2);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    1);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
170	[BUG]  [BUGGY]  unwrap(buffer,  offset  +  length  -  1);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  unwrap(buffer,  offset  +  length  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset  +  length  -  1);	  unwrap(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
171	[BUG]  [BUGGY]  unwrap(buffer,  offset  +  len  -  1,  length);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  unwrap(buffer,  offset  +  len  -  1,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset  +  len  -  1,  length);	  unwrap(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
172	[BUG]  [BUGGY]  parse(buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parse(buffer,  offset  +  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parse(buffer,  offset  +  len  -  1);	  unwrap(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
173	[BUG]  [BUGGY]  validate(buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validate(buffer,  offset  +  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validate(buffer,  offset  +  len  -  1);	  unwrap(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
174	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding.decode(buffer));  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding.decode(buffer));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " "  +  encoding.decode(buffer));	  throw    new    IllegalArgumentException(   "   ".equals(buffer);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
175	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer));  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " ".equals(buffer));	  throw    new    IllegalArgumentException(   "   ".equals(buffer);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
176	[BUG]  [BUGGY]  ||(offset  ==  FALLBACK_ENCODING))  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(offset  ==  FALLBACK_ENCODING))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(offset  ==  FALLBACK_ENCODING))  {  break;  }	  ||(deFAULT_ENCODING    ==    FALLBACK_ENCODING))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
177	[BUG]  [BUGGY]  ||(len  ==  FALLBACK_ENCODING))  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(len  ==  FALLBACK_ENCODING))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(len  ==  FALLBACK_ENCODING))  {  break;  }	  ||(deFAULT_ENCODING    ==    FALLBACK_ENCODING))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
178	[BUG]  [BUGGY]  ||(length  ==  FALLBACK_ENCODING))  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(length  ==  FALLBACK_ENCODING))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(length  ==  FALLBACK_ENCODING))  {  break;  }	  ||(deFAULT_ENCODING    ==    FALLBACK_ENCODING))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
179	[BUG]  [BUGGY]  ||(encoding  ==  FALLBACK_ENCODING))  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(encoding  ==  FALLBACK_ENCODING))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(encoding  ==  FALLBACK_ENCODING))  {  break;  }	  ||(deFAULT_ENCODING    ==    FALLBACK_ENCODING))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
180	[BUG]  [BUGGY]  ||(deFAULT_ENCODING  ==  FALLBACK_ENCODING,  len))  {  break;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(deFAULT_ENCODING  ==  FALLBACK_ENCODING,  len))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(deFAULT_ENCODING  ==  FALLBACK_ENCODING,  len))  {  break;  }	  ||(deFAULT_ENCODING    ==    FALLBACK_ENCODING))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
181	[BUG]  [BUGGY]  ||(deFAULT_ENCODING  ==  FALLBACK_ENCODING)&&  offset  <  len)  {  break;  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(deFAULT_ENCODING  ==  FALLBACK_ENCODING)&&  offset  <  len)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(deFAULT_ENCODING  ==  FALLBACK_ENCODING)&&  offset  <  len)  {  break;  }	  ||(deFAULT_ENCODING    ==    FALLBACK_ENCODING))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
182	[BUG]  [BUGGY]  if(encoding!=  null  &&  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding!=  null  &&  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding!=  null  &&  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  break;  }	  if(encoding!=    null    ||    encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
183	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  break;  }	  if(encoding!=    null    ||    encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
184	[BUG]  [BUGGY]  if(encoding  ==  null  &&  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  &&  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  &&  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  break;  }	  if(encoding!=    null    ||    encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
185	[BUG]  [BUGGY]  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  break;  }	  if(encoding!=    null    ||    encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
186	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_FIELD_NAME))  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_FIELD_NAME))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_FIELD_NAME))  {  break;  }	  if(encoding    ==    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
187	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.decode(buffer,  offset  +  len))  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  ||  encoding.decode(buffer,  offset  +  len))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||  encoding.decode(buffer,  offset  +  len))  {  break;  }	  if(encoding    ==    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
188	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NULL_OBJECT))  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NULL_OBJECT))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NULL_OBJECT))  {  break;  }	  if(encoding    ==    null)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
189	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  continue;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  continue;  }	  if(encoding    ==    null)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
190	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_FIELD_NAME))  {  continue;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_FIELD_NAME))  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_FIELD_NAME))  {  continue;  }	  if(encoding    ==    null)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
191	[BUG]  [BUGGY]  if(encoding  ==  null)  {  continue  String.valueOf(buffer,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null)  {  continue  String.valueOf(buffer,  offset  +  len);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null)  {  continue  String.valueOf(buffer,  offset  +  len);  }	  if(encoding    ==    null)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
192	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.decode(buffer,  offset  +  len))  {  continue;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  ||  encoding.decode(buffer,  offset  +  len))  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||  encoding.decode(buffer,  offset  +  len))  {  continue;  }	  if(encoding    ==    null)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
193	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NULL_OBJECT))  {  continue;  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NULL_OBJECT))  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NULL_OBJECT))  {  continue;  }	  if(encoding    ==    null)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
194	[BUG]  [BUGGY]  handleMissingName(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  handleMissingName(buffer,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	handleMissingName(buffer,  offset  +  len);	  handleMissingName();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
195	[BUG]  [BUGGY]  handleMissingName(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  handleMissingName(buffer,  offset,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	handleMissingName(buffer,  offset,  len);	  handleMissingName();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
196	[BUG]  [BUGGY]  handleMissingName(buffer);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  handleMissingName(buffer);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	handleMissingName(buffer);	  handleMissingName();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
197	[BUG]  [BUGGY]  handleMissingName(buffer,  offset);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  handleMissingName(buffer,  offset);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	handleMissingName(buffer,  offset);	  handleMissingName();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
198	[BUG]  [BUGGY]  handleMissingName(buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  handleMissingName(buffer,  offset  +  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	handleMissingName(buffer,  offset  +  len  -  1);	  handleMissingName();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
199	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " "  +  encoding);	  throw    new    IllegalArgumentException(   "   ".equals(encoding));    	non-compiled	[CE]  <identifier>  expected	56	None	replace
200	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding.equals(buffer));  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding.equals(buffer));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " "  +  encoding.equals(buffer));	  throw    new    IllegalArgumentException(   "   ".equals(encoding));    	non-compiled	[CE]  <identifier>  expected	56	None	replace
201	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  encoding: "  +  encoding);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  encoding: "  +  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  encoding: "  +  encoding);	  throw    new    IllegalArgumentException(   "   ".equals(encoding));    	non-compiled	[CE]  <identifier>  expected	56	None	replace
202	[BUG]  [BUGGY]  return  encoding.parse(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parse(buffer,  offset,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parse(buffer,  offset,  length);	  return    encoding.parse(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
203	[BUG]  [BUGGY]  return  encoding.parse(buffer,  offset,  len,  length);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parse(buffer,  offset,  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parse(buffer,  offset,  len,  length);	  return    encoding.parse(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
204	[BUG]  [BUGGY]  return  encoding.parse(buffer,  offset,  len  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parse(buffer,  offset,  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parse(buffer,  offset,  len  +  1);	  return    encoding.parse(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
205	[BUG]  [BUGGY]  return  encoding.parse(buffer,  offset,  len,  buffer.length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parse(buffer,  offset,  len,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parse(buffer,  offset,  len,  buffer.length);	  return    encoding.parse(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
206	[BUG]  [BUGGY]  return  encoding.parseName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parseName(buffer,  offset,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parseName(buffer,  offset,  length);	  return    encoding.parse(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
207	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len,  0,  length);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  len,  0,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len,  0,  length);	  return    encoding.decode(buffer,    offset    +    len,    length);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
208	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  length,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  length,  buffer.length);	  return    encoding.decode(buffer,    offset    +    len,    length);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
209	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  len,  length,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len,  length,  buffer.length);	  return    encoding.decode(buffer,    offset    +    len,    length);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
210	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len,  start,  length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  len,  start,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len,  start,  length);	  return    encoding.decode(buffer,    offset    +    len,    length);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
211	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  1,  length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  1,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  1,  length);	  return    encoding.decode(buffer,    offset    +    len,    length);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
212	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset  +  len,  0,  buffer.length  -  1);	  System.arraycopy(buffer,    offset    +    len,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
213	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length  -  offset);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length  -  offset);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset  +  len,  0,  buffer.length  -  offset);	  System.arraycopy(buffer,    offset    +    len,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
214	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset  +  length,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset  +  length,  buffer,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset  +  length,  buffer,  0,  len);	  System.arraycopy(buffer,    offset    +    len,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
215	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset  +  length,  buffer,  0,  len.length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset  +  length,  buffer,  0,  len.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset  +  length,  buffer,  0,  len.length);	  System.arraycopy(buffer,    offset    +    len,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
216	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset  +  len,  0,  buffer.length  +  1);	  System.arraycopy(buffer,    offset    +    len,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
217	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length  -  length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length  -  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset  +  len,  0,  buffer.length  -  length);	  System.arraycopy(buffer,    offset    +    len,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
218	[BUG]  [BUGGY]  validateName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validateName(buffer,  offset,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validateName(buffer,  offset,  length);	  validateName(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
219	[BUG]  [BUGGY]  validateName(buffer,  offset,  len,  encoding);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validateName(buffer,  offset,  len,  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validateName(buffer,  offset,  len,  encoding);	  validateName(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
220	[BUG]  [BUGGY]  validateName(buffer,  offset,  len  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validateName(buffer,  offset,  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validateName(buffer,  offset,  len  +  1);	  validateName(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
221	[BUG]  [BUGGY]  validateName(buffer,  offset,  len  -  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validateName(buffer,  offset,  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validateName(buffer,  offset,  len  -  1);	  validateName(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
222	[BUG]  [BUGGY]  validateName(buffer,  offset,  0,  len);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validateName(buffer,  offset,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validateName(buffer,  offset,  0,  len);	  validateName(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
223	[BUG]  [BUGGY]  validateName(buffer,  offset,  len,  length);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validateName(buffer,  offset,  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validateName(buffer,  offset,  len,  length);	  validateName(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
224	[BUG]  [BUGGY]  if(buffer.equals(encoding))  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer.equals(encoding))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer.equals(encoding))  {  break;  }	  if(buffer.equals(deFAULT_ENCODING))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
225	[BUG]  [BUGGY]  if(!buffer.equals(deFAULT_ENCODING))  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!buffer.equals(deFAULT_ENCODING))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!buffer.equals(deFAULT_ENCODING))  {  break;  }	  if(buffer.equals(deFAULT_ENCODING))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
226	[BUG]  [BUGGY]  if(!buffer.equals(encoding))  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!buffer.equals(encoding))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!buffer.equals(encoding))  {  break;  }	  if(buffer.equals(deFAULT_ENCODING))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
227	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len  +  1);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len  +  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
228	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len  -  1);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len  -  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
229	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
230	[BUG]  [BUGGY]  rethrowAsIOException( " ",  len);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rethrowAsIOException( " ",  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rethrowAsIOException( " ",  len);	  rethrowAsIOException(   "   ");    	non-compiled	[CE]  <identifier>  expected	41	None	replace
231	[BUG]  [BUGGY]  rethrowAsIOException( ", ");  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rethrowAsIOException( ", ");  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rethrowAsIOException( ", ");	  rethrowAsIOException(   "   ");    	non-compiled	[CE]  <identifier>  expected	41	None	replace
232	[BUG]  [BUGGY]  acceptAsIOException( " ");  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  acceptAsIOException( " ");  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	acceptAsIOException( " ");	  rethrowAsIOException(   "   ");    	non-compiled	[CE]  <identifier>  expected	41	None	replace
233	[BUG]  [BUGGY]  unwrap(buffer,  offset  +  len,  length,  encoding);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  unwrap(buffer,  offset  +  len,  length,  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset  +  len,  length,  encoding);	  unwrap(buffer,    offset    +    len,    length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
234	[BUG]  [BUGGY]  unwrap(buffer,  offset  +  len,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  unwrap(buffer,  offset  +  len,  length,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset  +  len,  length,  buffer.length);	  unwrap(buffer,    offset    +    len,    length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
235	[BUG]  [BUGGY]  unwrap(buffer,  offset  +  len,  length  -  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  unwrap(buffer,  offset  +  len,  length  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset  +  len,  length  -  1);	  unwrap(buffer,    offset    +    len,    length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
236	[BUG]  [BUGGY]  unwrap(buffer,  offset  +  len,  start,  length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  unwrap(buffer,  offset  +  len,  start,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset  +  len,  start,  length);	  unwrap(buffer,    offset    +    len,    length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
237	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  length,  len);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  length,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  length,  len);	  return    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
238	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  length,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  length,  buffer.length);	  return    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
239	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  length  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  length  +  1);	  return    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
240	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  0,  length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  0,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  0,  length);	  return    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
241	[BUG]  [BUGGY]  if(deFAULT_ENCODING.equals(buffer)&&  buffer.length!=  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING.equals(buffer)&&  buffer.length!=  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING.equals(buffer)&&  buffer.length!=  0)  {  break;  }	  if(deFAULT_ENCODING.equals(buffer)||    buffer.length!=    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
242	[BUG]  [BUGGY]  if(buffer.length.equals(deFAULT_ENCODING)||  buffer.length!=  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer.length.equals(deFAULT_ENCODING)||  buffer.length!=  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer.length.equals(deFAULT_ENCODING)||  buffer.length!=  0)  {  break;  }	  if(deFAULT_ENCODING.equals(buffer)||    buffer.length!=    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
243	[BUG]  [BUGGY]  if(deFAULT_ENCODING.equals(buffer)||  buffer.length  >  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING.equals(buffer)||  buffer.length  >  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING.equals(buffer)||  buffer.length  >  0)  {  break;  }	  if(deFAULT_ENCODING.equals(buffer)||    buffer.length!=    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
244	[BUG]  [BUGGY]  if(encoding.equals(buffer)||  buffer.length!=  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding.equals(buffer)||  buffer.length!=  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding.equals(buffer)||  buffer.length!=  0)  {  break;  }	  if(deFAULT_ENCODING.equals(buffer)||    buffer.length!=    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
245	[BUG]  [BUGGY]  if(deFAULT_ENCODING.equals(buffer)||  buffer.length  >=  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING.equals(buffer)||  buffer.length  >=  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING.equals(buffer)||  buffer.length  >=  0)  {  break;  }	  if(deFAULT_ENCODING.equals(buffer)||    buffer.length!=    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
246	[BUG]  [BUGGY]  ||!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
247	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
248	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
249	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  length  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  length  -  1);	  return    encoding.decode(buffer,    offset,    len    -    1);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
250	[BUG]  [BUGGY]  return  buffer.decode(encoding,  offset,  len  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  buffer.decode(encoding,  offset,  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  buffer.decode(encoding,  offset,  len  -  1);	  return    encoding.decode(buffer,    offset,    len    -    1);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
251	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  0,  len  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  0,  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  0,  len  -  1);	  return    encoding.decode(buffer,    offset,    len    -    1);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
252	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  length  +  len  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  length  +  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  length  +  len  -  1);	  return    encoding.decode(buffer,    offset,    len    -    1);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
253	[BUG]  [BUGGY]  ||!encoding.isName())  {  continue;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||!encoding.isName())  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||!encoding.isName())  {  continue;  }	  if(!encoding.isName())    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
254	[BUG]  [BUGGY]  if(encoding.isName())  {  continue;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding.isName())  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding.isName())  {  continue;  }	  if(!encoding.isName())    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
255	[BUG]  [BUGGY]  if(encoding!=  null  ||!encoding.isName())  {  continue;  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding!=  null  ||!encoding.isName())  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding!=  null  ||!encoding.isName())  {  continue;  }	  if(!encoding.isName())    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
256	[BUG]  [BUGGY]  if(!encoding.isFunctionName())  {  continue;  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isFunctionName())  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isFunctionName())  {  continue;  }	  if(!encoding.isName())    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
257	[BUG]  [BUGGY]  if(!encoding.isDecoded())  {  continue;  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isDecoded())  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isDecoded())  {  continue;  }	  if(!encoding.isName())    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
258	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  buffer[offset  +  length  -  1]  =  encoding;  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  buffer[offset  +  length  -  1]  =  encoding;  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);  buffer[offset  +  length  -  1]  =  encoding;	  System.arraycopy(buffer,    offset,    b,    0,    len);    buffer[offset    +    len    -    1]    =    encoding;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
259	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  buffer[offset  +  len  -  1]  =  encoding;  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  buffer[offset  +  len  -  1]  =  encoding;  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);  buffer[offset  +  len  -  1]  =  encoding;	  System.arraycopy(buffer,    offset,    b,    0,    len);    buffer[offset    +    len    -    1]    =    encoding;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
260	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length);  buffer[offset  +  len  -  1]  =  encoding;  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length);  buffer[offset  +  len  -  1]  =  encoding;  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  length);  buffer[offset  +  len  -  1]  =  encoding;	  System.arraycopy(buffer,    offset,    b,    0,    len);    buffer[offset    +    len    -    1]    =    encoding;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
261	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  buffer[offset  +  len  -  1]  =  DEFAULT_ENCODING;  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  buffer[offset  +  len  -  1]  =  DEFAULT_ENCODING;  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);  buffer[offset  +  len  -  1]  =  DEFAULT_ENCODING;	  System.arraycopy(buffer,    offset,    b,    0,    len);    buffer[offset    +    len    -    1]    =    encoding;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
262	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  buffer[offset  +  length  -  1]  =  encoding;  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  buffer[offset  +  length  -  1]  =  encoding;  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);  buffer[offset  +  length  -  1]  =  encoding;	  System.arraycopy(buffer,    offset,    b,    0,    len);    buffer[offset    +    len    -    1]    =    encoding;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
263	[BUG]  [BUGGY]  ||(deFAULT_ENCODING!=  FALLBACK_ENCODING))  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(deFAULT_ENCODING!=  FALLBACK_ENCODING))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(deFAULT_ENCODING!=  FALLBACK_ENCODING))  {  break;  }	  if(deFAULT_ENCODING!=    FALLBACK_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
264	[BUG]  [BUGGY]  because(deFAULT_ENCODING!=  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  because(deFAULT_ENCODING!=  FALLBACK_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	because(deFAULT_ENCODING!=  FALLBACK_ENCODING)  {  break;  }	  if(deFAULT_ENCODING!=    FALLBACK_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
265	[BUG]  [BUGGY]  if(deFAULT_ENCODING!=  FALLBACK_ENCODING  ||  DEFAULT_ENCODING!=  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING!=  FALLBACK_ENCODING  ||  DEFAULT_ENCODING!=  FALLBACK_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING!=  FALLBACK_ENCODING  ||  DEFAULT_ENCODING!=  FALLBACK_ENCODING)  {  break;  }	  if(deFAULT_ENCODING!=    FALLBACK_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
266	[BUG]  [BUGGY]  ||(deFAULT_ENCODING  ==  FALLBACK_ENCODING  &&  buffer[offset  +  len  -  1]!=  0))  {  break;  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(deFAULT_ENCODING  ==  FALLBACK_ENCODING  &&  buffer[offset  +  len  -  1]!=  0))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(deFAULT_ENCODING  ==  FALLBACK_ENCODING  &&  buffer[offset  +  len  -  1]!=  0))  {  break;  }	  if(deFAULT_ENCODING    ==    DEFAULT_FALLBACK_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
267	[BUG]  [BUGGY]  validateName(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validateName(buffer,  offset  +  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validateName(buffer,  offset  +  length);	  validateName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
268	[BUG]  [BUGGY]  validateName(buffer,  offset  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validateName(buffer,  offset  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validateName(buffer,  offset  +  1);	  validateName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
269	[BUG]  [BUGGY]  validateName(buffer,  offset  +  len,  length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validateName(buffer,  offset  +  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validateName(buffer,  offset  +  len,  length);	  validateName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
270	[BUG]  [BUGGY]  validateName(buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validateName(buffer,  offset  +  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validateName(buffer,  offset  +  len  -  1);	  validateName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
271	[BUG]  [BUGGY]  validateName(buffer,  offset  +  len,  encoding);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validateName(buffer,  offset  +  len,  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validateName(buffer,  offset  +  len,  encoding);	  validateName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
272	[BUG]  [BUGGY]  validateName(buffer,  offset  +  1,  len);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validateName(buffer,  offset  +  1,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validateName(buffer,  offset  +  1,  len);	  validateName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
273	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  length);	  return    new    String(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	125	None	replace
274	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  1);	  return    new    String(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	125	None	replace
275	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  len,  length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  len,  length);	  return    new    String(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	125	None	replace
276	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  1,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  1,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  1,  len);	  return    new    String(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	125	None	replace
277	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  len  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  len  +  1);	  return    new    String(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	125	None	replace
278	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  len,  encoding);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  len,  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  len,  encoding);	  return    new    String(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	125	None	replace
279	[BUG]  [BUGGY]  encoding.decodeName(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  encoding.decodeName(buffer,  offset  +  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	encoding.decodeName(buffer,  offset  +  length);	  encoding.decodeName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	128	None	replace
280	[BUG]  [BUGGY]  encoding.decodeName(buffer,  offset  +  len,  length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  encoding.decodeName(buffer,  offset  +  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	encoding.decodeName(buffer,  offset  +  len,  length);	  encoding.decodeName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	128	None	replace
281	[BUG]  [BUGGY]  encoding.decodeName(buffer,  offset  +  1);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  encoding.decodeName(buffer,  offset  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	encoding.decodeName(buffer,  offset  +  1);	  encoding.decodeName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	128	None	replace
282	[BUG]  [BUGGY]  encoding.decodeName(buffer,  offset  +  1,  len);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  encoding.decodeName(buffer,  offset  +  1,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	encoding.decodeName(buffer,  offset  +  1,  len);	  encoding.decodeName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	128	None	replace
283	[BUG]  [BUGGY]  encoding.parseName(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  encoding.parseName(buffer,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	encoding.parseName(buffer,  offset  +  len);	  encoding.decodeName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	128	None	replace
284	[BUG]  [BUGGY]  encoding.decodeName(buffer,  offset  +  len,  buffer.length);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  encoding.decodeName(buffer,  offset  +  len,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	encoding.decodeName(buffer,  offset  +  len,  buffer.length);	  encoding.decodeName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	128	None	replace
285	[BUG]  [BUGGY]  validate(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validate(buffer,  offset  +  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validate(buffer,  offset  +  length);	  validate(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
286	[BUG]  [BUGGY]  validate(buffer,  offset  +  1);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validate(buffer,  offset  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validate(buffer,  offset  +  1);	  validate(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
287	[BUG]  [BUGGY]  validate(buffer,  offset  +  len,  length);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validate(buffer,  offset  +  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validate(buffer,  offset  +  len,  length);	  validate(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
288	[BUG]  [BUGGY]  validate(buffer,  offset  +  len,  encoding);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validate(buffer,  offset  +  len,  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validate(buffer,  offset  +  len,  encoding);	  validate(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
289	[BUG]  [BUGGY]  validate(buffer,  offset  +  1,  len);  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validate(buffer,  offset  +  1,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validate(buffer,  offset  +  1,  len);	  validate(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
290	[BUG]  [BUGGY]  validate(buffer,  offset  +  len,  buffer.length);  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validate(buffer,  offset  +  len,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validate(buffer,  offset  +  len,  buffer.length);	  validate(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
291	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(b);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
292	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(b);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
293	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(b);  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(b);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(b);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(b);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
294	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(b);  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(b);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(b);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(b);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
295	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(b);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
296	[BUG]  [BUGGY]  parse(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parse(buffer,  offset,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parse(buffer,  offset,  length);	  parse(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
297	[BUG]  [BUGGY]  parse(buffer,  offset,  len,  encoding);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parse(buffer,  offset,  len,  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parse(buffer,  offset,  len,  encoding);	  parse(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
298	[BUG]  [BUGGY]  parse(buffer,  offset,  len,  length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parse(buffer,  offset,  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parse(buffer,  offset,  len,  length);	  parse(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
299	[BUG]  [BUGGY]  parse(buffer,  offset,  0,  len);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parse(buffer,  offset,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parse(buffer,  offset,  0,  len);	  parse(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
300	[BUG]  [BUGGY]  parseName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parseName(buffer,  offset,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parseName(buffer,  offset,  length);	  parse(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
301	[BUG]  [BUGGY]  parseName(buffer,  offset,  len,  encoding);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parseName(buffer,  offset,  len,  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parseName(buffer,  offset,  len,  encoding);	  parseName(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
302	[BUG]  [BUGGY]  parseName(buffer,  offset,  len,  length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parseName(buffer,  offset,  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parseName(buffer,  offset,  len,  length);	  parseName(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
303	[BUG]  [BUGGY]  parseName(buffer,  offset,  len  -  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parseName(buffer,  offset,  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parseName(buffer,  offset,  len  -  1);	  parseName(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
304	[BUG]  [BUGGY]  parseName(buffer,  offset,  0,  len);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parseName(buffer,  offset,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parseName(buffer,  offset,  0,  len);	  parseName(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
305	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  len,  1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  len,  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  len,  1);	  return    encoding.decode(buffer,    offset,    len,    0);    	non-compiled	[CE]  <identifier>  expected	117	None	replace
306	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  length,  0);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  length,  0);	  return    encoding.decode(buffer,    offset,    len,    0);    	non-compiled	[CE]  <identifier>  expected	117	None	replace
307	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  len,  0,  length);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  len,  0,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  len,  0,  length);	  return    encoding.decode(buffer,    offset,    len,    0);    	non-compiled	[CE]  <identifier>  expected	117	None	replace
308	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  len,  2);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  len,  2);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  len,  2);	  return    encoding.decode(buffer,    offset,    len,    0);    	non-compiled	[CE]  <identifier>  expected	117	None	replace
309	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  len,  0,  len);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  len,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  len,  0,  len);	  return    encoding.decode(buffer,    offset,    len,    0);    	non-compiled	[CE]  <identifier>  expected	117	None	replace
310	[BUG]  [BUGGY]  return  buffer.decode(encoding,  offset,  len,  0);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  buffer.decode(encoding,  offset,  len,  0);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  buffer.decode(encoding,  offset,  len,  0);	  return    encoding.decode(buffer,    offset,    len,    0);    	non-compiled	[CE]  <identifier>  expected	117	None	replace
311	[BUG]  [BUGGY]  if(encoding!=  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding!=  FALLBACK_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding!=  FALLBACK_ENCODING)  {  break;  }	  if(encoding!=    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
312	[BUG]  [BUGGY]  if(encoding  ==  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  FALLBACK_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  FALLBACK_ENCODING)  {  break;  }	  if(encoding!=    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
313	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  length  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  length  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  length  -  1);	  return    encoding.decode(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
314	[BUG]  [BUGGY]  return  buffer.decode(buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  buffer.decode(buffer,  offset  +  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  buffer.decode(buffer,  offset  +  len  -  1);	  return    encoding.decode(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
315	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len  -  1,  length);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  len  -  1,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len  -  1,  length);	  return    encoding.decode(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
316	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len  *  MIN_VALUE  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  len  *  MIN_VALUE  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len  *  MIN_VALUE  -  1);	  return    encoding.decode(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
317	[BUG]  [BUGGY]  return  encoding.parseName(buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parseName(buffer,  offset  +  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parseName(buffer,  offset  +  len  -  1);	  return    encoding.decode(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
318	[BUG]  [BUGGY]  return  buffer.decode(encoding,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  buffer.decode(encoding,  offset  +  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  buffer.decode(encoding,  offset  +  len  -  1);	  return    encoding.decode(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
319	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]    	non-compiled	[CE]  <identifier>  expected	23	None	replace
320	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]    	non-compiled	[CE]  <identifier>  expected	23	None	replace
321	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]    	non-compiled	[CE]  <identifier>  expected	23	None	replace
322	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]    	non-compiled	[CE]  <identifier>  expected	23	None	replace
323	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]    	non-compiled	[CE]  <identifier>  expected	23	None	replace
324	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1], "  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1], "  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1], "  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]    	non-compiled	[CE]  <identifier>  expected	23	None	replace
325	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".getMessage());  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".getMessage());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Throwables.throw  new  IllegalStateException( " ".getMessage());	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	67	None	replace
326	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(buffer,  offset  +  len));  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(buffer,  offset  +  len));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(buffer,  offset  +  len));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	67	None	replace
327	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(encoding));  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(encoding));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(encoding));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	67	None	replace
328	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  len);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Throwables.throw  new  IllegalStateException( " ",  len);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	67	None	replace
329	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Failed  to  parse  name: ");  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Failed  to  parse  name: ");  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Throwables.throw  new  IllegalStateException( "Failed  to  parse  name: ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	67	None	replace
330	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  len)  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  len)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer  ==  null  ||  buffer.length  <  =  len)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    buffer.length    <    =    len)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
331	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  len)  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  len)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer  ==  null  ||  buffer.length  <  len)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    buffer.length    <    =    len)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
332	[BUG]  [BUGGY]  if(buffer  ==  null  ||  len  <  =  DEFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer  ==  null  ||  len  <  =  DEFAULT_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer  ==  null  ||  len  <  =  DEFAULT_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    buffer.length    <    =    len)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
333	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  len)  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  len)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer!=  null  ||  buffer.length  <  =  len)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    buffer.length    <    =    len)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
334	[BUG]  [BUGGY]  because(encoding  ==  DEFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  because(encoding  ==  DEFAULT_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	because(encoding  ==  DEFAULT_ENCODING)  {  break;  }	  because(deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
335	[BUG]  [BUGGY]  because(deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  because(deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	because(deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }	  because(deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
336	[BUG]  [BUGGY]  because(deFAULT_ENCODING  ==  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  because(deFAULT_ENCODING  ==  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	because(deFAULT_ENCODING  ==  0)  {  break;  }	  because(deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
337	[BUG]  [BUGGY]  because(len  ==  DEFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  because(len  ==  DEFAULT_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	because(len  ==  DEFAULT_ENCODING)  {  break;  }	  because(deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
338	[BUG]  [BUGGY]  because(offset  ==  DEFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  because(offset  ==  DEFAULT_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	because(offset  ==  DEFAULT_ENCODING)  {  break;  }	  because(deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
339	[BUG]  [BUGGY]  because(deFAULT_ENCODING  ==  encoding)  {  break;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  because(deFAULT_ENCODING  ==  encoding)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	because(deFAULT_ENCODING  ==  encoding)  {  break;  }	  because(deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
340	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  length)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  length)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer!=  null  ||  buffer.length  <  =  length)  {  break;  }	  if(deFAULT_ENCODING!=    null    ||    buffer.length    <    =    length)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
341	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  length)  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  length)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer  ==  null  ||  buffer.length  <  =  length)  {  break;  }	  if(deFAULT_ENCODING!=    null    ||    buffer.length    <    =    length)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
342	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length  <  length)  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length  <  length)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  null  ||  buffer.length  <  length)  {  break;  }	  if(deFAULT_ENCODING!=    null    ||    buffer.length    <    =    length)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
343	[BUG]  [BUGGY]  if(b  ==  null  ||  buffer.length  <  =  length)  {  break;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(b  ==  null  ||  buffer.length  <  =  length)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(b  ==  null  ||  buffer.length  <  =  length)  {  break;  }	  if(deFAULT_ENCODING!=    null    ||    buffer.length    <    =    length)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
344	[BUG]  [BUGGY]  return  encoding.parseName(buffer,  offset,  len  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parseName(buffer,  offset,  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parseName(buffer,  offset,  len  +  1);	  return    encoding.parseName(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
345	[BUG]  [BUGGY]  return  encoding.parseName(buffer,  offset,  len,  length);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parseName(buffer,  offset,  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parseName(buffer,  offset,  len,  length);	  return    encoding.parseName(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
346	[BUG]  [BUGGY]  return  encoding.parseName(buffer,  offset,  len,  buffer.length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parseName(buffer,  offset,  len,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parseName(buffer,  offset,  len,  buffer.length);	  return    encoding.parseName(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
347	[BUG]  [BUGGY]  return  encoding.parseName(buffer,  offset,  0,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parseName(buffer,  offset,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parseName(buffer,  offset,  0,  len);	  return    encoding.parseName(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
348	[BUG]  [BUGGY]  return  buffer.parseName(encoding,  offset,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  buffer.parseName(encoding,  offset,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  buffer.parseName(encoding,  offset,  len);	  return    encoding.parseName(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
349	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  len,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  len,  buffer.length  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  len,  buffer.length  +  1);	  return    encoding.decode(buffer,    offset,    len,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
350	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  len,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  len,  0,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  len,  0,  buffer.length);	  return    encoding.decode(buffer,    offset,    len,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
351	[BUG]  [BUGGY]  return  buffer.decode(buffer,  offset,  len,  encoding.length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  buffer.decode(buffer,  offset,  len,  encoding.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  buffer.decode(buffer,  offset,  len,  encoding.length);	  return    encoding.decode(buffer,    offset,    len,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
352	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  len,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  len,  buffer.length  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  len,  buffer.length  -  1);	  return    encoding.decode(buffer,    offset,    len,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
353	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  0,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  0,  buffer.length);	  return    encoding.decode(buffer,    offset,    len,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
354	[BUG]  [BUGGY]  ||(buffer.length  ==  0  &&  defULT_ENCODING.length  >  0))  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer.length  ==  0  &&  defULT_ENCODING.length  >  0))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer.length  ==  0  &&  defULT_ENCODING.length  >  0))  {  break;  }	  ||(deFAULT_ENCODING    ==    null    &&    buffer.length    >    0))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
355	[BUG]  [BUGGY]  ||(buffer.length  ==  0  &&  buffer.length  >  0))  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer.length  ==  0  &&  buffer.length  >  0))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer.length  ==  0  &&  buffer.length  >  0))  {  break;  }	  ||(deFAULT_ENCODING    ==    null    &&    buffer.length    >    0))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
356	[BUG]  [BUGGY]  ||(buffer.length  ==  0  &&  len  >  0))  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer.length  ==  0  &&  len  >  0))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer.length  ==  0  &&  len  >  0))  {  break;  }	  ||(deFAULT_ENCODING    ==    null    &&    buffer.length    >    0))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
357	[BUG]  [BUGGY]  ||(buffer.length  ==  0  &&  defULT_ENCODING.equals(encoding)))  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer.length  ==  0  &&  defULT_ENCODING.equals(encoding)))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer.length  ==  0  &&  defULT_ENCODING.equals(encoding)))  {  break;  }	  ||(deFAULT_ENCODING    ==    null    &&    buffer.length    >    0))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
358	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  length,  0,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  length,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  length,  0,  len);	  return    encoding.decode(buffer,    offset    +    length,    len);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
359	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  length,  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  length,  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  length,  1);	  return    encoding.decode(buffer,    offset    +    length,    len);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
360	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  length,  len  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  length,  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  length,  len  +  1);	  return    encoding.decode(buffer,    offset    +    length,    len);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
361	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
362	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
363	[BUG]  [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
364	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
365	[BUG]  [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
366	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
367	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer!=  null  &&  buffer.length  >  0)  {  break;  }	  if(deFAULT_ENCODING!=    null    &&    buffer.length    >    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
368	[BUG]  [BUGGY]  if(deFAULT_ENCODING!=  null  ||  buffer.length  >  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING!=  null  ||  buffer.length  >  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING!=  null  ||  buffer.length  >  0)  {  break;  }	  if(deFAULT_ENCODING!=    null    &&    buffer.length    >    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
369	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length  >  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length  >  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  null  ||  buffer.length  >  0)  {  break;  }	  if(deFAULT_ENCODING!=    null    &&    buffer.length    >    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
370	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer!=  null  ||  buffer.length  >  0)  {  break;  }	  if(deFAULT_ENCODING!=    null    &&    buffer.length    >    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
371	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer  ==  null  ||  buffer.length  >  0)  {  break;  }	  if(deFAULT_ENCODING!=    null    &&    buffer.length    >    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
372	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length  -  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  length  -  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
373	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length  -  1);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length  -  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
374	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  len  -  1);  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  len  -  1);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  len  -  1);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
375	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  len  -  1);  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  len  -  1);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  len  -  1);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
376	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  return  encoding.decode(buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  return  encoding.decode(buffer,  offset  +  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  return  encoding.decode(buffer,  offset  +  len  -  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
377	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  len  -  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
378	[BUG]  [BUGGY]  encoding.decode(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  encoding.decode(buffer,  offset  +  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	encoding.decode(buffer,  offset  +  length);	  encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	127	None	replace
379	[BUG]  [BUGGY]  encoding.decode(buffer,  offset  +  len,  length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  encoding.decode(buffer,  offset  +  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	encoding.decode(buffer,  offset  +  len,  length);	  encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	127	None	replace
380	[BUG]  [BUGGY]  encoding.decode(buffer,  offset  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  encoding.decode(buffer,  offset  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	encoding.decode(buffer,  offset  +  1);	  encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	127	None	replace
381	[BUG]  [BUGGY]  encoding.decode(buffer,  offset  +  1,  len);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  encoding.decode(buffer,  offset  +  1,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	encoding.decode(buffer,  offset  +  1,  len);	  encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	127	None	replace
382	[BUG]  [BUGGY]  encoding.decode(buffer,  offset  +  len,  buffer.length);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  encoding.decode(buffer,  offset  +  len,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	encoding.decode(buffer,  offset  +  len,  buffer.length);	  encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	127	None	replace
383	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  continue;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  continue;  }	  if(encoding!=    null)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
384	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
385	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
386	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length);  return  encoding.decode(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length);  return  encoding.decode(buffer,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  length);  return  encoding.decode(buffer,  offset  +  len);	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
387	[BUG]  [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
388	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    	non-compiled	[CE]  <identifier>  expected	26	None	replace
389	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    	non-compiled	[CE]  <identifier>  expected	26	None	replace
390	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    	non-compiled	[CE]  <identifier>  expected	26	None	replace
391	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  0,  len);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  0,  len);	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    	non-compiled	[CE]  <identifier>  expected	26	None	replace
392	[BUG]  [BUGGY]  allowNull(encoding);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  allowNull(encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	allowNull(encoding);	  if(deFAULT_ENCODING    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
393	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Thread.currentThread().setContextClassLoader(getClass().getClassLoader());	  if(deFAULT_ENCODING    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
394	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(DEFAULT_ENCODING);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(DEFAULT_ENCODING);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Thread.currentThread().setContextClassLoader(DEFAULT_ENCODING);	  if(deFAULT_ENCODING    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
395	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reportError( "FallBACK_ENCODING ");  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().reportError( "FallBACK_ENCODING ");  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Thread.currentThread().getContextClassLoader().reportError( "FallBACK_ENCODING ");	  if(deFAULT_ENCODING    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
396	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reportError( "Failed  to  parse  encoding. ");  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().reportError( "Failed  to  parse  encoding. ");  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Thread.currentThread().getContextClassLoader().reportError( "Failed  to  parse  encoding. ");	  if(deFAULT_ENCODING    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
397	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Thread.currentThread().interrupt();	  if(deFAULT_ENCODING    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
398	[BUG]  [BUGGY]  if(encoding!=  null  &&  encoding.decode(buffer,  offset  +  len)>  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding!=  null  &&  encoding.decode(buffer,  offset  +  len)>  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding!=  null  &&  encoding.decode(buffer,  offset  +  len)>  0)  {  break;  }	  if(encoding!=    null    ||    encoding.decode(buffer,    offset    +    len)>    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
399	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.decode(buffer,  offset  +  len)>  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  ||  encoding.decode(buffer,  offset  +  len)>  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||  encoding.decode(buffer,  offset  +  len)>  0)  {  break;  }	  if(encoding!=    null    ||    encoding.decode(buffer,    offset    +    len)>    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
400	[BUG]  [BUGGY]  if(encoding  ==  null  &&  encoding.decode(buffer,  offset  +  len)>  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  &&  encoding.decode(buffer,  offset  +  len)>  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  &&  encoding.decode(buffer,  offset  +  len)>  0)  {  break;  }	  if(encoding!=    null    ||    encoding.decode(buffer,    offset    +    len)>    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
401	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.decode(buffer,  offset  +  length)>  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  ||  encoding.decode(buffer,  offset  +  length)>  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||  encoding.decode(buffer,  offset  +  length)>  0)  {  break;  }	  if(encoding!=    null    ||    encoding.decode(buffer,    offset    +    len)>    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
402	[BUG]  [BUGGY]  if(encoding!=  null  ||  encoding.decode(buffer,  offset  +  length)>  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding!=  null  ||  encoding.decode(buffer,  offset  +  length)>  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding!=  null  ||  encoding.decode(buffer,  offset  +  length)>  0)  {  break;  }	  if(encoding!=    null    ||    encoding.decode(buffer,    offset    +    len)>    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
403	[BUG]  [BUGGY]  if(encoding.equals(deFAULT_ENCODING))  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding.equals(deFAULT_ENCODING))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding.equals(deFAULT_ENCODING))  {  break;  }	  if(deFAULT_ENCODING.equals(encoding))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
404	[BUG]  [BUGGY]  ||  encoding.equals(deFAULT_ENCODING))  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||  encoding.equals(deFAULT_ENCODING))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||  encoding.equals(deFAULT_ENCODING))  {  break;  }	  if(deFAULT_ENCODING.equals(encoding))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
405	[BUG]  [BUGGY]  if(deFAULT_ENCODING.equals(false))  {  break;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING.equals(false))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING.equals(false))  {  break;  }	  if(deFAULT_ENCODING.equals(encoding))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
406	[BUG]  [BUGGY]  if(false.equals(encoding))  {  break;  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(false.equals(encoding))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(false.equals(encoding))  {  break;  }	  if(deFAULT_ENCODING.equals(encoding))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
407	[BUG]  [BUGGY]  if(len  ==  0)  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  ==  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  ==  0)  {  break;  }	  if(deFAULT_ENCODING    ==    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
408	[BUG]  [BUGGY]  if(deFAULT_ENCODING!=  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING!=  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING!=  0)  {  break;  }	  if(deFAULT_ENCODING    ==    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
409	[BUG]  [BUGGY]  if(length  ==  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  ==  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  ==  0)  {  break;  }	  if(deFAULT_ENCODING    ==    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
410	[BUG]  [BUGGY]  if(false)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(false)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(false)  {  break;  }	  if(deFAULT_ENCODING    ==    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
411	[BUG]  [BUGGY]  if(!deFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!deFAULT_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!deFAULT_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
412	[BUG]  [BUGGY]  continue(encoding  ==  null)?  null  :  encoding.decode(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  continue(encoding  ==  null)?  null  :  encoding.decode(buffer,  offset,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	continue(encoding  ==  null)?  null  :  encoding.decode(buffer,  offset,  len);	  continue    null;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
413	[BUG]  [BUGGY]  continue(encoding!=  null)?  null  :  encoding.decode(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  continue(encoding!=  null)?  null  :  encoding.decode(buffer,  offset,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	continue(encoding!=  null)?  null  :  encoding.decode(buffer,  offset,  len);	  continue    null;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
414	[BUG]  [BUGGY]  continue  this;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  continue  this;  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	continue  this;	  continue    null;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
415	[BUG]  [BUGGY]  continue(encoding  ==  null)?  null  :  encoding.decode(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  continue(encoding  ==  null)?  null  :  encoding.decode(buffer,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	continue(encoding  ==  null)?  null  :  encoding.decode(buffer,  offset  +  len);	  continue    null;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
416	[BUG]  [BUGGY]  continue(encoding!=  null)?  null  :  encoding.decode(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  continue(encoding!=  null)?  null  :  encoding.decode(buffer,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	continue(encoding!=  null)?  null  :  encoding.decode(buffer,  offset  +  len);	  continue    null;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
417	[BUG]  [BUGGY]  continue(encoding  ==  null)?  null  :  encoding.decode(buffer,  offset,  len  +  1);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  continue(encoding  ==  null)?  null  :  encoding.decode(buffer,  offset,  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	continue(encoding  ==  null)?  null  :  encoding.decode(buffer,  offset,  len  +  1);	  continue    null;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
418	[BUG]  [BUGGY]  continue  String;  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  continue  String;  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	continue  String;	  continue    null;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
419	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name.   ");  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name.   ");  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  name.   ");	  throw    new    IllegalStateException(   "Failed    to    parse    encoding.   ");    	non-compiled	[CE]  <identifier>  expected	118	None	replace
420	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  encoding: "  +  len);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  encoding: "  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  encoding: "  +  len);	  throw    new    IllegalStateException(   "Failed    to    parse    encoding.   ");    	non-compiled	[CE]  <identifier>  expected	118	None	replace
421	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  encoding.   "  +  len);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  encoding.   "  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  encoding.   "  +  len);	  throw    new    IllegalStateException(   "Failed    to    parse    encoding.   ");    	non-compiled	[CE]  <identifier>  expected	118	None	replace
422	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Failed  to  parse  encoding. ");  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Failed  to  parse  encoding. ");  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Throwables.throw  new  IllegalStateException( "Failed  to  parse  encoding. ");	  throw    new    IllegalStateException(   "Failed    to    parse    encoding.   ");    	non-compiled	[CE]  <identifier>  expected	118	None	replace
423	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  len)  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  len)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer!=  null  ||  buffer.length  <  len)  {  break;  }	  if(deFAULT_ENCODING!=    null    ||    buffer.length    <    =    len)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
424	[BUG]  [BUGGY]  if(buffer!=  null  ||  len  <  =  DEFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer!=  null  ||  len  <  =  DEFAULT_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer!=  null  ||  len  <  =  DEFAULT_ENCODING)  {  break;  }	  if(deFAULT_ENCODING!=    null    ||    buffer.length    <    =    len)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
425	[BUG]  [BUGGY]  if(deFAULT_ENCODING!=  null  ||  buffer.length  <  len)  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING!=  null  ||  buffer.length  <  len)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING!=  null  ||  buffer.length  <  len)  {  break;  }	  if(deFAULT_ENCODING!=    null    ||    buffer.length    <    =    len)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
426	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  encoding.getMessage());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  encoding.getMessage());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( " "  +  encoding.getMessage());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
427	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer.getLength());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer.getLength());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer.getLength());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
428	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer.getName());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer.getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer.getName());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
429	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer.getText());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer.getText());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer.getText());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
430	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer.getMessage());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer.getMessage());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer.getMessage());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
431	[BUG]  [BUGGY]  if(FALLBACK_ENCODING  ==  DEFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(FALLBACK_ENCODING  ==  DEFAULT_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(FALLBACK_ENCODING  ==  DEFAULT_ENCODING)  {  break;  }	  if(DEFAULT_ENCODING    ==    FALLBACK_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
432	[BUG]  [BUGGY]  if(len  ==  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  ==  FALLBACK_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  ==  FALLBACK_ENCODING)  {  break;  }	  if(DEFAULT_ENCODING    ==    FALLBACK_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
433	[BUG]  [BUGGY]  if(DEFAULT_ENCODING!=  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(DEFAULT_ENCODING!=  FALLBACK_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(DEFAULT_ENCODING!=  FALLBACK_ENCODING)  {  break;  }	  if(DEFAULT_ENCODING    ==    FALLBACK_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
434	[BUG]  [BUGGY]  unwrap(buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  unwrap(buffer,  offset,  length,  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset,  length,  encoding);	  unwrap(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
435	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  len  <  =  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  len  <  =  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  null  ||  len  <  =  0)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    len    <    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
436	[BUG]  [BUGGY]  if(encoding  ==  null  ||  len  <  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  ||  len  <  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||  len  <  0)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    len    <    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
437	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  len  >=  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  len  >=  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  null  ||  len  >=  0)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    len    <    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
438	[BUG]  [BUGGY]  if(len  ==  0  ||  deFAULT_ENCODING  <  =  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  ==  0  ||  deFAULT_ENCODING  <  =  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  ==  0  ||  deFAULT_ENCODING  <  =  0)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    len    <    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
439	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  len  >  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  len  >  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  null  ||  len  >  0)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    len    <    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
440	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length);  return  encoding.decode(buffer,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length);  return  encoding.decode(buffer,  offset  +  len);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length);  return  encoding.decode(buffer,  offset  +  len);  }	  System.arraycopy(buffer,    offset    +    len,    0,    buffer.length);    return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
441	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length);  return  encoding.decode(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length);  return  encoding.decode(buffer,  offset  +  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset  +  len,  0,  buffer.length);  return  encoding.decode(buffer,  offset  +  length);	  System.arraycopy(buffer,    offset    +    len,    0,    buffer.length);    return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
442	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length);  return  encoding.decode(buffer,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length);  return  encoding.decode(buffer,  offset  +  len);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length);  return  encoding.decode(buffer,  offset  +  len);  }	  System.arraycopy(buffer,    offset    +    len,    0,    buffer.length);    return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
443	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length  -  offset);  return  encoding.decode(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length  -  offset);  return  encoding.decode(buffer,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset  +  len,  0,  buffer.length  -  offset);  return  encoding.decode(buffer,  offset  +  len);	  System.arraycopy(buffer,    offset    +    len,    0,    buffer.length);    return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
444	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length);  return  encoding.decode(buffer,  offset  +  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length);  return  encoding.decode(buffer,  offset  +  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length);  return  encoding.decode(buffer,  offset  +  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  System.arraycopy(buffer,    offset    +    len,    0,    buffer.length);    return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
445	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset  +  1,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  1);  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset  +  1,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset  +  1,  b,  0,  len);  return  encoding.decode(buffer,  offset  +  1);	  System.arraycopy(buffer,    offset    +    len,    0,    buffer.length);    return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
446	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  encoding.decode(buffer,  offset  +  len));  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  encoding.decode(buffer,  offset  +  len));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( " "  +  encoding.decode(buffer,  offset  +  len));	  throw    new    IllegalStateException(   "   ".equals(buffer,    offset    +    len));    	non-compiled	[CE]  <identifier>  expected	88	None	replace
447	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(buffer,  offset  +  length));  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( " ".equals(buffer,  offset  +  length));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( " ".equals(buffer,  offset  +  length));	  throw    new    IllegalStateException(   "   ".equals(buffer,    offset    +    len));    	non-compiled	[CE]  <identifier>  expected	88	None	replace
448	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer,  offset  +  len));  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer,  offset  +  len));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer,  offset  +  len));	  throw    new    IllegalStateException(   "   ".equals(buffer,    offset    +    len));    	non-compiled	[CE]  <identifier>  expected	88	None	replace
449	[BUG]  [BUGGY]  rethrowInternal(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rethrowInternal(buffer,  offset  +  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rethrowInternal(buffer,  offset  +  length);	  rethrowInternal(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
450	[BUG]  [BUGGY]  rethrowInternal(buffer,  offset  +  len,  length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rethrowInternal(buffer,  offset  +  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rethrowInternal(buffer,  offset  +  len,  length);	  rethrowInternal(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
451	[BUG]  [BUGGY]  rethrowInternal(buffer,  offset  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rethrowInternal(buffer,  offset  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rethrowInternal(buffer,  offset  +  1);	  rethrowInternal(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
452	[BUG]  [BUGGY]  rethrowInternal(buffer,  offset  +  1,  len);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rethrowInternal(buffer,  offset  +  1,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rethrowInternal(buffer,  offset  +  1,  len);	  rethrowInternal(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
453	[BUG]  [BUGGY]  rethrowInternal(buffer,  offset  +  len,  start);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rethrowInternal(buffer,  offset  +  len,  start);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rethrowInternal(buffer,  offset  +  len,  start);	  rethrowInternal(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
454	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.toString();  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.toString();  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.toString();  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.toString();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
455	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.toString();  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.toString();  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.toString();  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.toString();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
456	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length);  return  encoding.toString();  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length);  return  encoding.toString();  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  length);  return  encoding.toString();	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.toString();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
457	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.getName();  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.getName();  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.getName();	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.toString();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
458	[BUG]  [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
459	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
460	[BUG]  [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
461	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  }	  if(len    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]    	non-compiled	[CE]  <identifier>  expected	24	None	replace
462	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]	  if(len    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]    	non-compiled	[CE]  <identifier>  expected	24	None	replace
463	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]	  if(len    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]    	non-compiled	[CE]  <identifier>  expected	24	None	replace
464	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  }	  if(len    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]    	non-compiled	[CE]  <identifier>  expected	24	None	replace
465	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]	  if(len    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]    	non-compiled	[CE]  <identifier>  expected	24	None	replace
466	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  }	  if(len    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]    	non-compiled	[CE]  <identifier>  expected	24	None	replace
467	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  <  =  DEFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  ==  0  ||  buffer.length  <  =  DEFAULT_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  ==  0  ||  buffer.length  <  =  DEFAULT_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    buffer.length    <    =    length)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
468	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  buffer.length  <  =  length)  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer.length  ==  0  ||  buffer.length  <  =  length)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer.length  ==  0  ||  buffer.length  <  =  length)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    buffer.length    <    =    length)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
469	[BUG]  [BUGGY]  if(buffer  ==  null  ||  len  <  DEFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer  ==  null  ||  len  <  DEFAULT_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer  ==  null  ||  len  <  DEFAULT_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    buffer.length    <    len)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
470	[BUG]  [BUGGY]  if(buffer  ==  null  ||  len  <  deFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer  ==  null  ||  len  <  deFAULT_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer  ==  null  ||  len  <  deFAULT_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    buffer.length    <    len)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
471	[BUG]  [BUGGY]  if(b  ==  null  ||  buffer.length  <  len)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(b  ==  null  ||  buffer.length  <  len)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(b  ==  null  ||  buffer.length  <  len)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    buffer.length    <    len)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
472	[BUG]  [BUGGY]  parseAsIOException(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parseAsIOException(buffer,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parseAsIOException(buffer,  offset  +  len);	  rethrowAsIOException();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
473	[BUG]  [BUGGY]  unwrap(buffer,  offset,  len,  length);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  unwrap(buffer,  offset,  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset,  len,  length);	  unwrap(buffer,    offset,    len,    encoding);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
474	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset  +  len,  encoding);	  unwrap(buffer,    offset,    len,    encoding);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
475	[BUG]  [BUGGY]  unwrap(buffer,  offset,  len,  encoding,  length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  unwrap(buffer,  offset,  len,  encoding,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset,  len,  encoding,  length);	  unwrap(buffer,    offset,    len,    encoding);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
476	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  len  +  1,  length);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  len  +  1,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  len  +  1,  length);	  return    encoding.decode(buffer,    offset,    len    +    1);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
477	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  len  +  2);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  len  +  2);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  len  +  2);	  return    encoding.decode(buffer,    offset,    len    +    1);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
478	[BUG]  [BUGGY]  return  buffer.decode(encoding,  offset,  len  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  buffer.decode(encoding,  offset,  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  buffer.decode(encoding,  offset,  len  +  1);	  return    encoding.decode(buffer,    offset,    len    +    1);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
479	[BUG]  [BUGGY]  parse(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parse(buffer,  offset  +  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parse(buffer,  offset  +  length);	  parse(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
480	[BUG]  [BUGGY]  parse(buffer,  offset  +  len,  length);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parse(buffer,  offset  +  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parse(buffer,  offset  +  len,  length);	  parse(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
481	[BUG]  [BUGGY]  parse(buffer,  offset  +  1,  len);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parse(buffer,  offset  +  1,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parse(buffer,  offset  +  1,  len);	  parse(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
482	[BUG]  [BUGGY]  parse(buffer,  offset  +  1);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parse(buffer,  offset  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parse(buffer,  offset  +  1);	  parse(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
483	[BUG]  [BUGGY]  parse(buffer,  offset  +  len,  encoding);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parse(buffer,  offset  +  len,  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parse(buffer,  offset  +  len,  encoding);	  parse(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
484	[BUG]  [BUGGY]  if(encoding  ==  FALLBACK_ENCODING  ||  encoding  ==  DEFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  FALLBACK_ENCODING  ||  encoding  ==  DEFAULT_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  FALLBACK_ENCODING  ||  encoding  ==  DEFAULT_ENCODING)  {  break;  }	  if(encoding    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
485	[BUG]  [BUGGY]  return  encoding.parseName(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parseName(buffer,  offset  +  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parseName(buffer,  offset  +  length);	  return    encoding.parseName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
486	[BUG]  [BUGGY]  return  encoding.parseName(buffer,  offset  +  len,  length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parseName(buffer,  offset  +  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parseName(buffer,  offset  +  len,  length);	  return    encoding.parseName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
487	[BUG]  [BUGGY]  return  encoding.parseName(buffer,  offset  +  1,  len);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parseName(buffer,  offset  +  1,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parseName(buffer,  offset  +  1,  len);	  return    encoding.parseName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
488	[BUG]  [BUGGY]  return  buffer.parseName(encoding,  offset  +  len);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  buffer.parseName(encoding,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  buffer.parseName(encoding,  offset  +  len);	  return    encoding.parseName(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
489	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  0,  len  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  0,  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  0,  len  +  1);	  return    encoding.decode(buffer,    offset,    0,    len);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
490	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  length,  0,  len);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  length,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  length,  0,  len);	  return    encoding.decode(buffer,    offset,    0,    len);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
491	[BUG]  [BUGGY]  return  buffer.decode(encoding,  offset,  0,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  buffer.decode(encoding,  offset,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  buffer.decode(encoding,  offset,  0,  len);	  return    encoding.decode(buffer,    offset,    0,    len);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
492	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".getMessage());  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".getMessage());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Throwables.throw  new  IllegalArgumentException( " ".getMessage());	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
493	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(buffer,  offset  +  len));  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(buffer,  offset  +  len));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(buffer,  offset  +  len));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
494	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(encoding));  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(encoding));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(encoding));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
495	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ",  len);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ",  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Throwables.throw  new  IllegalArgumentException( " ",  len);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
496	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(buffer));  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(buffer));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(buffer));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
497	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  1,  len  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  1,  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  1,  len  +  1);	  return    encoding.decode(buffer,    offset    +    1,    len);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
498	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  1,  len  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  1,  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  1,  len  -  1);	  return    encoding.decode(buffer,    offset    +    1,    len);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
499	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  1,  len,  length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  1,  len,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  1,  len,  length);	  return    encoding.decode(buffer,    offset    +    1,    len);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
500	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  1,  buffer.length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  1,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  1,  buffer.length);	  return    encoding.decode(buffer,    offset    +    1,    len);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
501	[BUG]  [BUGGY]  rack(buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rack(buffer,  offset,  length,  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rack(buffer,  offset,  length,  encoding);	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(b);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
502	[BUG]  [BUGGY]  allowUnsupportedOperation();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  allowUnsupportedOperation();  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	allowUnsupportedOperation();	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(b);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
503	[BUG]  [BUGGY]  rack(buffer,  offset,  length,  encoding.getName());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rack(buffer,  offset,  length,  encoding.getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rack(buffer,  offset,  length,  encoding.getName());	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(b);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
504	[BUG]  [BUGGY]  rack(buffer,  offset,  length,  encoding.toString());  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rack(buffer,  offset,  length,  encoding.toString());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rack(buffer,  offset,  length,  encoding.toString());	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(b);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
505	[BUG]  [BUGGY]  rack(buffer,  offset,  length,  encoding.decode(b));  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rack(buffer,  offset,  length,  encoding.decode(b));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rack(buffer,  offset,  length,  encoding.decode(b));	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(b);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
506	[BUG]  [BUGGY]  rack(buffer,  offset,  len,  0,  encoding.length);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rack(buffer,  offset,  len,  0,  encoding.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rack(buffer,  offset,  len,  0,  encoding.length);	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(b);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
507	[BUG]  [BUGGY]  rack(buffer,  offset,  len  -  1);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rack(buffer,  offset,  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rack(buffer,  offset,  len  -  1);	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(b);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
508	[BUG]  [BUGGY]  if(encoding.equals(buffer)||  encoding.equals(buffer))  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding.equals(buffer)||  encoding.equals(buffer))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding.equals(buffer)||  encoding.equals(buffer))  {  break;  }	  if(encoding.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
509	[BUG]  [BUGGY]  if(encoding.equals(buffer,  offset  +  len))  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding.equals(buffer,  offset  +  len))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding.equals(buffer,  offset  +  len))  {  break;  }	  if(encoding.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
510	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  encoding: "  +  encoding);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  encoding: "  +  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  encoding: "  +  encoding);	  throw    new    IllegalStateException(   "   ".equals(encoding));    	non-compiled	[CE]  <identifier>  expected	68	None	replace
511	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  encoding);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( " "  +  encoding);	  throw    new    IllegalStateException(   "   ".equals(encoding));    	non-compiled	[CE]  <identifier>  expected	68	None	replace
512	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  encoding);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  name: "  +  encoding);	  throw    new    IllegalStateException(   "   ".equals(encoding));    	non-compiled	[CE]  <identifier>  expected	68	None	replace
513	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  encoding.equals(buffer));  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  encoding.equals(buffer));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( " "  +  encoding.equals(buffer));	  throw    new    IllegalStateException(   "   ".equals(encoding));    	non-compiled	[CE]  <identifier>  expected	68	None	replace
514	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  encoding.decode(buffer,  offset));  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  encoding.decode(buffer,  offset));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( " "  +  encoding.decode(buffer,  offset));	  throw    new    IllegalStateException(   "   ".equals(buffer,    offset));    	non-compiled	[CE]  <identifier>  expected	90	None	replace
515	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer,  offset  +  len);	  throw    new    IllegalStateException(   "   ".equals(buffer,    offset));    	non-compiled	[CE]  <identifier>  expected	90	None	replace
516	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding.getMessage());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding.getMessage());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " "  +  encoding.getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
517	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  name: "  +  buffer.getMessage());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  name: "  +  buffer.getMessage());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  name: "  +  buffer.getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
518	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  name: "  +  buffer.getLength());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  name: "  +  buffer.getLength());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  name: "  +  buffer.getLength());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
519	[BUG]  [BUGGY]  unwrap(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  unwrap(buffer,  offset,  length  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset,  length  -  1);	  unwrap(buffer,    offset,    len    -    1);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
520	[BUG]  [BUGGY]  parse(buffer,  offset,  len  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  parse(buffer,  offset,  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	parse(buffer,  offset,  len  -  1);	  unwrap(buffer,    offset,    len    -    1);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
521	[BUG]  [BUGGY]  if(deFAULT_ENCODING.equals(buffer)&&  buffer.length  ==  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING.equals(buffer)&&  buffer.length  ==  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING.equals(buffer)&&  buffer.length  ==  0)  {  break;  }	  if(deFAULT_ENCODING.equals(buffer)||    buffer.length    ==    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
522	[BUG]  [BUGGY]  if(buffer.length.equals(deFAULT_ENCODING)||  buffer.length  ==  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer.length.equals(deFAULT_ENCODING)||  buffer.length  ==  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer.length.equals(deFAULT_ENCODING)||  buffer.length  ==  0)  {  break;  }	  if(deFAULT_ENCODING.equals(buffer)||    buffer.length    ==    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
523	[BUG]  [BUGGY]  if(encoding.equals(buffer)||  buffer.length  ==  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding.equals(buffer)||  buffer.length  ==  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding.equals(buffer)||  buffer.length  ==  0)  {  break;  }	  if(deFAULT_ENCODING.equals(buffer)||    buffer.length    ==    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
524	[BUG]  [BUGGY]  if(deFAULT_ENCODING.equals(buffer)||  buffer.length  <  =  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING.equals(buffer)||  buffer.length  <  =  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING.equals(buffer)||  buffer.length  <  =  0)  {  break;  }	  if(deFAULT_ENCODING.equals(buffer)||    buffer.length    ==    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
525	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer,  offset  +  length));  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer,  offset  +  length));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " ".equals(buffer,  offset  +  length));	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    offset    +    len));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
526	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equals(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " ").equals(buffer,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " ").equals(buffer,  offset  +  len);	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    offset    +    len));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
527	[BUG]  [BUGGY]  return  buffer.decode(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  buffer.decode(buffer,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  buffer.decode(buffer,  offset  +  len);	  return    buffer.decode(encoding,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
528	[BUG]  [BUGGY]  return  buffer.decode(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  buffer.decode(buffer,  offset  +  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  buffer.decode(buffer,  offset  +  length);	  return    buffer.decode(encoding,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
529	[BUG]  [BUGGY]  return  buffer.parse(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  buffer.parse(buffer,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  buffer.parse(buffer,  offset  +  len);	  return    buffer.decode(encoding,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
530	[BUG]  [BUGGY]  return  buffer.parseName(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  buffer.parseName(buffer,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  buffer.parseName(buffer,  offset  +  len);	  return    buffer.decode(encoding,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
531	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  len);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  name: "  +  len);	  throw    new    IllegalStateException(   "Failed    to    parse    name:   ");    	non-compiled	[CE]  <identifier>  expected	89	None	replace
532	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  offset);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  offset);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  name: "  +  offset);	  throw    new    IllegalStateException(   "Failed    to    parse    name:   ");    	non-compiled	[CE]  <identifier>  expected	89	None	replace
533	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer);	  throw    new    IllegalStateException(   "Failed    to    parse    name:   ");    	non-compiled	[CE]  <identifier>  expected	89	None	replace
534	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  name: "  +  length);	  throw    new    IllegalStateException(   "Failed    to    parse    name:   ");    	non-compiled	[CE]  <identifier>  expected	89	None	replace
535	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: ",  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: ",  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  name: ",  len);	  throw    new    IllegalStateException(   "Failed    to    parse    name:   ");    	non-compiled	[CE]  <identifier>  expected	89	None	replace
536	[BUG]  [BUGGY]  _throwInternal();  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  _throwInternal();  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	_throwInternal();	  _reportUnsupportedOperation();    	non-compiled	[CE]  <identifier>  expected	129	None	replace
537	[BUG]  [BUGGY]  _throwUnsupportedOperation();  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  _throwUnsupportedOperation();  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	_throwUnsupportedOperation();	  _reportUnsupportedOperation();    	non-compiled	[CE]  <identifier>  expected	129	None	replace
538	[BUG]  [BUGGY]  _reportError(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  _reportError(buffer,  offset,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	_reportError(buffer,  offset,  len);	  _reportUnsupportedOperation();    	non-compiled	[CE]  <identifier>  expected	129	None	replace
539	[BUG]  [BUGGY]  reportUnsupportedOperation();  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  reportUnsupportedOperation();  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	reportUnsupportedOperation();	  _reportUnsupportedOperation();    	non-compiled	[CE]  <identifier>  expected	129	None	replace
540	[BUG]  [BUGGY]  _reportError( "Can  not  parse  name: "  +  len);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  _reportError( "Can  not  parse  name: "  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	_reportError( "Can  not  parse  name: "  +  len);	  _reportUnsupportedOperation();    	non-compiled	[CE]  <identifier>  expected	129	None	replace
541	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  len,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  len,  length,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  len,  length,  buffer.length);	  return    encoding.decode(buffer,    offset,    len,    length);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
542	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  len,  length  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  len,  length  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  len,  length  +  1);	  return    encoding.decode(buffer,    offset,    len,    length);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
543	[BUG]  [BUGGY]  rehashCode(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rehashCode(buffer,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rehashCode(buffer,  offset  +  len);	  rehashCode();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
544	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  len  -  1  +  length);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  len  -  1  +  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  len  -  1  +  length);	  return    encoding.decode(buffer,    offset,    len    -    1);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
545	[BUG]  [BUGGY]  return  encoding.parse(buffer,  offset,  len  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parse(buffer,  offset,  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parse(buffer,  offset,  len  -  1);	  return    encoding.decode(buffer,    offset,    len    -    1);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
546	[BUG]  [BUGGY]  rehashInternal(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rehashInternal(buffer,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rehashInternal(buffer,  offset  +  len);	  rehashInternal();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
547	[BUG]  [BUGGY]  rehashInternal(buffer);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rehashInternal(buffer);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rehashInternal(buffer);	  rehashInternal();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
548	[BUG]  [BUGGY]  rehashInternal(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rehashInternal(buffer,  offset,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rehashInternal(buffer,  offset,  len);	  rehashInternal();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
549	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  len.equals(buffer.length));  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  len.equals(buffer.length));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " "  +  len.equals(buffer.length));	  throw    new    IllegalArgumentException(   "   ".equals(buffer.length));    	non-compiled	[CE]  <identifier>  expected	53	None	replace
550	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding.decode(buffer,  offset  +  length));  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding.decode(buffer,  offset  +  length));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " "  +  encoding.decode(buffer,  offset  +  length));	  throw    new    IllegalArgumentException(   "   ".equals(buffer.length));    	non-compiled	[CE]  <identifier>  expected	53	None	replace
551	[BUG]  [BUGGY]  if(buffer  ==  null  ||  len  <  buffer.length)  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer  ==  null  ||  len  <  buffer.length)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer  ==  null  ||  len  <  buffer.length)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    buffer.length    <    len)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
552	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]    	non-compiled	[CE]  <identifier>  expected	23	None	replace
553	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]    	non-compiled	[CE]  <identifier>  expected	23	None	replace
554	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]    	non-compiled	[CE]  <identifier>  expected	23	None	replace
555	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(buffer,  offset));  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(buffer,  offset));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(buffer,  offset));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	67	None	replace
556	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(buffer);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(buffer);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(buffer);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	67	None	replace
557	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL    	non-compiled	[CE]  <identifier>  expected	108	None	replace
558	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL);	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL    	non-compiled	[CE]  <identifier>  expected	108	None	replace
559	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL);	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL    	non-compiled	[CE]  <identifier>  expected	108	None	replace
560	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL);	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL    	non-compiled	[CE]  <identifier>  expected	108	None	replace
561	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL    	non-compiled	[CE]  <identifier>  expected	108	None	replace
562	[BUG]  [BUGGY]  return  encoding.parse(buffer,  offset,  0,  len);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parse(buffer,  offset,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parse(buffer,  offset,  0,  len);	  return    encoding.parse(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
563	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len  -  1);	  System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
564	[BUG]  [BUGGY]  ||(buffer.length!=  0  &&  len  >  0))  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer.length!=  0  &&  len  >  0))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer.length!=  0  &&  len  >  0))  {  break;  }	  ||(deFAULT_ENCODING!=    null    &&    buffer.length    >    0))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
565	[BUG]  [BUGGY]  ||(birk!=  null  &&  buffer.length  >  0))  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(birk!=  null  &&  buffer.length  >  0))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(birk!=  null  &&  buffer.length  >  0))  {  break;  }	  ||(deFAULT_ENCODING!=    null    &&    buffer.length    >    0))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
566	[BUG]  [BUGGY]  if(false  ==  DEFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(false  ==  DEFAULT_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(false  ==  DEFAULT_ENCODING)  {  break;  }	  if(DEFAULT_ENCODING    ==    FALLBACK_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
567	[BUG]  [BUGGY]  if(false  {  DEFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(false  {  DEFAULT_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(false  {  DEFAULT_ENCODING)  {  break;  }	  if(DEFAULT_ENCODING    ==    FALLBACK_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
568	[BUG]  [BUGGY]  if(buffer  ==  null  ||  len  <  =  buffer.length)  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer  ==  null  ||  len  <  =  buffer.length)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer  ==  null  ||  len  <  =  buffer.length)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    buffer.length    <    =    len)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
569	[BUG]  [BUGGY]  ||(buffer.length  ==  0  &&  DEFAULT_ENCODING.equals(offset)))  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer.length  ==  0  &&  DEFAULT_ENCODING.equals(offset)))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer.length  ==  0  &&  DEFAULT_ENCODING.equals(offset)))  {  break;  }	  ||(deFAULT_ENCODING    ==    null    &&    buffer.length    >    0))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
570	[BUG]  [BUGGY]  rethrowInternal(buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  rethrowInternal(buffer,  offset  +  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	rethrowInternal(buffer,  offset  +  len  -  1);	  rethrowInternal(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
571	[BUG]  [BUGGY]  if(!encoding.isName()  &&  buffer.length  >  0)  {  continue;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isName()  &&  buffer.length  >  0)  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isName()  &&  buffer.length  >  0)  {  continue;  }	  if(!encoding.isName())    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
572	[BUG]  [BUGGY]  if(!encoding.isName()  ||  buffer.length  >  0)  {  continue;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isName()  ||  buffer.length  >  0)  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isName()  ||  buffer.length  >  0)  {  continue;  }	  if(!encoding.isName())    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
573	[BUG]  [BUGGY]  if(!encoding.isDecode())  {  continue;  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isDecode())  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isDecode())  {  continue;  }	  if(!encoding.isName())    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
574	[BUG]  [BUGGY]  allowNull(buffer);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  allowNull(buffer);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	allowNull(buffer);	  if(deFAULT_ENCODING    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
575	[BUG]  [BUGGY]  allowNull(buffer,  offset  +  len)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  allowNull(buffer,  offset  +  len)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	allowNull(buffer,  offset  +  len)  {  throw  new  IllegalArgumentException( " ");  }	  if(deFAULT_ENCODING    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
576	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(encoding);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	aught(new  IllegalArgumentException( " ")).initCause(encoding);	  if(deFAULT_ENCODING    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
577	[BUG]  [BUGGY]  Thread.currentThread().intern();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Thread.currentThread().intern();  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Thread.currentThread().intern();	  if(deFAULT_ENCODING    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
578	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " "));  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  aught(new  IllegalArgumentException( " "));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	aught(new  IllegalArgumentException( " "));	  if(deFAULT_ENCODING    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
579	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reportCodeChange();  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().reportCodeChange();  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	Thread.currentThread().getContextClassLoader().reportCodeChange();	  if(deFAULT_ENCODING    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
580	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  0,  len);  System.arraycopy(buffer,  offset,	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    	non-compiled	[CE]  <identifier>  expected	26	None	replace
581	[BUG]  [BUGGY]  ||(buffer.length  ==  0)||(deFAULT_ENCODING.equals(encoding)))  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer.length  ==  0)||(deFAULT_ENCODING.equals(encoding)))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer.length  ==  0)||(deFAULT_ENCODING.equals(encoding)))  {  break;  }	  ||(deFAULT_ENCODING    ==    null    &&    buffer.length    >    0)||(deFAULT_ENCODING.equals(encoding)))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
582	[BUG]  [BUGGY]  ||(buffer  ==  null  &&  buffer.length  >  0)||(deFAULT_ENCODING.equals(encoding)))  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer  ==  null  &&  buffer.length  >  0)||(deFAULT_ENCODING.equals(encoding)))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer  ==  null  &&  buffer.length  >  0)||(deFAULT_ENCODING.equals(encoding)))  {  break;  }	  ||(deFAULT_ENCODING    ==    null    &&    buffer.length    >    0)||(deFAULT_ENCODING.equals(encoding)))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
583	[BUG]  [BUGGY]  return  encoding.parseName(buffer,  offset,  len  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parseName(buffer,  offset,  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parseName(buffer,  offset,  len  -  1);	  return    encoding.parseName(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
584	[BUG]  [BUGGY]  return  ZipEncoding.parseName(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  ZipEncoding.parseName(buffer,  offset,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  ZipEncoding.parseName(buffer,  offset,  len);	  return    encoding.parseName(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
585	[BUG]  [BUGGY]  if(encoding  ==  null  ||!encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  ||!encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||!encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  break;  }	  if(encoding!=    null    ||    encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
586	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  len  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  len  +  1);	  unwrap(buffer,    offset,    len    +    1);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
587	[BUG]  [BUGGY]  scan(buffer,  offset,  len  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  scan(buffer,  offset,  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	scan(buffer,  offset,  len  +  1);	  unwrap(buffer,    offset,    len    +    1);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
588	[BUG]  [BUGGY]  validate(buffer,  offset,  0);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  validate(buffer,  offset,  0);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	validate(buffer,  offset,  0);	  validate(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
589	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  offset,  length,  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	aughtExceptionHandler.handleMissingName(buffer,  offset,  length,  encoding);	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(b);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
590	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  offset,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	aughtExceptionHandler.handleMissingName(buffer,  offset,  len);	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(b);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
591	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  offset,  len  -  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  offset,  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	aughtExceptionHandler.handleMissingName(buffer,  offset,  len  -  1);	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(b);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
592	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  offset,  len,  encoding);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  offset,  len,  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	aughtExceptionHandler.handleMissingName(buffer,  offset,  len,  encoding);	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(b);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
593	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  offset,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	aughtExceptionHandler.handleMissingName(buffer,  offset,  length);	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(b);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
594	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  offset,  len  -  1,  encoding);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  offset,  len  -  1,  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	aughtExceptionHandler.handleMissingName(buffer,  offset,  len  -  1,  encoding);	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(b);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
595	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  offset,  len  +  1,  encoding);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  offset,  len  +  1,  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	aughtExceptionHandler.handleMissingName(buffer,  offset,  len  +  1,  encoding);	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(b);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
596	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
597	[BUG]  [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))  {  continue;  }	  if(!encoding.isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
598	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding.decode(buffer);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  encoding.decode(buffer);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " "  +  encoding.decode(buffer);	  throw    new    IllegalArgumentException(   "   ".equals(buffer);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
599	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  getName());  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( " "  +  getName());	  throw    new    IllegalArgumentException(   "   ".equals(buffer);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
600	[BUG]  [BUGGY]  return  new  String(buffer,  offset  +  len  -  1  +  length);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  +  len  -  1  +  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  +  len  -  1  +  length);	  return    new    String(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	124	None	replace
601	[BUG]  [BUGGY]  return  new  String(buffer,  offset  -  len  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  new  String(buffer,  offset  -  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  new  String(buffer,  offset  -  len  -  1);	  return    new    String(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	124	None	replace
602	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  continue;  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  continue;  }	  if(deFAULT_ENCODING    ==    FALLBACK_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
603	[BUG]  [BUGGY]  if(encoding  ==  DEFAULT_ENCODING)  {  continue;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  DEFAULT_ENCODING)  {  continue;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  DEFAULT_ENCODING)  {  continue;  }	  if(encoding!=    null)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
604	[BUG]  [BUGGY]  if(encoding!=  null)  {  continue  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding!=  null)  {  continue  false;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding!=  null)  {  continue  false;  }	  if(encoding!=    null)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
605	[BUG]  [BUGGY]  if(encoding  ==  null)  {  continue  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null)  {  continue  false;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null)  {  continue  false;  }	  if(encoding!=    null)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
606	[BUG]  [BUGGY]  if(encoding!=  null)  {  continue  new  String(buffer,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding!=  null)  {  continue  new  String(buffer,  offset  +  len);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding!=  null)  {  continue  new  String(buffer,  offset  +  len);  }	  if(encoding!=    null)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
607	[BUG]  [BUGGY]  if(encoding!=  null)  {  continue   " ";  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding!=  null)  {  continue   " ";  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding!=  null)  {  continue   " ";  }	  if(encoding!=    null)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
608	[BUG]  [BUGGY]  unwrap(buffer,  offset,  len,  DEFAULT_ENCODING);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  unwrap(buffer,  offset,  len,  DEFAULT_ENCODING);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset,  len,  DEFAULT_ENCODING);	  unwrap(buffer,    offset,    len,    encoding);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
609	[BUG]  [BUGGY]  unwrap(buffer,  offset,  len,  encoding,  DEFAULT_ENCODING);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  unwrap(buffer,  offset,  len,  encoding,  DEFAULT_ENCODING);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset,  len,  encoding,  DEFAULT_ENCODING);	  unwrap(buffer,    offset,    len,    encoding);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
610	[BUG]  [BUGGY]  unwrap(buffer,  offset,  len,  encoding,  buffer.length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  unwrap(buffer,  offset,  len,  encoding,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset,  len,  encoding,  buffer.length);	  unwrap(buffer,    offset,    len,    encoding);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
611	[BUG]  [BUGGY]  unwrap(buffer,  offset,  len,  0,  encoding);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  unwrap(buffer,  offset,  len,  0,  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	unwrap(buffer,  offset,  len,  0,  encoding);	  unwrap(buffer,    offset,    len,    encoding);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
612	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  encoding.decode(buffer.toString()));  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  encoding.decode(buffer.toString()));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( " "  +  encoding.decode(buffer.toString()));	  throw    new    IllegalStateException(   "   ".equals(buffer.toString()));    	non-compiled	[CE]  <identifier>  expected	120	None	replace
613	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  len.toString());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  len.toString());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( " "  +  len.toString());	  throw    new    IllegalStateException(   "   ".equals(buffer.toString()));    	non-compiled	[CE]  <identifier>  expected	120	None	replace
614	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -	  if(len    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]    	non-compiled	[CE]  <identifier>  expected	24	None	replace
615	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  return  encoding.decode(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  return  encoding.decode(buffer,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  return  encoding.decode(buffer,  offset  +  len);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
616	[BUG]  [BUGGY]  if(!deFAULT_ENCODING.equals(buffer,  len))  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!deFAULT_ENCODING.equals(buffer,  len))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!deFAULT_ENCODING.equals(buffer,  len))  {  break;  }	  if(!deFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
617	[BUG]  [BUGGY]  if(!deFAULT_ENCODING.equals(b))  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!deFAULT_ENCODING.equals(b))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!deFAULT_ENCODING.equals(b))  {  break;  }	  if(!deFAULT_ENCODING.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
618	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    	non-compiled	[CE]  <identifier>  expected	27	None	replace
619	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    	non-compiled	[CE]  <identifier>  expected	27	None	replace
620	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset,  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    	non-compiled	[CE]  <identifier>  expected	27	None	replace
621	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1]);  System.arraycopy(buffer,  offset	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1]);    System.arraycopy(buffer,    offset,    	non-compiled	[CE]  <identifier>  expected	27	None	replace
622	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  deFAULT_ENCODING  >=  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  deFAULT_ENCODING  >=  FALLBACK_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  deFAULT_ENCODING  >=  FALLBACK_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    FALLBACK_ENCODING    ||    deFAULT_ENCODING    ==    FALLBACK_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
623	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  BYTE_MASK  ||  deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  BYTE_MASK  ||  deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  BYTE_MASK  ||  deFAULT_ENCODING  ==  FALLBACK_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    FALLBACK_ENCODING    ||    deFAULT_ENCODING    ==    FALLBACK_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
624	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  0,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  0,  len);	  return    encoding.decode(buffer,    offset    +    len,    len);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
625	[BUG]  [BUGGY]  if(encoding  ==  DEFAULT_FALLBACK_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  DEFAULT_FALLBACK_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  DEFAULT_FALLBACK_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    DEFAULT_FALLBACK_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
626	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer  ==  null  ||  buffer.length  <  =  0)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    buffer.length    <    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
627	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length!=  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  buffer.length!=  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  null  ||  buffer.length!=  0)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    buffer.length    <    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
628	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len,  length  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  len,  length  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len,  length  -  1);	  return    encoding.decode(buffer,    offset    +    len,    length);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
629	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer,  offset));  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer,  offset));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  name: "  +  buffer,  offset));	  throw    new    IllegalStateException(   "   ".equals(buffer,    offset));    	non-compiled	[CE]  <identifier>  expected	90	None	replace
630	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len  -  1);  return  encoding.decode(buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len  -  1);  return  encoding.decode(buffer,  offset  +  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len  -  1);  return  encoding.decode(buffer,  offset  +  len  -  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
631	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.toString();  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.toString();  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.toString();  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.toString();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
632	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.toString();  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.toString();  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.toString();	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.toString();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
633	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  0,  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  0,  len);	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.toString();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
634	[BUG]  [BUGGY]  if(deFAULT_ENCODING!=  null  &&  buffer.length  <  =  len)  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING!=  null  &&  buffer.length  <  =  len)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING!=  null  &&  buffer.length  <  =  len)  {  break;  }	  if(deFAULT_ENCODING!=    null    ||    buffer.length    <    =    len)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
635	[BUG]  [BUGGY]  if(buffer!=  null  ||  len  <  =  buffer.length)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer!=  null  ||  len  <  =  buffer.length)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer!=  null  ||  len  <  =  buffer.length)  {  break;  }	  if(deFAULT_ENCODING!=    null    ||    buffer.length    <    =    len)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
636	[BUG]  [BUGGY]  throw  new  IllegalStateException( "FallBACK_ENCODING  is  null. "  +  encoding.getName());  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "FallBACK_ENCODING  is  null. "  +  encoding.getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "FallBACK_ENCODING  is  null. "  +  encoding.getName());	  throw    new    IllegalStateException(   "   ".equals(encoding.getName()));    	non-compiled	[CE]  <identifier>  expected	119	None	replace
637	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  name  ' "  +  encoding.getName());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Unexpected  name  ' "  +  encoding.getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Unexpected  name  ' "  +  encoding.getName());	  throw    new    IllegalStateException(   "   ".equals(encoding.getName()));    	non-compiled	[CE]  <identifier>  expected	119	None	replace
638	[BUG]  [BUGGY]  encoding.decode(buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  encoding.decode(buffer,  offset  +  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	encoding.decode(buffer,  offset  +  len  -  1);	  encoding.decode(buffer,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	127	None	replace
639	[BUG]  [BUGGY]  ||(encoding!=  FALLBACK_ENCODING))  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(encoding!=  FALLBACK_ENCODING))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(encoding!=  FALLBACK_ENCODING))  {  break;  }	  ||(deFAULT_ENCODING    ==    FALLBACK_ENCODING))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
640	[BUG]  [BUGGY]  ||(deFAULT_ENCODING  ==  FALLBACK_ENCODING  &&  buffer.length  >  0))  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(deFAULT_ENCODING  ==  FALLBACK_ENCODING  &&  buffer.length  >  0))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(deFAULT_ENCODING  ==  FALLBACK_ENCODING  &&  buffer.length  >  0))  {  break;  }	  ||(deFAULT_ENCODING    ==    FALLBACK_ENCODING))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
641	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  name: "  +  encoding);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  name: "  +  encoding);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  name: "  +  encoding);	  throw    new    IllegalArgumentException(   "   ".equals(encoding));    	non-compiled	[CE]  <identifier>  expected	56	None	replace
642	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "FallBACK_ENCODING  cannot  be  decoded. ");  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "FallBACK_ENCODING  cannot  be  decoded. ");  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( "FallBACK_ENCODING  cannot  be  decoded. ");	  throw    new    IllegalArgumentException(   "   ".equals(encoding));    	non-compiled	[CE]  <identifier>  expected	56	None	replace
643	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset,  len,  start,  buffer.length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset,  len,  start,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset,  len,  start,  buffer.length);	  return    encoding.decode(buffer,    offset,    len,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
644	[BUG]  [BUGGY]  if(encoding.equals(buffer)||  encoding.isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding.equals(buffer)||  encoding.isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding.equals(buffer)||  encoding.isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  break;  }	  if(encoding.equals(buffer))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
645	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len  *  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  len  *  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len  *  1);	  return    encoding.decode(buffer,    offset    +    len    +    1);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
646	[BUG]  [BUGGY]  return  encoding.parse(buffer,  offset  +  len  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parse(buffer,  offset  +  len  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parse(buffer,  offset  +  len  +  1);	  return    encoding.decode(buffer,    offset    +    len    +    1);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
647	[BUG]  [BUGGY]  if(encoding  ==  null  ||!encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  break;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding  ==  null  ||!encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding  ==  null  ||!encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  break;  }	  if(encoding!=    null    ||    encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
648	[BUG]  [BUGGY]  return  encoding.parse(buffer,  offset  +  len);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parse(buffer,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parse(buffer,  offset  +  len);	  return    encoding.decode(buffer,    offset    +    1);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
649	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  name: "  +  encoding.getName());  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  name: "  +  encoding.getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  name: "  +  encoding.getName());	  throw    new    IllegalArgumentException(   "   ".equals(encoding.getName()));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
650	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Can  not  parse  encoding: "  +  encoding.getName());  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Can  not  parse  encoding: "  +  encoding.getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( "Can  not  parse  encoding: "  +  encoding.getName());	  throw    new    IllegalArgumentException(   "   ".equals(encoding.getName()));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
651	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "' "  +  encoding.getName());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "' "  +  encoding.getName());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( "' "  +  encoding.getName());	  throw    new    IllegalArgumentException(   "   ".equals(encoding.getName()));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
652	[BUG]  [BUGGY]  because(deFAULT_ENCODING!=  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  because(deFAULT_ENCODING!=  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	because(deFAULT_ENCODING!=  0)  {  break;  }	  because(deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
653	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  null  &&  buffer.length  >  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  null  &&  buffer.length  >  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  null  &&  buffer.length  >  0)  {  break;  }	  if(deFAULT_ENCODING!=    null    &&    buffer.length    >    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
654	[BUG]  [BUGGY]  if(buffer!=  null  &&  deFAULT_ENCODING.length  >  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer!=  null  &&  deFAULT_ENCODING.length  >  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer!=  null  &&  deFAULT_ENCODING.length  >  0)  {  break;  }	  if(deFAULT_ENCODING!=    null    &&    buffer.length    >    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
655	[BUG]  [BUGGY]  if(encoding!=  null  &&  buffer.length  >  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(encoding!=  null  &&  buffer.length  >  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(encoding!=  null  &&  buffer.length  >  0)  {  break;  }	  if(deFAULT_ENCODING!=    null    &&    buffer.length    >    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
656	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  len!=  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  null  ||  len!=  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  null  ||  len!=  0)  {  break;  }	  if(deFAULT_ENCODING    ==    null    ||    len    <    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
657	[BUG]  [BUGGY]  ||(buffer.length!=  0)||(deFAULT_ENCODING.equals(encoding)))  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  ||(buffer.length!=  0)||(deFAULT_ENCODING.equals(encoding)))  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	||(buffer.length!=  0)||(deFAULT_ENCODING.equals(encoding)))  {  break;  }	  ||(deFAULT_ENCODING!=    null    &&    buffer.length    >    0)||(deFAULT_ENCODING.equals(encoding)))    {    break;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
658	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  return  encoding.decode(buffer,  offset  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  return  encoding.decode(buffer,  offset  +  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  return  encoding.decode(buffer,  offset  +  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    1);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
659	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  1,  length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  1,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  1,  length);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    1);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
660	[BUG]  [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  1);  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  1);  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset  +  1);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset    +    1);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
661	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "' "  +  encoding.getMessage());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "' "  +  encoding.getMessage());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( "' "  +  encoding.getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
662	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Can  not  parse  name: "  +  buffer.getMessage());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Can  not  parse  name: "  +  buffer.getMessage());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( "Can  not  parse  name: "  +  buffer.getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
663	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "' "  +  getMessage());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "' "  +  getMessage());  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalArgumentException( "' "  +  getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
664	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len  *  1).toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  len  *  1).toString();  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len  *  1).toString();	  return    encoding.decode(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
665	[BUG]  [BUGGY]  return  encoding.parse(buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.parse(buffer,  offset  +  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.parse(buffer,  offset  +  len  -  1);	  return    encoding.decode(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
666	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len  *  1.0  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  len  *  1.0  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len  *  1.0  -  1);	  return    encoding.decode(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
667	[BUG]  [BUGGY]  return  encoding.decode(buffer,  offset  +  len  -  2);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  encoding.decode(buffer,  offset  +  len  -  2);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  encoding.decode(buffer,  offset  +  len  -  2);	  return    encoding.decode(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
668	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(buffer,  offset  +  len  -  1));  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( " ".equals(buffer,  offset  +  len  -  1));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( " ".equals(buffer,  offset  +  len  -  1));	  throw    new    IllegalStateException(   "   ".equals(buffer,    offset    +    len));    	non-compiled	[CE]  <identifier>  expected	88	None	replace
669	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  parse  name: "  +  buffer,  offset  +  len));  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  parse  name: "  +  buffer,  offset  +  len));  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Can  not  parse  name: "  +  buffer,  offset  +  len));	  throw    new    IllegalStateException(   "   ".equals(buffer,    offset    +    len));    	non-compiled	[CE]  <identifier>  expected	88	None	replace
670	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  encoding: "  +  offset);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  encoding: "  +  offset);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	throw  new  IllegalStateException( "Failed  to  parse  encoding: "  +  offset);	  throw    new    IllegalStateException(   "Failed    to    parse    encoding.   ");    	non-compiled	[CE]  <identifier>  expected	118	None	replace
671	[BUG]  [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  len  ==  DEFAULT_ENCODING)  {  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  len  ==  DEFAULT_ENCODING)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(deFAULT_ENCODING  ==  FALLBACK_ENCODING  ||  len  ==  DEFAULT_ENCODING)  {  break;  }	  if(deFAULT_ENCODING    ==    FALLBACK_ENCODING    ||    deFAULT_ENCODING    ==    DEFAULT_ENCODING)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
672	[BUG]  [BUGGY]  return  buffer.decode(b,  offset  +  len);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  return  buffer.decode(b,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	return  buffer.decode(b,  offset  +  len);	  return    buffer.decode(encoding,    offset    +    len);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
673	[BUG]  [BUGGY]  if(buffer.equals(deFAULT_ENCODING)||  buffer.length  ==  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(buffer.equals(deFAULT_ENCODING)||  buffer.length  ==  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(buffer.equals(deFAULT_ENCODING)||  buffer.length  ==  0)  {  break;  }	  if(deFAULT_ENCODING.equals(buffer)||    buffer.length    ==    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
674	[BUG]  [BUGGY]  if(!deFAULT_ENCODING.equals(buffer)&&  buffer.length  ==  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  if(!deFAULT_ENCODING.equals(buffer)&&  buffer.length  ==  0)  {  break;  }  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	if(!deFAULT_ENCODING.equals(buffer)&&  buffer.length  ==  0)  {  break;  }	  if(deFAULT_ENCODING.equals(buffer)||    buffer.length    ==    0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
675	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset  +  len,  buffer,  0,  length);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset  +  len,  buffer,  0,  length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset  +  len,  buffer,  0,  length);	  System.arraycopy(buffer,    offset    +    len,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
676	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset  +  len,  b,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset  +  len,  b,  0,  buffer.length);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset  +  len,  b,  0,  buffer.length);	  System.arraycopy(buffer,    offset    +    len,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
677	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length  -  start);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  System.arraycopy(buffer,  offset  +  len,  0,  buffer.length  -  start);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	System.arraycopy(buffer,  offset  +  len,  0,  buffer.length  -  start);	  System.arraycopy(buffer,    offset    +    len,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
678	[BUG]  [BUGGY]  scan(buffer,  offset  +  len  -  1);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  scan(buffer,  offset  +  len  -  1);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	scan(buffer,  offset  +  len  -  1);	  unwrap(buffer,    offset    +    len    -    1);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
679	[BUG]  [BUGGY]  _throwAsIOException( " ");  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  _throwAsIOException( " ");  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	_throwAsIOException( " ");	  _reportUnsupportedOperation();    	non-compiled	[CE]  <identifier>  expected	129	None	replace
680	[BUG]  [BUGGY]  _reportError( "Can  not  parse  name: "+buffer,  offset  +  len);  [timeout]  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {      [BUGGY]  _reportError( "Can  not  parse  name: "+buffer,  offset  +  len);  [BUGGY]      }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	290	290	1	replace	_reportError( "Can  not  parse  name: "+buffer,  offset  +  len);	  _reportUnsupportedOperation();    	non-compiled	[timeout]	129	None	replace
