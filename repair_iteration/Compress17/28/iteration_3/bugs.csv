bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  length  +  1);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  encoding,  0,  length  +  1);	  System.arraycopy(buffer,    offset,    encoding,    0,    length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
2	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  buffer.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  encoding,  0,  buffer.length);	  System.arraycopy(buffer,    offset,    encoding,    0,    length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
3	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  length  -  1);  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  encoding,  0,  length  -  1);	  System.arraycopy(buffer,    offset,    encoding,    0,    length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
4	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  length,  0);  [CE]  <identifier>  expected  [FE]                                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  length,  0);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  encoding,  0,  length,  0);	  System.arraycopy(buffer,    offset,    encoding,    0,    length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
5	[BUG]  [BUGGY]  While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(encoding!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
6	[BUG]  [BUGGY]  While(encoding!=  null  &&  buffer.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  While(encoding!=  null  &&  buffer.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	While(encoding!=  null  &&  buffer.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(encoding!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
7	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	throw  new  IllegalArgumentException( " ");	  if(encoding!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
8	[BUG]  [BUGGY]  While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ".equals(encoding.getName()));  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ".equals(encoding.getName()));  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ".equals(encoding.getName()));  }	  if(encoding!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
9	[BUG]  [BUGGY]  While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(encoding!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
10	[BUG]  [BUGGY]  While(encoding!=  null  &&  buffer.length  >  0)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  While(encoding!=  null  &&  buffer.length  >  0)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	While(encoding!=  null  &&  buffer.length  >  0)  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(encoding!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
11	[BUG]  [BUGGY]  While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ".toString());  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ".toString());  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ".toString());  }	  if(encoding!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
12	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  bytes,  0,  len);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  bytes,  0,  len);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  bytes,  0,  len);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
13	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len  -  1);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len  -  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
14	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buf,  0,  len);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  buf,  0,  len);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  buf,  0,  len);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
15	[BUG]  [BUGGY]  int  len  =  offset  +  length  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  +  length  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  +  length  +  1;	  int    len    =    offset    +    length;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
16	[BUG]  [BUGGY]  int  len  =  length  +  offset;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  +  offset;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  +  offset;	  int    len    =    offset    +    length;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
17	[BUG]  [BUGGY]  int  len  =  offset  +  length  *  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  +  length  *  BYTE_MASK;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  +  length  *  BYTE_MASK;	  int    len    =    offset    +    length;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
18	[BUG]  [BUGGY]  int  len  =  buffer.length  +  length;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.length  +  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  +  length;	  int    len    =    offset    +    length;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
19	[BUG]  [BUGGY]  int  len  =  buffer.length  +  offset;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.length  +  offset;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  +  offset;	  int    len    =    offset    +    length;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
20	[BUG]  [BUGGY]  int  len  =  offset  +  length  -  2;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  +  length  -  2;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  +  length  -  2;	  int    len    =    offset    +    length;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
21	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length  +  1,  encoding);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseName(buffer,  offset,  length  +  1,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length  +  1,  encoding);	  int    len    =    _parseName(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
22	[BUG]  [BUGGY]  char  len  =  _parseName(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  _parseName(buffer,  offset,  length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  _parseName(buffer,  offset,  length  +  1);	  int    len    =    _parseName(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
23	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseName(buffer,  offset,  length  +  2);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length  +  2);	  int    len    =    _parseName(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
24	[BUG]  [BUGGY]  int  len  =  parseName(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  parseName(buffer,  offset,  length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  parseName(buffer,  offset,  length  +  1);	  int    len    =    _parseName(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
25	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding.length  +  1);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding.length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length,  encoding.length  +  1);	  int    len    =    _parseName(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
26	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  length,  encoding,  0,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  length,  encoding,  0,  len);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  length,  encoding,  0,  len);	  System.arraycopy(buffer,    offset,    encoding,    0,    len);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
27	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  1);	  int    len    =    encoding.decode(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
28	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  0,  encoding.length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  0,  encoding.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  0,  encoding.length);	  int    len    =    encoding.decode(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
29	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  2);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  2);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  2);	  int    len    =    encoding.decode(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
30	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  0,  buffer.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  0,  buffer.length);	  int    len    =    encoding.decode(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
31	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  3);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  3);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  3);	  int    len    =    encoding.decode(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
32	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  4);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  4);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  4);	  int    len    =    encoding.decode(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
33	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  bytes,  0,  length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  bytes,  0,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  encoding,  bytes,  0,  length);	  System.arraycopy(buffer,    offset,    bytes,    0,    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
34	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  bytes,  0,  encoding.length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  bytes,  0,  encoding.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  bytes,  0,  encoding.length);	  System.arraycopy(buffer,    offset,    bytes,    0,    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
35	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length,  0,  length);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length,  0,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length,  0,  length);	  System.arraycopy(buffer,    offset,    bytes,    0,    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
36	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length,  encoding);	  System.arraycopy(buffer,    offset,    bytes,    0,    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
37	[BUG]  [BUGGY]  int  len  =  buffer.length  /  1;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.length  /  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  /  1;	  int    len    =    buffer.length    +    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
38	[BUG]  [BUGGY]  int  len  =  buffer.length  +  2;  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.length  +  2;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  +  2;	  int    len    =    buffer.length    +    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
39	[BUG]  [BUGGY]  int  len  =  buffer.length();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.length();  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length();	  int    len    =    buffer.getLength();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
40	[BUG]  [BUGGY]  int  len  =  buffer.getLength()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.getLength()  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.getLength()  +  1;	  int    len    =    buffer.getLength();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
41	[BUG]  [BUGGY]  int  len  =  buffer.getLength()  +  length;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.getLength()  +  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.getLength()  +  length;	  int    len    =    buffer.getLength();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
42	[BUG]  [BUGGY]  int  len  =  buffer.getLength()  -  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.getLength()  -  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.getLength()  -  1;	  int    len    =    buffer.getLength();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
43	[BUG]  [BUGGY]  int  len  =  this.buffer.getLength();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  this.buffer.getLength();  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  this.buffer.getLength();	  int    len    =    buffer.getLength();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
44	[BUG]  [BUGGY]  String  len  =  _parseName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  String  len  =  _parseName(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	String  len  =  _parseName(buffer,  offset,  length);	  char    len    =    _parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
45	[BUG]  [BUGGY]  char  len  =  _parseName(buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  _parseName(buffer,  offset,  length,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  _parseName(buffer,  offset,  length,  encoding);	  char    len    =    _parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
46	[BUG]  [BUGGY]  Character  len  =  _parseName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  Character  len  =  _parseName(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	Character  len  =  _parseName(buffer,  offset,  length);	  char    len    =    _parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
47	[BUG]  [BUGGY]  Char  len  =  _parseName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  Char  len  =  _parseName(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	Char  len  =  _parseName(buffer,  offset,  length);	  char    len    =    _parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
48	[BUG]  [BUGGY]  char  len  =  encoding._parseName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  encoding._parseName(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding._parseName(buffer,  offset,  length);	  char    len    =    _parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
49	[BUG]  [BUGGY]  String  len  =  encoding.decode(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  String  len  =  encoding.decode(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	String  len  =  encoding.decode(buffer,  offset,  length);	  char    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
50	[BUG]  [BUGGY]  char  len  =  encoding.decode(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  encoding.decode(buffer,  offset,  length,  0);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.decode(buffer,  offset,  length,  0);	  char    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
51	[BUG]  [BUGGY]  char  len  =  encoding.decode(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  encoding.decode(buffer,  offset,  length,  buffer.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.decode(buffer,  offset,  length,  buffer.length);	  char    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
52	[BUG]  [BUGGY]  Character  len  =  encoding.decode(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  Character  len  =  encoding.decode(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	Character  len  =  encoding.decode(buffer,  offset,  length);	  char    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
53	[BUG]  [BUGGY]  char  len  =  encoding.decode(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  encoding.decode(buffer,  offset,  length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.decode(buffer,  offset,  length  +  1);	  char    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
54	[BUG]  [BUGGY]  int  len  =  encoding.decodeBytes(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decodeBytes(buffer,  offset,  length,  buffer.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decodeBytes(buffer,  offset,  length,  buffer.length);	  int    len    =    encoding.decodeBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
55	[BUG]  [BUGGY]  int  len  =  encoding.decodeBytes(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decodeBytes(buffer,  offset,  length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decodeBytes(buffer,  offset,  length  +  1);	  int    len    =    encoding.decodeBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
56	[BUG]  [BUGGY]  int  len  =  encoding.decodeBytes(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decodeBytes(buffer,  offset,  length,  0);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decodeBytes(buffer,  offset,  length,  0);	  int    len    =    encoding.decodeBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
57	[BUG]  [BUGGY]  int  len  =  encoding.parseBytes(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parseBytes(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parseBytes(buffer,  offset,  length);	  int    len    =    encoding.decodeBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
58	[BUG]  [BUGGY]  byte  len  =  encoding.decodeBytes(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  encoding.decodeBytes(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  encoding.decodeBytes(buffer,  offset,  length);	  int    len    =    encoding.decodeBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
59	[BUG]  [BUGGY]  int  len  =  encoding.decodeBytes(buffer,  offset,  0,  length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decodeBytes(buffer,  offset,  0,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decodeBytes(buffer,  offset,  0,  length);	  int    len    =    encoding.decodeBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
60	[BUG]  [BUGGY]  int  len  =  encoding.decodeBytes(buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decodeBytes(buffer,  offset,  length,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decodeBytes(buffer,  offset,  length,  encoding);	  int    len    =    encoding.decodeBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
61	[BUG]  [BUGGY]  int  len  =  encoding._parseName(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding._parseName(buffer,  offset,  length,  buffer.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding._parseName(buffer,  offset,  length,  buffer.length);	  int    len    =    encoding._parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
62	[BUG]  [BUGGY]  int  len  =  encoding._parseName(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding._parseName(buffer,  offset,  length,  0);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding._parseName(buffer,  offset,  length,  0);	  int    len    =    encoding._parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
63	[BUG]  [BUGGY]  int  len  =  encoding._parseName(buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding._parseName(buffer,  offset,  length,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding._parseName(buffer,  offset,  length,  encoding);	  int    len    =    encoding._parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
64	[BUG]  [BUGGY]  int  len  =  encoding._parseName(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding._parseName(buffer,  offset,  length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding._parseName(buffer,  offset,  length  +  1);	  int    len    =    encoding._parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
65	[BUG]  [BUGGY]  byte  len  =  encoding._parseName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  encoding._parseName(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  encoding._parseName(buffer,  offset,  length);	  int    len    =    encoding._parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
66	[BUG]  [BUGGY]  int  len  =  encoding._parseName(buffer,  offset,  length,  b);  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding._parseName(buffer,  offset,  length,  b);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding._parseName(buffer,  offset,  length,  b);	  int    len    =    encoding._parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
67	[BUG]  [BUGGY]  int  len  =  encoding.length  /  2;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length  /  2;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  /  2;	  int    len    =    encoding.length    -    2;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
68	[BUG]  [BUGGY]  int  len  =  encoding.length  -  4;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length  -  4;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  -  4;	  int    len    =    encoding.length    -    2;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
69	[BUG]  [BUGGY]  int  len  =  buffer.length  -  2;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.length  -  2;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  -  2;	  int    len    =    encoding.length    -    2;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
70	[BUG]  [BUGGY]  String  len  =  encoding.length;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  String  len  =  encoding.length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	String  len  =  encoding.length;	  char    len    =    encoding.length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
71	[BUG]  [BUGGY]  char  len  =  encoding.charAt(offset);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  encoding.charAt(offset);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.charAt(offset);	  char    len    =    encoding.length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
72	[BUG]  [BUGGY]  Char  len  =  encoding.charAt(offset);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  Char  len  =  encoding.charAt(offset);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	Char  len  =  encoding.charAt(offset);	  char    len    =    encoding.length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
73	[BUG]  [BUGGY]  char  len  =  encoding.charAt(offset,  length);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  encoding.charAt(offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.charAt(offset,  length);	  char    len    =    encoding.length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
74	[BUG]  [BUGGY]  char  len  =  encoding.charAt(offset  +  length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  encoding.charAt(offset  +  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.charAt(offset  +  length);	  char    len    =    encoding.length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
75	[BUG]  [BUGGY]  char  len  =  encoding.length  -  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  encoding.length  -  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.length  -  1;	  char    len    =    encoding.length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
76	[BUG]  [BUGGY]  int  len  =  offset  -  1  +  length;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  -  1  +  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  -  1  +  length;	  int    len    =    length    -    1    +    offset;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
77	[BUG]  [BUGGY]  int  len  =  length  -  1  +  buffer.length;  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  -  1  +  buffer.length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  -  1  +  buffer.length;	  int    len    =    length    -    1    +    offset;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
78	[BUG]  [BUGGY]  int  len  =  length  -  1  +  offset  +  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  -  1  +  offset  +  BYTE_MASK;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  -  1  +  offset  +  BYTE_MASK;	  int    len    =    length    -    1    +    offset;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
79	[BUG]  [BUGGY]  int  len  =  length  -  1  +  offset  +  length;  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  -  1  +  offset  +  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  -  1  +  offset  +  length;	  int    len    =    length    -    1    +    offset;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
80	[BUG]  [BUGGY]  int  len  =  buffer.length  -  1  +  offset;  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.length  -  1  +  offset;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  -  1  +  offset;	  int    len    =    length    -    1    +    offset;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
81	[BUG]  [BUGGY]  int  len  =  length  -  1  +  offset  +  1;  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  -  1  +  offset  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  -  1  +  offset  +  1;	  int    len    =    length    -    1    +    offset;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
82	[BUG]  [BUGGY]  int  len  =  encoding.getLength()  +  offset;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getLength()  +  offset;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getLength()  +  offset;	  int    len    =    encoding.getLength()    +    length;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
83	[BUG]  [BUGGY]  int  len  =  encoding.getLength()  +  length  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getLength()  +  length  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getLength()  +  length  +  1;	  int    len    =    encoding.getLength()    +    length;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
84	[BUG]  [BUGGY]  int  len  =  encoding.getLength()  /  length;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getLength()  /  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getLength()  /  length;	  int    len    =    encoding.getLength()    +    length;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
85	[BUG]  [BUGGY]  int  len  =  encoding.length  -  1  +  offset;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length  -  1  +  offset;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  -  1  +  offset;	  int    len    =    encoding.length    -    1;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
86	[BUG]  [BUGGY]  int  len  =  offset  +  encoding.length  -  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  +  encoding.length  -  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  +  encoding.length  -  1;	  int    len    =    encoding.length    -    1;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
87	[BUG]  [BUGGY]  int  len  =  encoding.length  -  1  +  1;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length  -  1  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  -  1  +  1;	  int    len    =    encoding.length    -    1;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
88	[BUG]  [BUGGY]  int  len  =(length  >  0)?  buffer.length  :  0;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  >  0)?  buffer.length  :  0;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  >  0)?  buffer.length  :  0;	  int    len    =(length    >    0)?    length    :    0;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
89	[BUG]  [BUGGY]  int  len  =(length  >  0)?  length  -  1  :  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  >  0)?  length  -  1  :  0;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  >  0)?  length  -  1  :  0;	  int    len    =(length    >    0)?    length    :    0;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
90	[BUG]  [BUGGY]  int  len  =(length  <  0)?  length  :  0;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  <  0)?  length  :  0;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  <  0)?  length  :  0;	  int    len    =(length    >    0)?    length    :    0;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
91	[BUG]  [BUGGY]  int  len  =(length  <  1)?  length  :  0;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  <  1)?  length  :  0;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  <  1)?  length  :  0;	  int    len    =(length    >    0)?    length    :    0;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
92	[BUG]  [BUGGY]  int  len  =(length  >  1)?  length  :  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  >  1)?  length  :  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  >  1)?  length  :  1;	  int    len    =(length    >    0)?    length    :    0;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
93	[BUG]  [BUGGY]  int  len  =(length  >  0)?  1  :  0;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  >  0)?  1  :  0;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  >  0)?  1  :  0;	  int    len    =(length    >    0)?    length    :    0;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
94	[BUG]  [BUGGY]  int  len  =(length  <  2)?  length  :  0;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  <  2)?  length  :  0;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  <  2)?  length  :  0;	  int    len    =(length    >    0)?    length    :    0;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
95	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length  -  1,  encoding);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseName(buffer,  offset,  length  -  1,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length  -  1,  encoding);	  int    len    =    _parseName(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
96	[BUG]  [BUGGY]  char  len  =  _parseName(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  _parseName(buffer,  offset,  length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  _parseName(buffer,  offset,  length  -  1);	  int    len    =    _parseName(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
97	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding.length  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding.length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length,  encoding.length  -  1);	  int    len    =    _parseName(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
98	[BUG]  [BUGGY]  int  len  =  parseName(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  parseName(buffer,  offset,  length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  parseName(buffer,  offset,  length  -  1);	  int    len    =    _parseName(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
99	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseName(buffer,  offset,  length  -  2);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length  -  2);	  int    len    =    _parseName(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
100	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.length  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  encoding.length  +  1);	  int    len    =    encoding.decode(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
101	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length  +  1,  encoding.length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length  +  1,  encoding.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length  +  1,  encoding.length);	  int    len    =    encoding.decode(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
102	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length  +  2);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length  +  2);	  int    len    =    encoding.decode(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
103	[BUG]  [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  encoding.decode(buffer,  offset,  length  +  1);	  int    len    =    encoding.decode(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
104	[BUG]  [BUGGY]  int  len  =  encoding.length()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length()  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length()  +  1;	  int    len    =    encoding.length();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
105	[BUG]  [BUGGY]  int  len  =  encoding.length()  +  length;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length()  +  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length()  +  length;	  int    len    =    encoding.length();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
106	[BUG]  [BUGGY]  int  len  =  encoding.length()  *  2;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length()  *  2;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length()  *  2;	  int    len    =    encoding.length();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
107	[BUG]  [BUGGY]  int  len  =  length  -  encoding.length();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  -  encoding.length();  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  -  encoding.length();	  int    len    =    encoding.length();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
108	[BUG]  [BUGGY]  int  len  =  encoding.length()  -  1;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length()  -  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length()  -  1;	  int    len    =    encoding.length();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
109	[BUG]  [BUGGY]  int  len  =  b.decode(buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  b.decode(buffer,  offset,  length,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  b.decode(buffer,  offset,  length,  encoding);	  int    len    =    encoding.decode(buffer,    offset,    length,    b);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
110	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  b,  0);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  b,  0);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  b,  0);	  int    len    =    encoding.decode(buffer,    offset,    length,    b);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
111	[BUG]  [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length,  b);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length,  b);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  encoding.decode(buffer,  offset,  length,  b);	  int    len    =    encoding.decode(buffer,    offset,    length,    b);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
112	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  b,  false);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  b,  false);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  b,  false);	  int    len    =    encoding.decode(buffer,    offset,    length,    b);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
113	[BUG]  [BUGGY]  int  len  =  offset.length  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset.length  -  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset.length  -  1;	  int    len    =    offset.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
114	[BUG]  [BUGGY]  int  len  =  offset.length  -  2;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset.length  -  2;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset.length  -  2;	  int    len    =    offset.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
115	[BUG]  [BUGGY]  char  len  =  offset.length;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  offset.length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  offset.length;	  int    len    =    offset.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
116	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  buffer.length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  length,  buffer.length  -  1);	  int    len    =    encoding.decode(buffer,    offset    +    length    -    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
117	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  0);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  0);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  length,  0);	  int    len    =    encoding.decode(buffer,    offset    +    length    -    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
118	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  encoding.length  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  encoding.length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  length,  encoding.length  -  1);	  int    len    =    encoding.decode(buffer,    offset    +    length    -    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
119	[BUG]  [BUGGY]  char  len  =  encoding.decode(buffer,  offset  +  length  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  encoding.decode(buffer,  offset  +  length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.decode(buffer,  offset  +  length  -  1);	  int    len    =    encoding.decode(buffer,    offset    +    length    -    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
120	[BUG]  [BUGGY]  byte  len  =  encoding.decode(buffer,  offset  +  length  -  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  encoding.decode(buffer,  offset  +  length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  encoding.decode(buffer,  offset  +  length  -  1);	  int    len    =    encoding.decode(buffer,    offset    +    length    -    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
121	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  width  -  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  width  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  length,  width  -  1);	  int    len    =    encoding.decode(buffer,    offset    +    length    -    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
122	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  1);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  length,  1);	  int    len    =    encoding.decode(buffer,    offset    +    length    -    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
123	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.length  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  encoding.length  -  1);	  int    len    =    encoding.decode(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
124	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.getLength()  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.getLength()  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  encoding.getLength()  -  1);	  int    len    =    encoding.decode(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
125	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.getCharacterEncoding());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.getCharacterEncoding());  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  encoding.getCharacterEncoding());	  int    len    =    encoding.decode(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
126	[BUG]  [BUGGY]  char  len  =  encoding.decode(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  encoding.decode(buffer,  offset,  length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.decode(buffer,  offset,  length  -  1);	  int    len    =    encoding.decode(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
127	[BUG]  [BUGGY]  int  len  =  _parseInt(buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseInt(buffer,  offset,  length,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseInt(buffer,  offset,  length,  encoding);	  int    len    =    _parseInt(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
128	[BUG]  [BUGGY]  int  len  =  _parseInt(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseInt(buffer,  offset,  length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseInt(buffer,  offset,  length  +  1);	  int    len    =    _parseInt(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
129	[BUG]  [BUGGY]  int  len  =  _parseInt(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseInt(buffer,  offset,  length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseInt(buffer,  offset,  length  -  1);	  int    len    =    _parseInt(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
130	[BUG]  [BUGGY]  char  len  =  _parseCharacterEncoding(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  _parseCharacterEncoding(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  _parseCharacterEncoding(buffer,  offset,  length);	  int    len    =    _parseInt(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
131	[BUG]  [BUGGY]  char  len  =  _parseInt(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  _parseInt(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  _parseInt(buffer,  offset,  length);	  int    len    =    _parseInt(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
132	[BUG]  [BUGGY]  int  len  =  parseInt(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  parseInt(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  parseInt(buffer,  offset,  length);	  int    len    =    _parseInt(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
133	[BUG]  [BUGGY]  byte  len  =  _parseInt(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  _parseInt(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  _parseInt(buffer,  offset,  length);	  int    len    =    _parseInt(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
134	[BUG]  [BUGGY]  int  len  =  offset  +  1  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  +  1  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  +  1  +  1;	  int    len    =    length    -    1    +    1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
135	[BUG]  [BUGGY]  int  len  =  buffer.length  -  1  +  1;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.length  -  1  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  -  1  +  1;	  int    len    =    length    -    1    +    1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
136	[BUG]  [BUGGY]  int  len  =  length  /  1  +  1;  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  /  1  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  /  1  +  1;	  int    len    =    length    -    1    +    1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
137	[BUG]  [BUGGY]  int  len  =  length  -  offset  +  1;  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  -  offset  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  -  offset  +  1;	  int    len    =    length    -    1    +    1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
138	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding,  DEFAULT_ENCODING);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding,  DEFAULT_ENCODING);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length,  encoding,  DEFAULT_ENCODING);	  int    len    =    _parseName(buffer,    offset,    length,    encoding);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
139	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  DEFAULT_ENCODING);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  DEFAULT_ENCODING);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length,  DEFAULT_ENCODING);	  int    len    =    _parseName(buffer,    offset,    length,    encoding);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
140	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  0,  encoding.length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseName(buffer,  offset,  0,  encoding.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  0,  encoding.length);	  int    len    =    _parseName(buffer,    offset,    length,    encoding);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
141	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding,  0);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding,  0);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length,  encoding,  0);	  int    len    =    _parseName(buffer,    offset,    length,    encoding);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
142	[BUG]  [BUGGY]  byte  len  =  _parseName(buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  _parseName(buffer,  offset,  length,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  _parseName(buffer,  offset,  length,  encoding);	  int    len    =    _parseName(buffer,    offset,    length,    encoding);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
143	[BUG]  [BUGGY]  int  len  =  encoding.decodeName(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decodeName(buffer,  offset,  length,  0);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decodeName(buffer,  offset,  length,  0);	  int    len    =    encoding.decodeName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
144	[BUG]  [BUGGY]  int  len  =  encoding.decodeName(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decodeName(buffer,  offset,  length,  buffer.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decodeName(buffer,  offset,  length,  buffer.length);	  int    len    =    encoding.decodeName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
145	[BUG]  [BUGGY]  int  len  =  encoding.decodeName(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decodeName(buffer,  offset,  length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decodeName(buffer,  offset,  length  +  1);	  int    len    =    encoding.decodeName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
146	[BUG]  [BUGGY]  int  len  =  encoding.decodeName(buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decodeName(buffer,  offset,  length,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decodeName(buffer,  offset,  length,  encoding);	  int    len    =    encoding.decodeName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
147	[BUG]  [BUGGY]  char  len  =  encoding.decodeName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  encoding.decodeName(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.decodeName(buffer,  offset,  length);	  int    len    =    encoding.decodeName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
148	[BUG]  [BUGGY]  byte  len  =  encoding.decodeName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  encoding.decodeName(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  encoding.decodeName(buffer,  offset,  length);	  int    len    =    encoding.decodeName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
149	[BUG]  [BUGGY]  int  len  =  length  -  offset;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  -  offset;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  -  offset;	  int    len    =    offset    -    length;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
150	[BUG]  [BUGGY]  int  len  =  buffer.length  -  length;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.length  -  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  -  length;	  int    len    =    offset    -    length;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
151	[BUG]  [BUGGY]  int  len  =  offset  -  start;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  -  start;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  -  start;	  int    len    =    offset    -    length;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
152	[BUG]  [BUGGY]  int  len  =  offset  -  length  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  -  length  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  -  length  +  1;	  int    len    =    offset    -    length;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
153	[BUG]  [BUGGY]  int  len  =  encoding.length  -  offset;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length  -  offset;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  -  offset;	  int    len    =    offset    -    length;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
154	[BUG]  [BUGGY]  int  len  =  offset  -  length  -  1;  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  -  length  -  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  -  length  -  1;	  int    len    =    offset    -    length;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
155	[BUG]  [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length,  0);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parseName(buffer,  offset,  length,  0);	  int    len    =    encoding.parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
156	[BUG]  [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parseName(buffer,  offset,  length,  encoding);	  int    len    =    encoding.parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
157	[BUG]  [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length,  buffer.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parseName(buffer,  offset,  length,  buffer.length);	  int    len    =    encoding.parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
158	[BUG]  [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parseName(buffer,  offset,  length  +  1);	  int    len    =    encoding.parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
159	[BUG]  [BUGGY]  char  len  =  encoding.parseName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  encoding.parseName(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.parseName(buffer,  offset,  length);	  int    len    =    encoding.parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
160	[BUG]  [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length,  b);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length,  b);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parseName(buffer,  offset,  length,  b);	  int    len    =    encoding.parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
161	[BUG]  [BUGGY]  byte  len  =  encoding.parseName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  encoding.parseName(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  encoding.parseName(buffer,  offset,  length);	  int    len    =    encoding.parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
162	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  length  +  1);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  0,  length  +  1);	  int    len    =    encoding.decode(buffer,    offset,    0,    length);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
163	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  length,  encoding.length);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  length,  encoding.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  0,  length,  encoding.length);	  int    len    =    encoding.decode(buffer,    offset,    0,    length);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
164	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  length,  buffer.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  0,  length,  buffer.length);	  int    len    =    encoding.decode(buffer,    offset,    0,    length);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
165	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  length,  0);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  length,  0);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  0,  length,  0);	  int    len    =    encoding.decode(buffer,    offset,    0,    length);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
166	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  length  -  1);  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  0,  length  -  1);	  int    len    =    encoding.decode(buffer,    offset,    0,    length);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
167	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  buffer.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  0,  buffer.length);	  int    len    =    encoding.decode(buffer,    offset,    0,    length);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
168	[BUG]  [BUGGY]  int  len  =  length  -  buffer.length;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  -  buffer.length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  -  buffer.length;	  int    len    =    buffer.length    -    start;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
169	[BUG]  [BUGGY]  int  len  =  offset  +  start;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  +  start;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  +  start;	  int    len    =    buffer.length    -    start;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
170	[BUG]  [BUGGY]  int  len  =  offset.length  -  start;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset.length  -  start;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset.length  -  start;	  int    len    =    buffer.length    -    start;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
171	[BUG]  [BUGGY]  int  len  =  length  -  buffer.length  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  -  buffer.length  -  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  -  buffer.length  -  1;	  int    len    =    buffer.length    -    start;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
172	[BUG]  [BUGGY]  int  len  =  encoding.length  -  start  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length  -  start  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  -  start  +  1;	  int    len    =    encoding.length    -    start;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
173	[BUG]  [BUGGY]  int  len  =  length  -  encoding.length;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  -  encoding.length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  -  encoding.length;	  int    len    =    encoding.length    -    start;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
174	[BUG]  [BUGGY]  int  len  =  encoding.length  /  start;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length  /  start;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  /  start;	  int    len    =    encoding.length    -    start;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
175	[BUG]  [BUGGY]  int  len  =  buffer.getLength()  *  length;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.getLength()  *  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.getLength()  *  length;	  int    len    =    encoding.getLength()    *    length;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
176	[BUG]  [BUGGY]  int  len  =  encoding.getLength()  -  length;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getLength()  -  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getLength()  -  length;	  int    len    =    encoding.getLength()    *    length;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
177	[BUG]  [BUGGY]  int  len  =  buffer.getLength()  /  length;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.getLength()  /  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.getLength()  /  length;	  int    len    =    encoding.getLength()    *    length;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
178	[BUG]  [BUGGY]  int  len  =  encoding.getLength()  *  2;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getLength()  *  2;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getLength()  *  2;	  int    len    =    encoding.getLength()    *    length;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
179	[BUG]  [BUGGY]  int  len  =  encoding.getLength()  *  length  +  1;  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getLength()  *  length  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getLength()  *  length  +  1;	  int    len    =    encoding.getLength()    *    length;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
180	[BUG]  [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length,  buffer.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  encoding.decode(buffer,  offset,  length,  buffer.length);	  byte    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
181	[BUG]  [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length,  0);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  encoding.decode(buffer,  offset,  length,  0);	  byte    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
182	[BUG]  [BUGGY]  byte  len  =  encoding.parse(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  encoding.parse(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  encoding.parse(buffer,  offset,  length);	  byte    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
183	[BUG]  [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  0,  length);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  0,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  encoding.decode(buffer,  offset,  0,  length);	  byte    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
184	[BUG]  [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length,  0,  buffer.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  encoding.decode(buffer,  offset,  length,  0,  buffer.length);	  byte    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
185	[BUG]  [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length,  0);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parse(buffer,  offset,  length,  0);	  int    len    =    encoding.parse(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
186	[BUG]  [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length,  buffer.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parse(buffer,  offset,  length,  buffer.length);	  int    len    =    encoding.parse(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
187	[BUG]  [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parse(buffer,  offset,  length  +  1);	  int    len    =    encoding.parse(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
188	[BUG]  [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parse(buffer,  offset,  length,  encoding);	  int    len    =    encoding.parse(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
189	[BUG]  [BUGGY]  char  len  =  encoding.parse(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  encoding.parse(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.parse(buffer,  offset,  length);	  int    len    =    encoding.parse(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
190	[BUG]  [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  0,  length);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  0,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parse(buffer,  offset,  0,  length);	  int    len    =    encoding.parse(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
191	[BUG]  [BUGGY]  int  len  =  parseName(buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  parseName(buffer,  offset,  length,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  parseName(buffer,  offset,  length,  encoding);	  int    len    =    parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
192	[BUG]  [BUGGY]  char  len  =  parseName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  parseName(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  parseName(buffer,  offset,  length);	  int    len    =    parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
193	[BUG]  [BUGGY]  int  len  =  parseName(buffer,  offset,  encoding.length);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  parseName(buffer,  offset,  encoding.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  parseName(buffer,  offset,  encoding.length);	  int    len    =    parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
194	[BUG]  [BUGGY]  byte  len  =  parseName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  parseName(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  parseName(buffer,  offset,  length);	  int    len    =    parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
195	[BUG]  [BUGGY]  String  encoding  =  encoding.encodeName(buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  String  encoding  =  encoding.encodeName(buffer,  offset,  length,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	String  encoding  =  encoding.encodeName(buffer,  offset,  length,  encoding);	  String    encoding    =    encoding.encodeName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
196	[BUG]  [BUGGY]  String  encoding  =  encoding.encodeName(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  String  encoding  =  encoding.encodeName(buffer,  offset,  length,  0);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	String  encoding  =  encoding.encodeName(buffer,  offset,  length,  0);	  String    encoding    =    encoding.encodeName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
197	[BUG]  [BUGGY]  String  encoding  =  encoding.encodeName(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  String  encoding  =  encoding.encodeName(buffer,  offset,  length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	String  encoding  =  encoding.encodeName(buffer,  offset,  length  +  1);	  String    encoding    =    encoding.encodeName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
198	[BUG]  [BUGGY]  String  encoding  =  encoding.encodeName(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  String  encoding  =  encoding.encodeName(buffer,  offset,  length,  buffer.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	String  encoding  =  encoding.encodeName(buffer,  offset,  length,  buffer.length);	  String    encoding    =    encoding.encodeName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
199	[BUG]  [BUGGY]  char  encoding  =  encoding.encodeName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  encoding  =  encoding.encodeName(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  encoding  =  encoding.encodeName(buffer,  offset,  length);	  String    encoding    =    encoding.encodeName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
200	[BUG]  [BUGGY]  String  encoding  =  encoding.encodeName(buffer,  offset,  length,  1.0);  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  String  encoding  =  encoding.encodeName(buffer,  offset,  length,  1.0);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	String  encoding  =  encoding.encodeName(buffer,  offset,  length,  1.0);	  String    encoding    =    encoding.encodeName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
201	[BUG]  [BUGGY]  final  String  encoding  =  encoding.encodeName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  final  String  encoding  =  encoding.encodeName(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	final  String  encoding  =  encoding.encodeName(buffer,  offset,  length);	  String    encoding    =    encoding.encodeName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
202	[BUG]  [BUGGY]  int  len  =(length  <  <  1)?  1  :  length;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  <  <  1)?  1  :  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  <  <  1)?  1  :  length;	  int    len    =(length    <    <    1)?    0    :    length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
203	[BUG]  [BUGGY]  int  len  =(length  -  1)?  0  :  length;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  -  1)?  0  :  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  -  1)?  0  :  length;	  int    len    =(length    <    <    1)?    0    :    length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
204	[BUG]  [BUGGY]  int  len  =(length  <  <  1)?  0  :  length  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  <  <  1)?  0  :  length  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  <  <  1)?  0  :  length  +  1;	  int    len    =(length    <    <    1)?    0    :    length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
205	[BUG]  [BUGGY]  int  len  =(length  <  <  1)?  0  :  buffer.length;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  <  <  1)?  0  :  buffer.length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  <  <  1)?  0  :  buffer.length;	  int    len    =(length    <    <    1)?    0    :    length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
206	[BUG]  [BUGGY]  int  len  =(length  <  <  1)?  0  :  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  <  <  1)?  0  :  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  <  <  1)?  0  :  1;	  int    len    =(length    <    <    1)?    0    :    length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
207	[BUG]  [BUGGY]  int  len  =(length  +  1)?  0  :  length;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  +  1)?  0  :  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  +  1)?  0  :  length;	  int    len    =(length    <    <    1)?    0    :    length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
208	[BUG]  [BUGGY]  int  len  =(length  <  <  1)?  0  :  offset;  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  <  <  1)?  0  :  offset;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  <  <  1)?  0  :  offset;	  int    len    =(length    <    <    1)?    0    :    length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
209	[BUG]  [BUGGY]  int  len  =  encoding.indexOf(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.indexOf(buffer,  offset,  length,  0);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.indexOf(buffer,  offset,  length,  0);	  int    len    =    encoding.indexOf(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
210	[BUG]  [BUGGY]  int  len  =  encoding.indexOf(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.indexOf(buffer,  offset,  length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.indexOf(buffer,  offset,  length  +  1);	  int    len    =    encoding.indexOf(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
211	[BUG]  [BUGGY]  int  len  =  encoding.lengthOf(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.lengthOf(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.lengthOf(buffer,  offset,  length);	  int    len    =    encoding.indexOf(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
212	[BUG]  [BUGGY]  int  len  =  encoding.indexOf(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.indexOf(buffer,  offset,  length,  buffer.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.indexOf(buffer,  offset,  length,  buffer.length);	  int    len    =    encoding.indexOf(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
213	[BUG]  [BUGGY]  int  len  =  encoding.indexOf(buffer,  offset,  length,  -1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.indexOf(buffer,  offset,  length,  -1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.indexOf(buffer,  offset,  length,  -1);	  int    len    =    encoding.indexOf(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
214	[BUG]  [BUGGY]  int  len  =  encoding.lastIndexOf(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.lastIndexOf(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.lastIndexOf(buffer,  offset,  length);	  int    len    =    encoding.indexOf(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
215	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  buffer.length);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  buffer.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  length,  buffer.length);	  int    len    =    encoding.decode(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
216	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  1,  length);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  1,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  1,  length);	  int    len    =    encoding.decode(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
217	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  0,  buffer.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  length,  0,  buffer.length);	  int    len    =    encoding.decode(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
218	[BUG]  [BUGGY]  byte  len  =  encoding.decode(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  encoding.decode(buffer,  offset  +  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  encoding.decode(buffer,  offset  +  length);	  int    len    =    encoding.decode(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
219	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  1);	  int    len    =    encoding.decode(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
220	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  encoding.length);	  int    len    =    encoding.decode(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
221	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.charAt(offset));  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.charAt(offset));  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  encoding.charAt(offset));	  int    len    =    encoding.decode(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
222	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.charAt(offset  +  length));  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.charAt(offset  +  length));  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  encoding.charAt(offset  +  length));	  int    len    =    encoding.decode(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
223	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.getLength());  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.getLength());  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  encoding.getLength());	  int    len    =    encoding.decode(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
224	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  buffer.length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  buffer.length  +  1);	  int    len    =    encoding.decode(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
225	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  b.length  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  b.length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  b.length  -  1);	  int    len    =    encoding.decode(buffer,    offset,    length,    b.length);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
226	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  b.length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  b.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  0,  b.length);	  int    len    =    encoding.decode(buffer,    offset,    length,    b.length);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
227	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  b.length  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  b.length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  b.length  +  1);	  int    len    =    encoding.decode(buffer,    offset,    length,    b.length);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
228	[BUG]  [BUGGY]  int  len  =  b.decode(buffer,  offset,  length,  encoding.length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  b.decode(buffer,  offset,  length,  encoding.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  b.decode(buffer,  offset,  length,  encoding.length);	  int    len    =    encoding.decode(buffer,    offset,    length,    b.length);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
229	[BUG]  [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length,  b.length);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length,  b.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  encoding.decode(buffer,  offset,  length,  b.length);	  int    len    =    encoding.decode(buffer,    offset,    length,    b.length);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
230	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  0,  b.length);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  0,  b.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  0,  b.length);	  int    len    =    encoding.decode(buffer,    offset,    length,    b.length);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
231	[BUG]  [BUGGY]  int  len  =  buffer.length  +  length  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.length  +  length  -  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  +  length  -  1;	  int    len    =    offset    +    length    -    1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
232	[BUG]  [BUGGY]  int  len  =  offset  +  length  /  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  +  length  /  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  +  length  /  1;	  int    len    =    offset    +    length    -    1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
233	[BUG]  [BUGGY]  int  len  =  length  +  offset  -  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  +  offset  -  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  +  offset  -  1;	  int    len    =    offset    +    length    -    1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
234	[BUG]  [BUGGY]  int  len  =  offset  +  length  *  2  -  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  +  length  *  2  -  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  +  length  *  2  -  1;	  int    len    =    offset    +    length    -    1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
235	[BUG]  [BUGGY]  int  len  =  encoding.length  /  1;  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length  /  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  /  1;	  int    len    =    encoding.length    +    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
236	[BUG]  [BUGGY]  int  len  =  end  +  1;  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  end  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  end  +  1;	  int    len    =    start    +    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
237	[BUG]  [BUGGY]  int  len  =  start  +  length;  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  start  +  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  start  +  length;	  int    len    =    start    +    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
238	[BUG]  [BUGGY]  int  len  =  offset  +  2;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  +  2;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  +  2;	  int    len    =    offset    +    1;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
239	[BUG]  [BUGGY]  int  len  =  encoding.getUpperBound()  +  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getUpperBound()  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getUpperBound()  +  1;	  int    len    =    encoding.getLength()    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
240	[BUG]  [BUGGY]  int  len  =  buffer.getCharacterEncoding();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.getCharacterEncoding();  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.getCharacterEncoding();	  int    len    =    encoding.getCharacterEncoding();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
241	[BUG]  [BUGGY]  int  len  =  encoding.getDecodedCharacterEncoding();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getDecodedCharacterEncoding();  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getDecodedCharacterEncoding();	  int    len    =    encoding.getCharacterEncoding();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
242	[BUG]  [BUGGY]  int  len  =  encoding.getEndCharacterEncoding();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getEndCharacterEncoding();  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getEndCharacterEncoding();	  int    len    =    encoding.getCharacterEncoding();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
243	[BUG]  [BUGGY]  int  len  =  encoding.getCharacterEncoding(offset);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getCharacterEncoding(offset);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getCharacterEncoding(offset);	  int    len    =    encoding.getCharacterEncoding();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
244	[BUG]  [BUGGY]  int  len  =  encoding.getName();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getName();  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getName();	  int    len    =    encoding.getCharacterEncoding();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
245	[BUG]  [BUGGY]  int  len  =  width  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  width  -  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  width  -  1;	  int    len    =    offset    -    1;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
246	[BUG]  [BUGGY]  int  len  =  this.buffer.length  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  this.buffer.length  -  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  this.buffer.length  -  1;	  int    len    =    this.buffer.length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
247	[BUG]  [BUGGY]  int  len  =  this.buffer.length  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  this.buffer.length  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  this.buffer.length  +  1;	  int    len    =    this.buffer.length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
248	[BUG]  [BUGGY]  int  len  =  this.buffer.length  -  offset;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  this.buffer.length  -  offset;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  this.buffer.length  -  offset;	  int    len    =    this.buffer.length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
249	[BUG]  [BUGGY]  int  len  =  this.buffer.length  -  2;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  this.buffer.length  -  2;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  this.buffer.length  -  2;	  int    len    =    this.buffer.length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
250	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len  +  1);	  System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
251	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  byte,  0,  len);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  byte,  0,  len);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  byte,  0,  len);	  System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
252	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  buffer.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  b,  0,  buffer.length);	  System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
253	[BUG]  [BUGGY]  parseName(buffer,  offset,  length,  encoding,  DEFAULT_ENCODING);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  parseName(buffer,  offset,  length,  encoding,  DEFAULT_ENCODING);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	parseName(buffer,  offset,  length,  encoding,  DEFAULT_ENCODING);	  parseName(buffer,    offset,    length,    encoding);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
254	[BUG]  [BUGGY]  parseName(buffer,  offset,  length,  encoding,  BYTE_MASK);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  parseName(buffer,  offset,  length,  encoding,  BYTE_MASK);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	parseName(buffer,  offset,  length,  encoding,  BYTE_MASK);	  parseName(buffer,    offset,    length,    encoding);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
255	[BUG]  [BUGGY]  parseName(buffer,  offset,  length,  encoding,  null);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  parseName(buffer,  offset,  length,  encoding,  null);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	parseName(buffer,  offset,  length,  encoding,  null);	  parseName(buffer,    offset,    length,    encoding);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
256	[BUG]  [BUGGY]  parseName(buffer,  offset,  length,  encoding,  false);  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  parseName(buffer,  offset,  length,  encoding,  false);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	parseName(buffer,  offset,  length,  encoding,  false);	  parseName(buffer,    offset,    length,    encoding);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
257	[BUG]  [BUGGY]  parseName(buffer,  offset,  length,  encoding,  true);  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  parseName(buffer,  offset,  length,  encoding,  true);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	parseName(buffer,  offset,  length,  encoding,  true);	  parseName(buffer,    offset,    length,    encoding);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
258	[BUG]  [BUGGY]  parseName(buffer,  offset,  length,  encoding,  0);  [CE]  <identifier>  expected  [FE]                                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  parseName(buffer,  offset,  length,  encoding,  0);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	parseName(buffer,  offset,  length,  encoding,  0);	  parseName(buffer,    offset,    length,    encoding);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
259	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length  -  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
260	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  encoding.length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  encoding.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  encoding.length);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
261	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length,  encoding);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length,  encoding);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
262	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  +  1);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length  +  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
263	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  offset,  length,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	aughtExceptionHandler.handleMissingName(buffer,  offset,  length,  encoding);	  if(encoding    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
264	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	aughtExceptionHandler.throwAsIOException( " ");	  if(encoding    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
265	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	aughtExceptionHandler.handleMissingName(buffer,  offset,  length);	  if(encoding    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
266	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length,  encoding);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  b,  0,  length,  encoding);	  System.arraycopy(buffer,    offset,    b,    0,    length);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
267	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length  +  1);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  b,  0,  length  +  1);	  System.arraycopy(buffer,    offset,    b,    0,    length);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
268	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length  -  1);  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  b,  0,  length  -  1);	  System.arraycopy(buffer,    offset,    b,    0,    length);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
269	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
270	[BUG]  [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
271	[BUG]  [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
272	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
273	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  length,  encoding);  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  length,  encoding);  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  length,  encoding);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
274	[BUG]  [BUGGY]  int  len  =  offset  -  buffer.length;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  -  buffer.length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  -  buffer.length;	  int    len    =    buffer.length    -    offset;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
275	[BUG]  [BUGGY]  int  len  =  buffer.length  -  offset  +  length;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.length  -  offset  +  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  -  offset  +  length;	  int    len    =    buffer.length    -    offset;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
276	[BUG]  [BUGGY]  int  len  =  offset.length  -  buffer.length;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset.length  -  buffer.length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset.length  -  buffer.length;	  int    len    =    buffer.length    -    offset;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
277	[BUG]  [BUGGY]  int  len  =  buffer.length  -  offset  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.length  -  offset  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  -  offset  +  1;	  int    len    =    buffer.length    -    offset;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
278	[BUG]  [BUGGY]  int  len  =  offset  /  1;  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  /  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  /  1;	  int    len    =    length    /    1;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
279	[BUG]  [BUGGY]  int  len  =  length  /  2;  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  /  2;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  /  2;	  int    len    =    length    /    1;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
280	[BUG]  [BUGGY]  int  len  =  start  /  1;  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  start  /  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  start  /  1;	  int    len    =    length    /    1;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
281	[BUG]  [BUGGY]  int  len  =  encoding.length  -  2  +  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length  -  2  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  -  2  +  1;	  int    len    =    encoding.length    -    2;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
282	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len  +  1);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len  +  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
283	[BUG]  [BUGGY]  char  len  =  encoding.decode(buffer,  offset,  0,  length);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  encoding.decode(buffer,  offset,  0,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.decode(buffer,  offset,  0,  length);	  int    len    =    encoding.decode(buffer,    offset,    0,    length);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
284	[BUG]  [BUGGY]  int  len  =(length  <  =  0)?  length  :  0;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  <  =  0)?  length  :  0;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  <  =  0)?  length  :  0;	  int    len    =(length    >    0)?    length    :    0;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
285	[BUG]  [BUGGY]  int  len  =(length  >  0)?  offset  :  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  >  0)?  offset  :  0;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  >  0)?  offset  :  0;	  int    len    =(length    >    0)?    length    :    0;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
286	[BUG]  [BUGGY]  int  len  =  this.buffer.length  -  start;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  this.buffer.length  -  start;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  this.buffer.length  -  start;	  int    len    =    this.buffer.length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
287	[BUG]  [BUGGY]  attern(encoding.getName())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  attern(encoding.getName())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	attern(encoding.getName())  {  throw  new  IllegalArgumentException( " ");  }	  if(encoding!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
288	[BUG]  [BUGGY]  attern(encoding.getName())  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  attern(encoding.getName())  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	attern(encoding.getName())  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(encoding!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
289	[BUG]  [BUGGY]  allowNull(buffer);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  allowNull(buffer);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	allowNull(buffer);	  if(encoding!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
290	[BUG]  [BUGGY]  attern(encoding.toString())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  attern(encoding.toString())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	attern(encoding.toString())  {  throw  new  IllegalArgumentException( " ");  }	  if(encoding!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
291	[BUG]  [BUGGY]  attern(encoding.getName(),  offset,  length))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  attern(encoding.getName(),  offset,  length))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	attern(encoding.getName(),  offset,  length))  {  throw  new  IllegalArgumentException( " ");  }	  if(encoding!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
292	[BUG]  [BUGGY]  attern(encoding.getName(),  buffer,  offset  +  length))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  attern(encoding.getName(),  buffer,  offset  +  length))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	attern(encoding.getName(),  buffer,  offset  +  length))  {  throw  new  IllegalArgumentException( " ");  }	  if(encoding!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
293	[BUG]  [BUGGY]  allowUnsupportedOperation();  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  allowUnsupportedOperation();  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	allowUnsupportedOperation();	  if(encoding!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
294	[BUG]  [BUGGY]  int  len  =  encoding.length  -  buffer.length;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length  -  buffer.length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  -  buffer.length;	  int    len    =    encoding.length    -    start;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
295	[BUG]  [BUGGY]  int  len  =  offset  /  2;  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  /  2;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  /  2;	  int    len    =    length    /    1;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
296	[BUG]  [BUGGY]  int  len  =  length  /  4;  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  /  4;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  /  4;	  int    len    =    length    /    1;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
297	[BUG]  [BUGGY]  int  len  =  encoding.getLength()  *  4;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getLength()  *  4;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getLength()  *  4;	  int    len    =    encoding.getLength()    *    length;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
298	[BUG]  [BUGGY]  int  len  =  encoding.getLength()  *  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getLength()  *  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getLength()  *  1;	  int    len    =    encoding.getLength()    *    length;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
299	[BUG]  [BUGGY]  int  len  =(length  <  <  1)?  -1  :  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  <  <  1)?  -1  :  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  <  <  1)?  -1  :  1;	  int    len    =(length    <    <    1)?    0    :    length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
300	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length  -  1  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseName(buffer,  offset,  length  -  1  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length  -  1  +  1);	  int    len    =    _parseName(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
301	[BUG]  [BUGGY]  String  encoding  =  DEFAULT_ENCODING.encodeName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  String  encoding  =  DEFAULT_ENCODING.encodeName(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	String  encoding  =  DEFAULT_ENCODING.encodeName(buffer,  offset,  length);	  String    encoding    =    encoding.encodeName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
302	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  buffer.length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  buffer.length  -  1);	  int    len    =    encoding.decode(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
303	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.limit);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.limit);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  encoding.limit);	  int    len    =    encoding.decode(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
304	[BUG]  [BUGGY]  While(encoding!=  null  &&  buffer.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  While(encoding!=  null  &&  buffer.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	While(encoding!=  null  &&  buffer.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(encoding    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
305	[BUG]  [BUGGY]  While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ");  System.arraycopy(buffer,  offset,  buffer,  0,  encoding.length);  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ");  System.arraycopy(buffer,  offset,  buffer,  0,  encoding.length);  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ");  System.arraycopy(buffer,  offset,  buffer,  0,  encoding.length);  }	  if(encoding    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
306	[BUG]  [BUGGY]  While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ");  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ");  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ");  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }	  if(encoding    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
307	[BUG]  [BUGGY]  While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ");  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ");  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	While(encoding!=  null)  {  throw  new  IllegalArgumentException( " ");  System.arraycopy(buffer,  offset,  buffer,  0,  length);	  if(encoding    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
308	[BUG]  [BUGGY]  int  len  =  offset  +  length  -  1  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  +  length  -  1  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  +  length  -  1  +  1;	  int    len    =    offset    +    length    -    1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
309	[BUG]  [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  encoding.decode(buffer,  offset,  length  -  1);	  byte    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
310	[BUG]  [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  encoding.decode(buffer,  offset,  length,  encoding);	  byte    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
311	[BUG]  [BUGGY]  int  len  =  buffer.length  -  start  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.length  -  start  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  -  start  +  1;	  int    len    =    buffer.length    -    start;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
312	[BUG]  [BUGGY]  int  len  =  start  -  buffer.length;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  start  -  buffer.length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  start  -  buffer.length;	  int    len    =    buffer.length    -    start;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
313	[BUG]  [BUGGY]  int  len  =  buffer.length  /  start;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.length  /  start;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  /  start;	  int    len    =    buffer.length    -    start;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
314	[BUG]  [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length,  0,  buffer.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parse(buffer,  offset,  length,  0,  buffer.length);	  int    len    =    encoding.parse(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
315	[BUG]  [BUGGY]  int  len  =  encoding.getEnd()  +  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getEnd()  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getEnd()  +  1;	  int    len    =    encoding.getLength()    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
316	[BUG]  [BUGGY]  int  len  =  encoding.getEnd();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getEnd();  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getEnd();	  int    len    =    encoding.getLength()    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
317	[BUG]  [BUGGY]  int  len  =  buffer.length  -  1L;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.length  -  1L;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  -  1L;	  int    len    =    buffer.length    -    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
318	[BUG]  [BUGGY]  int  len  =  buffer.length  -  1  +  length;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  buffer.length  -  1  +  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  -  1  +  length;	  int    len    =    buffer.length    -    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
319	[BUG]  [BUGGY]  int  len  =(offset  <  length)?  buffer.length  :  offset.length;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(offset  <  length)?  buffer.length  :  offset.length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(offset  <  length)?  buffer.length  :  offset.length;	  int    len    =    offset.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
320	[BUG]  [BUGGY]  int  len  =(offset  <  0)?  length  :  buffer.length;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(offset  <  0)?  length  :  buffer.length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(offset  <  0)?  length  :  buffer.length;	  int    len    =    offset.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
321	[BUG]  [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
322	[BUG]  [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
323	[BUG]  [BUGGY]  int  len  =  parseName(buffer,  offset,  0,  length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  parseName(buffer,  offset,  0,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  parseName(buffer,  offset,  0,  length);	  int    len    =    parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
324	[BUG]  [BUGGY]  int  len  =  parseName(buffer,  offset,  encoding);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  parseName(buffer,  offset,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  parseName(buffer,  offset,  encoding);	  int    len    =    parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
325	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  len,  0,  encoding.length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  len,  0,  encoding.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  len,  0,  encoding.length);	  System.arraycopy(buffer,    offset,    encoding,    0,    len);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
326	[BUG]  [BUGGY]  int  len  =(encoding!=  null)?  encoding.length()  :  0;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(encoding!=  null)?  encoding.length()  :  0;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(encoding!=  null)?  encoding.length()  :  0;	  int    len    =    encoding.length();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
327	[BUG]  [BUGGY]  int  len  =  encoding.length()  *  length;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length()  *  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length()  *  length;	  int    len    =    encoding.length();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
328	[BUG]  [BUGGY]  int  len  =  encoding.length  +  2;  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length  +  2;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  +  2;	  int    len    =    encoding.length    +    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
329	[BUG]  [BUGGY]  int  len  =  encoding.indexOf(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.indexOf(buffer,  offset,  length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.indexOf(buffer,  offset,  length  -  1);	  int    len    =    encoding.indexOf(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
330	[BUG]  [BUGGY]  char  len  =  encoding.indexOf(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  encoding.indexOf(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.indexOf(buffer,  offset,  length);	  int    len    =    encoding.indexOf(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
331	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  len,  0,  length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  len,  0,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  len,  0,  length);	  System.arraycopy(buffer,    offset,    bytes,    0,    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
332	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  length,  buffer,  0,  length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  length,  buffer,  0,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  length,  buffer,  0,  length);	  System.arraycopy(buffer,    offset,    bytes,    0,    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
333	[BUG]  [BUGGY]  int  len  =(length  <  <  1)?  _parseInt(buffer,  offset,  length):  _parseInt(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  <  <  1)?  _parseInt(buffer,  offset,  length):  _parseInt(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  <  <  1)?  _parseInt(buffer,  offset,  length):  _parseInt(buffer,  offset,  length);	  int    len    =    _parseInt(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
334	[BUG]  [BUGGY]  int  len  =  _parseInt(buffer,  offset,  length  -  start);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseInt(buffer,  offset,  length  -  start);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseInt(buffer,  offset,  length  -  start);	  int    len    =    _parseInt(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
335	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  0,  encoding.length  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  0,  encoding.length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  length,  0,  encoding.length  -  1);	  int    len    =    encoding.decode(buffer,    offset    +    length    -    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
336	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  0,  length  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  0,  length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  length,  0,  length  -  1);	  int    len    =    encoding.decode(buffer,    offset    +    length    -    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
337	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  end  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  end  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  length,  end  -  1);	  int    len    =    encoding.decode(buffer,    offset    +    length    -    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
338	[BUG]  [BUGGY]  parseName(buffer,  offset,  length,  DEFAULT_ENCODING);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  parseName(buffer,  offset,  length,  DEFAULT_ENCODING);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	parseName(buffer,  offset,  length,  DEFAULT_ENCODING);	  parseName(buffer,    offset,    length,    encoding);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
339	[BUG]  [BUGGY]  parse(buffer,  offset,  length,  encoding,  DEFAULT_ENCODING);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  parse(buffer,  offset,  length,  encoding,  DEFAULT_ENCODING);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	parse(buffer,  offset,  length,  encoding,  DEFAULT_ENCODING);	  parseName(buffer,    offset,    length,    encoding);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
340	[BUG]  [BUGGY]  int  len  =  length  -  start  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  -  start  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  -  start  +  1;	  int    len    =    length    -    1    +    1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
341	[BUG]  [BUGGY]  int  len  =  offset  -  1  +  1;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  -  1  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  -  1  +  1;	  int    len    =    length    -    1    +    1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
342	[BUG]  [BUGGY]  int  len  =  offset  +  length  *  2;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  +  length  *  2;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  +  length  *  2;	  int    len    =    offset    +    length;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
343	[BUG]  [BUGGY]  int  len  =  encoding.length  -  1  +  length;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length  -  1  +  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  -  1  +  length;	  int    len    =    encoding.length    -    1;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
344	[BUG]  [BUGGY]  int  len  =  encoding.length  -  1L;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length  -  1L;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  -  1L;	  int    len    =    encoding.length    -    1;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
345	[BUG]  [BUGGY]  int  len  =  encoding.getEnd()  +  length;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getEnd()  +  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getEnd()  +  length;	  int    len    =    encoding.getLength()    +    length;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
346	[BUG]  [BUGGY]  int  len  =  encoding.getLength()  +  length  -  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getLength()  +  length  -  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getLength()  +  length  -  1;	  int    len    =    encoding.getLength()    +    length;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
347	[BUG]  [BUGGY]  char  len  =  encoding.length  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  encoding.length  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.length  +  1;	  char    len    =    encoding.length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
348	[BUG]  [BUGGY]  char  len  =  buffer.length;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  buffer.length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  buffer.length;	  char    len    =    encoding.length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
349	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length  -  1  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length  -  1  +  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length  -  1  +  1);	  int    len    =    encoding.decode(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
350	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length  -  2);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length  -  2);	  int    len    =    encoding.decode(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
351	[BUG]  [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parse(buffer,  offset,  length  -  1);	  int    len    =    encoding.decode(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
352	[BUG]  [BUGGY]  char  len  =  encoding.decodeBytes(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  encoding.decodeBytes(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.decodeBytes(buffer,  offset,  length);	  int    len    =    encoding.decodeBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
353	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  false);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  false);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  length,  false);	  int    len    =    encoding.decode(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
354	[BUG]  [BUGGY]  char  len  =  encoding.decode(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  char  len  =  encoding.decode(buffer,  offset  +  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.decode(buffer,  offset  +  length);	  int    len    =    encoding.decode(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
355	[BUG]  [BUGGY]  int  len  =  length  -  1  +  start;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  -  1  +  start;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  -  1  +  start;	  int    len    =    length    -    1    +    offset;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
356	[BUG]  [BUGGY]  int  len  =  length  -  1  +  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  -  1  +  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  -  1  +  System.arraycopy(buffer,  offset,  buffer,  0,  length);	  int    len    =    length    -    1    +    offset;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
357	[BUG]  [BUGGY]  int  len  =  length  -  1  +  System.identityHashCode(buffer);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  -  1  +  System.identityHashCode(buffer);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  -  1  +  System.identityHashCode(buffer);	  int    len    =    length    -    1    +    offset;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
358	[BUG]  [BUGGY]  int  len  =  offset  +  length  /  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  offset  +  length  /  BYTE_MASK;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  +  length  /  BYTE_MASK;	  int    len    =    offset    +    length;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
359	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  throw  new  IllegalArgumentException( " ");  }	  if(encoding    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
360	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  throw  new  IllegalArgumentException( " ");  }	  if(encoding    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
361	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  throw  new  IllegalArgumentException( " ");  }	  if(encoding    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
362	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_ENCODING))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_ENCODING))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_ENCODING))  {  throw  new  IllegalArgumentException( " ");  }	  if(encoding    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
363	[BUG]  [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NULL_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NULL_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	if(encoding  ==  null  ||  encoding.isEnabled(Feature.QUOTE_NULL_VALUE))  {  throw  new  IllegalArgumentException( " ");  }	  if(encoding    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
364	[BUG]  [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length,  byteEncoding);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length,  byteEncoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parseName(buffer,  offset,  length,  byteEncoding);	  int    len    =    encoding.parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
365	[BUG]  [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length,  byTE_MASK);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length,  byTE_MASK);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parseName(buffer,  offset,  length,  byTE_MASK);	  int    len    =    encoding.parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
366	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buf,  0,  length);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  buf,  0,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  buf,  0,  length);	  System.arraycopy(buffer,    offset,    b,    0,    length);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
367	[BUG]  [BUGGY]  String  encoding  =  encoding.encodeName(buffer,  offset,  length,  DEFAULT_ENCODING);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  String  encoding  =  encoding.encodeName(buffer,  offset,  length,  DEFAULT_ENCODING);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	String  encoding  =  encoding.encodeName(buffer,  offset,  length,  DEFAULT_ENCODING);	  String    encoding    =    encoding.encodeName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
368	[BUG]  [BUGGY]  String  encoding  =  encoding.encodeName(buffer,  offset,  length,  b);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  String  encoding  =  encoding.encodeName(buffer,  offset,  length,  b);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	String  encoding  =  encoding.encodeName(buffer,  offset,  length,  b);	  String    encoding    =    encoding.encodeName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
369	[BUG]  [BUGGY]  String  encoding  =  encoding.encodeName(buffer,  offset,  length,  byteEncoding);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  String  encoding  =  encoding.encodeName(buffer,  offset,  length,  byteEncoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	String  encoding  =  encoding.encodeName(buffer,  offset,  length,  byteEncoding);	  String    encoding    =    encoding.encodeName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
370	[BUG]  [BUGGY]  parseName(buffer,  offset,  length,  encoding,  FALLBACK_ENCODING);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  parseName(buffer,  offset,  length,  encoding,  FALLBACK_ENCODING);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	parseName(buffer,  offset,  length,  encoding,  FALLBACK_ENCODING);	  parseName(buffer,    offset,    length,    encoding);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
371	[BUG]  [BUGGY]  int  len  =  encoding._parseName(buffer,  offset,  length,  byteEncoding);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding._parseName(buffer,  offset,  length,  byteEncoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding._parseName(buffer,  offset,  length,  byteEncoding);	  int    len    =    encoding._parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
372	[BUG]  [BUGGY]  int  len  =  encoding._parseName(buffer,  offset,  length,  fallBACK_ENCODING);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding._parseName(buffer,  offset,  length,  fallBACK_ENCODING);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding._parseName(buffer,  offset,  length,  fallBACK_ENCODING);	  int    len    =    encoding._parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
373	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  BYTE_MASK,  0,  len);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  BYTE_MASK,  0,  len);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  BYTE_MASK,  0,  len);	  System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
374	[BUG]  [BUGGY]  int  len  =  start  -  length;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  start  -  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  start  -  length;	  int    len    =    offset    -    length;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
375	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  bytes.length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  bytes.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  bytes.length);	  int    len    =    encoding.decode(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
376	[BUG]  [BUGGY]  int  len  =(length  <  <  2)?  0  :  length;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  <  <  2)?  0  :  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  <  <  2)?  0  :  length;	  int    len    =(length    <    <    1)?    0    :    length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
377	[BUG]  [BUGGY]  int  len  =(length  <  <  1)?  -1  :  length;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  <  <  1)?  -1  :  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  <  <  1)?  -1  :  length;	  int    len    =(length    <    <    1)?    0    :    length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
378	[BUG]  [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
379	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
380	[BUG]  [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
381	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  bytes);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  bytes);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  bytes);	  int    len    =    encoding.decode(buffer,    offset,    length,    b);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
382	[BUG]  [BUGGY]  int  len  =  encoding.parseInt(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parseInt(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parseInt(buffer,  offset,  length);	  int    len    =    _parseInt(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
383	[BUG]  [BUGGY]  int  len  =(length  <  1)?  1  :  0;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  <  1)?  1  :  0;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  <  1)?  1  :  0;	  int    len    =(length    >    0)?    length    :    0;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
384	[BUG]  [BUGGY]  int  len  =(length  <  2)?  1  :  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(length  <  2)?  1  :  0;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  <  2)?  1  :  0;	  int    len    =(length    >    0)?    length    :    0;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
385	[BUG]  [BUGGY]  int  len  =  start  +  length  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  start  +  length  -  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  start  +  length  -  1;	  int    len    =    offset    +    length    -    1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
386	[BUG]  [BUGGY]  int  len  =  length  /  1  +  offset;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  /  1  +  offset;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  /  1  +  offset;	  int    len    =    length    -    1    +    offset;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
387	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  bytes,  0,  length  -  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  bytes,  0,  length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  bytes,  0,  length  -  1);	  System.arraycopy(buffer,    offset,    bytes,    0,    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
388	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  0,  length);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  0,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  length,  0,  length);	  int    len    =    encoding.decode(buffer,    offset    +    length);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
389	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  b.length  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  b.length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  length,  b.length  -  1);	  int    len    =    encoding.decode(buffer,    offset    +    length    -    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
390	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  byteLength  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  byteLength  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  length,  byteLength  -  1);	  int    len    =    encoding.decode(buffer,    offset    +    length    -    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
391	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  256);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length,  256);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  length,  256);	  int    len    =    encoding.decode(buffer,    offset    +    length    -    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
392	[BUG]  [BUGGY]  String  len  =  parseName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  String  len  =  parseName(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	String  len  =  parseName(buffer,  offset,  length);	  char    len    =    _parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
393	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  byteEncoding.length  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  byteEncoding.length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  byteEncoding.length  -  1);	  int    len    =    encoding.decode(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
394	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.type  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  encoding.type  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  encoding.type  -  1);	  int    len    =    encoding.decode(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
395	[BUG]  [BUGGY]  Char  len  =  encoding.decode(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  Char  len  =  encoding.decode(buffer,  offset,  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	Char  len  =  encoding.decode(buffer,  offset,  length);	  char    len    =    encoding.length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
396	[BUG]  [BUGGY]  Character  len  =  encoding.length;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  Character  len  =  encoding.length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	Character  len  =  encoding.length;	  char    len    =    encoding.length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
397	[BUG]  [BUGGY]  Char  len  =  encoding.decode(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  Char  len  =  encoding.decode(buffer,  offset  +  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	Char  len  =  encoding.decode(buffer,  offset  +  length);	  char    len    =    encoding.length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
398	[BUG]  [BUGGY]  int  len  =  encoding.getLength()  *  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getLength()  *  BYTE_MASK;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getLength()  *  BYTE_MASK;	  int    len    =    encoding.getLength()    *    length;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
399	[BUG]  [BUGGY]  allowUnsupportedOperation()  &&(encoding!=  null))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  allowUnsupportedOperation()  &&(encoding!=  null))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	allowUnsupportedOperation()  &&(encoding!=  null))  {  throw  new  IllegalArgumentException( " ");  }	  if(encoding!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
400	[BUG]  [BUGGY]  if(encoding  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  if(encoding  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	if(encoding  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }	  if(encoding!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
401	[BUG]  [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length,  b);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length,  b);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parse(buffer,  offset,  length,  b);	  int    len    =    encoding.parse(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
402	[BUG]  [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length,  byteEncoding);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length,  byteEncoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parse(buffer,  offset,  length,  byteEncoding);	  int    len    =    encoding.parse(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
403	[BUG]  [BUGGY]  int  len  -=  offset.length;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  -=  offset.length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  -=  offset.length;	  int    len    =    offset.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
404	[BUG]  [BUGGY]  int  len  =  length  -  offset.length;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  -  offset.length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  -  offset.length;	  int    len    =    offset.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
405	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding.decode(length  +  1));  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding.decode(length  +  1));  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length,  encoding.decode(length  +  1));	  int    len    =    _parseName(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
406	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding.getEnd());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding.getEnd());  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length,  encoding.getEnd());	  int    len    =    _parseName(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
407	[BUG]  [BUGGY]  int  len  =  encoding.getEncoding();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.getEncoding();  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getEncoding();	  int    len    =    encoding.getCharacterEncoding();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
408	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding,  BYTE_MASK);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding,  BYTE_MASK);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length,  encoding,  BYTE_MASK);	  int    len    =    _parseName(buffer,    offset,    length,    encoding);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
409	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding,  null);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding,  null);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length,  encoding,  null);	  int    len    =    _parseName(buffer,    offset,    length,    encoding);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
410	[BUG]  [BUGGY]  int  len  =  length  -  buffer.length  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  length  -  buffer.length  +  1;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  -  buffer.length  +  1;	  int    len    =    length    -    1    +    1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
411	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding.decode(length));  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding.decode(length));  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length,  encoding.decode(length));	  int    len    =    _parseName(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
412	[BUG]  [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length  -  1);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parseName(buffer,  offset,  length  -  1);	  int    len    =    _parseName(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
413	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding.toString());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding.toString());  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length,  encoding.toString());	  int    len    =    _parseName(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
414	[BUG]  [BUGGY]  int  len  =  encoding.length  -  length;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length  -  length;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  -  length;	  int    len    =    encoding.length    -    start;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
415	[BUG]  [BUGGY]  int  len  =  parseName(buffer,  offset,  length  -  1,  encoding);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  parseName(buffer,  offset,  length  -  1,  encoding);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  parseName(buffer,  offset,  length  -  1,  encoding);	  int    len    =    parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
416	[BUG]  [BUGGY]  int  len  =  encoding.decodeBytes(buffer,  offset,  length,  b.length);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decodeBytes(buffer,  offset,  length,  b.length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decodeBytes(buffer,  offset,  length,  b.length);	  int    len    =    encoding.decodeBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
417	[BUG]  [BUGGY]  int  len  =  encoding.decodeBytes(buffer,  offset,  length,  b);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decodeBytes(buffer,  offset,  length,  b);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decodeBytes(buffer,  offset,  length,  b);	  int    len    =    encoding.decodeBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
418	[BUG]  [BUGGY]  int  len  =(this.buffer!=  null?  this.buffer.length  :  length);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =(this.buffer!=  null?  this.buffer.length  :  length);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(this.buffer!=  null?  this.buffer.length  :  length);	  int    len    =    this.buffer.length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
419	[BUG]  [BUGGY]  int  len  =  encoding.length  -  3;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.length  -  3;  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  -  3;	  int    len    =    encoding.length    -    2;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
420	[BUG]  [BUGGY]  int  len  =  encoding.decodeName(buffer,  offset,  length,  b);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {      [BUGGY]  int  len  =  encoding.decodeName(buffer,  offset,  length,  b);  [BUGGY]      for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decodeName(buffer,  offset,  length,  b);	  int    len    =    encoding.decodeName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
