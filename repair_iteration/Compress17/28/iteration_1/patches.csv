bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  len  =  buffer.length  -  1;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  buffer.length  -  1;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  -  1;	  int    len    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
2	[BUG]  [BUGGY]  int  len  =  buffer.length  -  offset;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  buffer.length  -  offset;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  -  offset;	  int    len    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
3	[BUG]  [BUGGY]  int  len  =  offset.length;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  offset.length;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset.length;	  int    len    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
4	[BUG]  [BUGGY]  int  len  =  this.buffer.length;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  this.buffer.length;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  this.buffer.length;	  int    len    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
5	[BUG]  [BUGGY]  char  len  =  encoding.decode(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  char  len  =  encoding.decode(buffer,  offset,  length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.decode(buffer,  offset,  length);	  int    len    =    0;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
6	[BUG]  [BUGGY]  int  len  =(length  >  0)?  length  :  0;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =(length  >  0)?  length  :  0;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  >  0)?  length  :  0;	  int    len    =    0;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
7	[BUG]  [BUGGY]  int  len  =(length  <  <  1)?  0  :  length;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =(length  <  <  1)?  0  :  length;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =(length  <  <  1)?  0  :  length;	  int    len    =    0;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
8	[BUG]  [BUGGY]  int  len  =  offset  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  offset  +  1;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  +  1;	  int    len    =    length    +    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
9	[BUG]  [BUGGY]  int  len  =  buffer.length  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  buffer.length  +  1;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  +  1;	  int    len    =    length    +    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
10	[BUG]  [BUGGY]  int  len  =  encoding.length  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.length  +  1;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  +  1;	  int    len    =    length    +    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
11	[BUG]  [BUGGY]  int  len  =  length  /  1;  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  length  /  1;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  /  1;	  int    len    =    length    +    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
12	[BUG]  [BUGGY]  int  len  =  start  +  1;  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  start  +  1;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  start  +  1;	  int    len    =    length    +    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
13	[BUG]  [BUGGY]  int  len  =  encoding.getLength()  +  1;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.getLength()  +  1;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getLength()  +  1;	  int    len    =    encoding.getLength();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
14	[BUG]  [BUGGY]  int  len  =  encoding.getLength()  +  length;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.getLength()  +  length;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getLength()  +  length;	  int    len    =    encoding.getLength();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
15	[BUG]  [BUGGY]  int  len  =  buffer.getLength();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  buffer.getLength();  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.getLength();	  int    len    =    encoding.getLength();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
16	[BUG]  [BUGGY]  int  len  =  encoding.length();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.length();  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length();	  int    len    =    encoding.getLength();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
17	[BUG]  [BUGGY]  int  len  =  encoding.getLength()  *  length;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.getLength()  *  length;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getLength()  *  length;	  int    len    =    encoding.getLength();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
18	[BUG]  [BUGGY]  int  len  =  offset  +  length;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  offset  +  length;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  +  length;	  int    len    =    offset;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
19	[BUG]  [BUGGY]  int  len  =  offset  -  length;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  offset  -  length;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  -  length;	  int    len    =    offset;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
20	[BUG]  [BUGGY]  int  len  =  encoding.indexOf(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.indexOf(buffer,  offset,  length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.indexOf(buffer,  offset,  length);	  int    len    =    offset;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
21	[BUG]  [BUGGY]  int  len  =  offset  +  length  -  1;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  offset  +  length  -  1;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  +  length  -  1;	  int    len    =    length    -    1;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  int  len  =  offset  -  1;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  offset  -  1;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  offset  -  1;	  int    len    =    length    -    1;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
23	[BUG]  [BUGGY]  int  len  =  encoding.length  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.length  -  1;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  -  1;	  int    len    =    length    -    1;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
24	[BUG]  [BUGGY]  int  len  =  length  -  1  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  length  -  1  +  1;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  -  1  +  1;	  int    len    =    length    -    1;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
25	[BUG]  [BUGGY]  int  len  =  length  -  1  +  offset;  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  length  -  1  +  offset;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  length  -  1  +  offset;	  int    len    =    length    -    1;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
26	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  0);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  0);	  int    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
27	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  buffer.length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  buffer.length);	  int    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
28	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length  +  1);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length  +  1);	  int    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
29	[BUG]  [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.parse(buffer,  offset,  length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parse(buffer,  offset,  length);	  int    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
30	[BUG]  [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  byte  len  =  encoding.decode(buffer,  offset,  length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	byte  len  =  encoding.decode(buffer,  offset,  length);	  int    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
31	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  length);  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  0,  length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  0,  length);	  int    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
32	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  len);  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  len);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  encoding,  0,  len);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
33	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
34	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
35	[BUG]  [BUGGY]  String  encoding  =  encoding.encodeName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  String  encoding  =  encoding.encodeName(buffer,  offset,  length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	String  encoding  =  encoding.encodeName(buffer,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
36	[BUG]  [BUGGY]  parseName(buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]                              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  parseName(buffer,  offset,  length,  encoding);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	parseName(buffer,  offset,  length,  encoding);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
37	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length);  [CE]  <identifier>  expected  [FE]                                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  b,  0,  length);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
38	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  length);  [CE]  <identifier>  expected  [FE]                                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  encoding,  0,  length);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
39	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  _parseName(buffer,  offset,  length,  encoding);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length,  encoding);	  int    len    =    _parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
40	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  _parseName(buffer,  offset,  length  +  1);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length  +  1);	  int    len    =    _parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
41	[BUG]  [BUGGY]  char  len  =  _parseName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  char  len  =  _parseName(buffer,  offset,  length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  _parseName(buffer,  offset,  length);	  int    len    =    _parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
42	[BUG]  [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.parseName(buffer,  offset,  length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.parseName(buffer,  offset,  length);	  int    len    =    _parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
43	[BUG]  [BUGGY]  int  len  =  parseName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  parseName(buffer,  offset,  length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  parseName(buffer,  offset,  length);	  int    len    =    _parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
44	[BUG]  [BUGGY]  int  len  =  encoding._parseName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding._parseName(buffer,  offset,  length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding._parseName(buffer,  offset,  length);	  int    len    =    _parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
45	[BUG]  [BUGGY]  int  len  =  encoding.length  -  2;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.length  -  2;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  -  2;	  int    len    =    encoding.length;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
46	[BUG]  [BUGGY]  char  len  =  encoding.length;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  char  len  =  encoding.length;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	char  len  =  encoding.length;	  int    len    =    encoding.length;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
47	[BUG]  [BUGGY]  int  len  =  encoding.length  -  start;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.length  -  start;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.length  -  start;	  int    len    =    encoding.length;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
48	[BUG]  [BUGGY]  int  len  =  encoding.decodeBytes(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.decodeBytes(buffer,  offset,  length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decodeBytes(buffer,  offset,  length);	  int    len    =    offset;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
49	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length  -  1);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length  -  1);	  int    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
50	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
51	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  bytes,  0,  length);  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  System.arraycopy(buffer,  offset,  bytes,  0,  length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  bytes,  0,  length);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
52	[BUG]  [BUGGY]  int  len  =  _parseInt(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  _parseInt(buffer,  offset,  length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseInt(buffer,  offset,  length);	  int    len    =    0;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
53	[BUG]  [BUGGY]  int  len  =  encoding.getCharacterEncoding();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.getCharacterEncoding();  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.getCharacterEncoding();	  int    len    =    encoding.getLength();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
54	[BUG]  [BUGGY]  int  len  =  _parseName(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  _parseName(buffer,  offset,  length  -  1);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  _parseName(buffer,  offset,  length  -  1);	  int    len    =    _parseName(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
55	[BUG]  [BUGGY]  int  len  =  buffer.length  -  start;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  buffer.length  -  start;  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  buffer.length  -  start;	  int    len    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
56	[BUG]  [BUGGY]  int  len  =  encoding.decodeName(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.decodeName(buffer,  offset,  length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decodeName(buffer,  offset,  length);	  int    len    =    offset;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
57	[BUG]  [BUGGY]  if(encoding!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  if(encoding!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	if(encoding!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
58	[BUG]  [BUGGY]  if(encoding  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  if(encoding  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	if(encoding  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
59	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
60	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  length);	  int    len    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
61	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length  -  1);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.decode(buffer,  offset  +  length  -  1);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset  +  length  -  1);	  int    len    =    length    -    1;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
62	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  b);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  b);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  b);	  int    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
63	[BUG]  [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  b.length);  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {    [BUGGY]  int  len  =  encoding.decode(buffer,  offset,  length,  b.length);  [BUGGY]    for  (;  len  >  0;  len--)  {  if  (buffer[offset  +  len  -  1]  !=  0)  {  break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	287	287	1	replace	int  len  =  encoding.decode(buffer,  offset,  length,  b.length);	  int    len    =    encoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
