bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  buffer.length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length,  buffer.length  -  1);	  return    parseBigDecimal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
2	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  buffer.length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length,  buffer.length  +  1);	  return    parseBigDecimal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
3	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  buffer[offset]);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  buffer[offset]);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length,  buffer[offset]);	  return    parseBigDecimal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
4	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  buffer.length  -  2);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  buffer.length  -  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length,  buffer.length  -  2);	  return    parseBigDecimal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
5	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length  -  1,  buffer.length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length  -  1,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length  -  1,  buffer.length);	  return    parseBigDecimal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
6	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  2);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  2);	  return    parseOctal(buffer,    offset,    length,    1);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
7	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  -  1,  1);	  return    parseOctal(buffer,    offset,    length,    1);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
8	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  *  2  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  *  2  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer.length  *  2  +  1);	  return    parseOctal(buffer,    offset,    length,    buffer.length    +    1);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
9	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  +  2);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  +  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer.length  +  2);	  return    parseOctal(buffer,    offset,    length,    buffer.length    +    1);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
10	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length  +  1);	  return    parseOctal(buffer,    offset,    length,    buffer.length    +    1);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
11	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  *  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  *  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer.length  *  1);	  return    parseOctal(buffer,    offset,    length,    buffer.length    +    1);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
12	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  /  2);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  /  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  /  2);	  return    parseOctal(buffer,    offset,    length    +    2);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
13	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  -  4);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  -  4);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer.length  -  4);	  return    parseOctal(buffer,    offset,    length,    buffer.length    -    1);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
14	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  -  3);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  -  3);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer.length  -  3);	  return    parseOctal(buffer,    offset,    length,    buffer.length    -    1);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
15	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  *  2  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  *  2  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer.length  *  2  -  1);	  return    parseOctal(buffer,    offset,    length,    buffer.length    -    1);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
16	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  negative,  buffer.length);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  negative,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  negative,  buffer.length);	  return    parseOctalOrBinary(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
17	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  negative,  0);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  negative,  0);	  return    parseOctalOrBinary(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
18	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  negative,  null);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  negative,  null);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  negative,  null);	  return    parseOctalOrBinary(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
19	[BUG]  [BUGGY]  return  parseBinaryOrBinary(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryOrBinary(buffer,  offset,  length,  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryOrBinary(buffer,  offset,  length,  negative);	  return    parseOctalOrBinary(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
20	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  negative,  false);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  negative,  false);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  negative,  false);	  return    parseOctalOrBinary(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
21	[BUG]  [BUGGY]  return  parseBinaryLong(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryLong(buffer,  offset,  length,  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryLong(buffer,  offset,  length,  negative);	  return    parseOctalOrBinary(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
22	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length,  1);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    0xff);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
23	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  0,  0xff);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  0,  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length,  0,  0xff);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    0xff);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
24	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  0xff,  buffer.length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  0xff,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length,  0xff,  buffer.length);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    0xff);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
25	[BUG]  [BUGGY]  return  parseOctalBigDecimal(buffer,  offset,  length,  0xff);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBigDecimal(buffer,  offset,  length,  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBigDecimal(buffer,  offset,  length,  0xff);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    0xff);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
26	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  2);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length,  2);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    0xff);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
27	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  false);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length,  false);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
28	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  4);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  4);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length,  4);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
29	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  0,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  0,  buffer.length);	  return    parseOctalOrBinary(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
30	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  4);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  4);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  4);	  return    parseOctalOrBinary(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
31	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  0xff);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  0xff);	  return    parseOctalOrBinary(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
32	[BUG]  [BUGGY]  [Delete]  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  [Delete]  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	[Delete]	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
33	[BUG]  [BUGGY]  allowNegated(length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  allowNegated(length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	allowNegated(length)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
34	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSupportedError( "msg.illegal.length ");  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aughtExceptionHandler.throwAsSupportedError( "msg.illegal.length ");  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aughtExceptionHandler.throwAsSupportedError( "msg.illegal.length ");	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
35	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSupportedError( "msg.no.cv ");  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aughtExceptionHandler.throwAsSupportedError( "msg.no.cv ");  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aughtExceptionHandler.throwAsSupportedError( "msg.no.cv ");	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
36	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSlotException( " ");  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aughtExceptionHandler.throwAsSlotException( " ");  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aughtExceptionHandler.throwAsSlotException( " ");	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
37	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aughtExceptionHandler.throwAsIgnoredException( " ");	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
38	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSupportedError( "msg.undef.cv ");  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aughtExceptionHandler.throwAsSupportedError( "msg.undef.cv ");  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aughtExceptionHandler.throwAsSupportedError( "msg.undef.cv ");	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
39	[BUG]  [BUGGY]  return  parseOctalOrBinaryLong(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinaryLong(buffer,  offset,  length,  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinaryLong(buffer,  offset,  length,  negative);	  return    parseOctalOrBinaryLong(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
40	[BUG]  [BUGGY]  return  parseOctalOrBinaryLong(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinaryLong(buffer,  offset,  length,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinaryLong(buffer,  offset,  length,  buffer.length);	  return    parseOctalOrBinaryLong(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
41	[BUG]  [BUGGY]  return  parseOctalOrBinaryBigInteger(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinaryBigInteger(buffer,  offset,  length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinaryBigInteger(buffer,  offset,  length);	  return    parseOctalOrBinaryLong(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
42	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  /  1  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  /  1  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  /  1  +  1);	  return    parseOctal(buffer,    offset,    length    -    1    +    1);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
43	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  -  1);	  return    parseOctal(buffer,    offset,    length    -    1    +    1);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
44	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  +  1);	  return    parseOctal(buffer,    offset,    length    -    1    +    1);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
45	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1)+  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1)+  1;  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  -  1)+  1;	  return    parseOctal(buffer,    offset,    length    -    1    +    1);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
46	[BUG]  [BUGGY]  return  parseOctalBigInteger(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBigInteger(buffer,  offset,  length,  0);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBigInteger(buffer,  offset,  length,  0);	  return    parseBinaryBigInteger(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
47	[BUG]  [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigInteger(buffer,  offset,  length,  1);	  return    parseBinaryBigInteger(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
48	[BUG]  [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  2);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigInteger(buffer,  offset,  length,  2);	  return    parseBinaryBigInteger(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
49	[BUG]  [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  0xff);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigInteger(buffer,  offset,  length,  0xff);	  return    parseBinaryBigInteger(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
50	[BUG]  [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  4);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  4);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigInteger(buffer,  offset,  length,  4);	  return    parseBinaryBigInteger(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
51	[BUG]  [BUGGY]  return  parseOctalBigInteger(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBigInteger(buffer,  offset,  length,  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBigInteger(buffer,  offset,  length,  negative);	  return    parseOctalBigInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
52	[BUG]  [BUGGY]  return  parseOctalBigInteger(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBigInteger(buffer,  offset,  length,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBigInteger(buffer,  offset,  length,  buffer.length);	  return    parseOctalBigInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
53	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer,  null);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer,  null);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer,  null);	  return    parseOctal(buffer,    offset,    length,    negative,    null);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
54	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  null,  negative);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  null,  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  null,  negative);	  return    parseOctal(buffer,    offset,    length,    negative,    null);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
55	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negate,  null);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  negate,  null);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  negate,  null);	  return    parseOctal(buffer,    offset,    length,    negative,    null);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
56	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  buffer.length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length,  buffer.length  -  1);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
57	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  buffer.length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length,  buffer.length  +  1);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
58	[BUG]  [BUGGY]  return  parseOctalBigDecimal(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBigDecimal(buffer,  offset,  length,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBigDecimal(buffer,  offset,  length,  buffer.length);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
59	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  -  2);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  -  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  -  2);	  return    parseOctal(buffer,    offset,    length    -    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
60	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  1,  buffer.length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  1,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length  -  1,  buffer.length);	  return    parseOctal(buffer,    offset,    length    -    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
61	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  4,  buffer.length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  -  4,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  -  4,  buffer.length);	  return    parseOctal(buffer,    offset,    length    -    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
62	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  -  4);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  -  4);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  -  4);	  return    parseOctal(buffer,    offset,    length    -    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
63	[BUG]  [BUGGY]  return  parseInt(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseInt(buffer,  offset,  length,  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseInt(buffer,  offset,  length,  negative);	  return    parseLong(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
64	[BUG]  [BUGGY]  return  parseInteger(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseInteger(buffer,  offset,  length,  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseInteger(buffer,  offset,  length,  negative);	  return    parseLong(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
65	[BUG]  [BUGGY]  return  parseDouble(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseDouble(buffer,  offset,  length,  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseDouble(buffer,  offset,  length,  negative);	  return    parseLong(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
66	[BUG]  [BUGGY]  return  parseInt(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseInt(buffer,  offset,  length,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseInt(buffer,  offset,  length,  buffer.length);	  return    parseInt(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
67	[BUG]  [BUGGY]  return  parseInt(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseInt(buffer,  offset,  length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseInt(buffer,  offset,  length  -  1);	  return    parseInt(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
68	[BUG]  [BUGGY]  return  parseFloat(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseFloat(buffer,  offset,  length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseFloat(buffer,  offset,  length);	  return    parseInt(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
69	[BUG]  [BUGGY]  return  parseInt(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseInt(buffer,  offset,  length,  0);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseInt(buffer,  offset,  length,  0);	  return    parseInt(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
70	[BUG]  [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  buffer.length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigInteger(buffer,  offset,  length,  buffer.length  -  1);	  return    parseBinaryBigInteger(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
71	[BUG]  [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  buffer.length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigInteger(buffer,  offset,  length,  buffer.length  +  1);	  return    parseBinaryBigInteger(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
72	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  buffer.length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length,  buffer.length  -  1);	  return    parseBinaryBigInteger(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
73	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer,  0xff);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer,  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer,  0xff);	  return    parseOctal(buffer,    offset,    length,    negative,    0xff);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
74	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length,  0xff);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length,  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer.length,  0xff);	  return    parseOctal(buffer,    offset,    length,    negative,    0xff);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
75	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  0,  0xff);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  0,  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  0,  0xff);	  return    parseOctal(buffer,    offset,    length,    negative,    0xff);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
76	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  negative,  0xff);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  negative,  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  negative,  0xff);	  return    parseOctal(buffer,    offset,    length,    negative,    0xff);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
77	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer[offset],  0xff);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer[offset],  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer[offset],  0xff);	  return    parseOctal(buffer,    offset,    length,    negative,    0xff);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
78	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  positive,  0xff);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  positive,  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  positive,  0xff);	  return    parseOctal(buffer,    offset,    length,    negative,    0xff);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
79	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSortedException( " ");  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aughtExceptionHandler.throwAsSortedException( " ");  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aughtExceptionHandler.throwAsSortedException( " ");	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
80	[BUG]  [BUGGY]  aughtExceptionHandler.throwUnquotedException( " ");  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aughtExceptionHandler.throwUnquotedException( " ");  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aughtExceptionHandler.throwUnquotedException( " ");	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
81	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  0,  0x80);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  0,  0x80);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  0,  0x80);	  return    parseOctal(buffer,    offset,    length,    0x80);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
82	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  0x80);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  0x80);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  0x80);	  return    parseOctal(buffer,    offset,    length,    0x80);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
83	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length  -  1);	  return    parseBigDecimal(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
84	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  0);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length,  0);	  return    parseBigDecimal(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
85	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length  +  1);	  return    parseBigDecimal(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
86	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  false);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length,  false);	  return    parseBigDecimal(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
87	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  +  1,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  +  1,  buffer.length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  +  1,  buffer.length  -  1);	  return    parseOctal(buffer,    offset,    length    +    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
88	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  +  1,  buffer.length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  +  1,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length  +  1,  buffer.length);	  return    parseOctal(buffer,    offset,    length    +    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
89	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  +  1,  buffer.length  -  2);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  +  1,  buffer.length  -  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  +  1,  buffer.length  -  2);	  return    parseOctal(buffer,    offset,    length    +    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
90	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  +  1,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  +  1,  buffer.length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  +  1,  buffer.length  +  1);	  return    parseOctal(buffer,    offset,    length    +    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
91	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  +  1,  buffer.length  -  start);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  +  1,  buffer.length  -  start);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  +  1,  buffer.length  -  start);	  return    parseOctal(buffer,    offset,    length    +    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
92	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length,  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinary(buffer,  offset,  length,  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinary(buffer,  offset,  length,  1);	  return    parseBinary(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
93	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinary(buffer,  offset,  length,  false);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinary(buffer,  offset,  length,  false);	  return    parseBinary(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
94	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length,  2);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinary(buffer,  offset,  length,  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinary(buffer,  offset,  length,  2);	  return    parseBinary(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
95	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length,  0xff);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinary(buffer,  offset,  length,  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinary(buffer,  offset,  length,  0xff);	  return    parseBinary(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
96	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinary(buffer,  offset,  length,  0,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinary(buffer,  offset,  length,  0,  buffer.length);	  return    parseBinary(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
97	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length  -  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length  -  2);	  return    parseBigInteger(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
98	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length  -  1,  buffer.length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length  -  1,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length  -  1,  buffer.length);	  return    parseBigInteger(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
99	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  0xff,  buffer.length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  0xff,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  0xff,  buffer.length);	  return    parseOctal(buffer,    offset,    length,    0xff);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
100	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  0,  0xff);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  0,  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  0,  0xff);	  return    parseOctal(buffer,    offset,    length,    0xff);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
101	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  3);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  3);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  3);	  return    parseOctalOrBinary(buffer,    offset,    length,    1);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
102	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  1,  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  1,  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length  -  1,  1);	  return    parseOctalOrBinary(buffer,    offset,    length,    1);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
103	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  buffer[offset]);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  buffer[offset]);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  buffer[offset]);	  return    parseOctal(buffer,    offset,    length,    buffer[offset]);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
104	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer[offset],  negative);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer[offset],  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer[offset],  negative);	  return    parseOctal(buffer,    offset,    length,    buffer[offset]);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
105	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer[offset]  &  0xfff);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer[offset]  &  0xfff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer[offset]  &  0xfff);	  return    parseOctal(buffer,    offset,    length,    buffer[offset]);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
106	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer[offset]  &  0xff);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer[offset]  &  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer[offset]  &  0xff);	  return    parseOctal(buffer,    offset,    length,    buffer[offset]);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
107	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer[offset]);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer[offset]);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  -  1,  buffer[offset]);	  return    parseOctal(buffer,    offset,    length,    buffer[offset]);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
108	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer[offset].length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer[offset].length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer[offset].length);	  return    parseOctal(buffer,    offset,    length,    buffer[offset]);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
109	[BUG]  [BUGGY]  return  parseOctalBigDecimal(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBigDecimal(buffer,  offset,  length,  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBigDecimal(buffer,  offset,  length,  negative);	  return    parseOctalBigDecimal(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
110	[BUG]  [BUGGY]  return  parseOctalBigDecimal(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBigDecimal(buffer,  offset,  length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBigDecimal(buffer,  offset,  length  -  1);	  return    parseOctalBigDecimal(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
111	[BUG]  [BUGGY]  return  parseOctalBigDecimal(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBigDecimal(buffer,  offset,  length,  0);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBigDecimal(buffer,  offset,  length,  0);	  return    parseOctalBigDecimal(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
112	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length  -  2);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length  -  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length  -  2);	  return    parseOctalOrBinary(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
113	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  negative,  buffer.length);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  negative,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length,  negative,  buffer.length);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
114	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  negative,  0);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length,  negative,  0);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
115	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  negative,  0);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length,  negative,  0);	  return    parseBigInteger(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
116	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  negative,  buffer.length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  negative,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length,  negative,  buffer.length);	  return    parseBigInteger(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
117	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  negative,  0xff);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  negative,  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length,  negative,  0xff);	  return    parseBigInteger(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
118	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  negative,  null);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  negative,  null);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length,  negative,  null);	  return    parseBigInteger(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
119	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  0,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  0,  buffer.length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  0,  buffer.length  -  1);	  return    parseOctal(buffer,    offset,    length,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
120	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  0,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  0,  buffer.length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  0,  buffer.length  +  1);	  return    parseOctal(buffer,    offset,    length,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
121	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  0,  buffer.length  -  2);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  0,  buffer.length  -  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  0,  buffer.length  -  2);	  return    parseOctal(buffer,    offset,    length,    0,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
122	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinary(buffer,  offset,  length  -  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinary(buffer,  offset,  length  -  2);	  return    parseBinary(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
123	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length  -  1,  buffer.length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinary(buffer,  offset,  length  -  1,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinary(buffer,  offset,  length  -  1,  buffer.length);	  return    parseBinary(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
124	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinary(buffer,  offset,  length,  buffer.length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinary(buffer,  offset,  length,  buffer.length  -  1);	  return    parseBinary(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
125	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length  -  4);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinary(buffer,  offset,  length  -  4);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinary(buffer,  offset,  length  -  4);	  return    parseBinary(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
126	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinary(buffer,  offset,  length,  buffer.length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinary(buffer,  offset,  length,  buffer.length  +  1);	  return    parseBinary(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
127	[BUG]  [BUGGY]  return  parseBinaryLong(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryLong(buffer,  offset,  length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryLong(buffer,  offset,  length  +  1);	  return    parseBinary(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
128	[BUG]  [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigInteger(buffer,  offset,  length  +  1);	  return    parseBinary(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
129	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinary(buffer,  offset,  length  +  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinary(buffer,  offset,  length  +  2);	  return    parseBinary(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
130	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  +  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length  +  2);	  return    parseOctalOrBinary(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
131	[BUG]  [BUGGY]  return  parseBinaryOrBinary(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryOrBinary(buffer,  offset,  length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryOrBinary(buffer,  offset,  length  +  1);	  return    parseOctalOrBinary(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
132	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  true);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  true);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  true);	  return    parseOctal(buffer,    offset,    length,    negative,    false);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
133	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  true);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  true);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  true);	  return    parseOctal(buffer,    offset,    length,    negative,    false);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
134	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer,  false);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer,  false);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer,  false);	  return    parseOctal(buffer,    offset,    length,    negative,    false);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
135	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  null,  false);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  null,  false);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  null,  false);	  return    parseOctal(buffer,    offset,    length,    negative,    false);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
136	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  false,  buffer.length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  false,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  false,  buffer.length);	  return    parseOctal(buffer,    offset,    length,    negative,    false);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
137	[BUG]  [BUGGY]  return  parseBinaryInteger(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryInteger(buffer,  offset,  length,  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryInteger(buffer,  offset,  length,  negative);	  return    parseBinaryInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
138	[BUG]  [BUGGY]  return  parseBinaryInteger(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryInteger(buffer,  offset,  length,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryInteger(buffer,  offset,  length,  buffer.length);	  return    parseBinaryInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
139	[BUG]  [BUGGY]  return  parseOctalInteger(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalInteger(buffer,  offset,  length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalInteger(buffer,  offset,  length);	  return    parseBinaryInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
140	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  true);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  true);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  true);	  return    parseOctalOrBinary(buffer,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
141	[BUG]  [BUGGY]  return  parseBinaryOrBinary(buffer,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryOrBinary(buffer,  offset,  length,  false);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryOrBinary(buffer,  offset,  length,  false);	  return    parseOctalOrBinary(buffer,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
142	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  false,  buffer.length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  false,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  false,  buffer.length);	  return    parseOctalOrBinary(buffer,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
143	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  null);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  null);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  null);	  return    parseOctalOrBinary(buffer,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
144	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  1,  false);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  1,  false);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length  -  1,  false);	  return    parseOctalOrBinary(buffer,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
145	[BUG]  [BUGGY]  return  parseLong(buffer,  offset,  length,  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseLong(buffer,  offset,  length,  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseLong(buffer,  offset,  length,  1);	  return    parseLong(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
146	[BUG]  [BUGGY]  return  parseLong(buffer,  offset,  length,  0xff);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseLong(buffer,  offset,  length,  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseLong(buffer,  offset,  length,  0xff);	  return    parseLong(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
147	[BUG]  [BUGGY]  return  parseLong(buffer,  offset,  length,  2);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseLong(buffer,  offset,  length,  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseLong(buffer,  offset,  length,  2);	  return    parseLong(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
148	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  4);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  4);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  4);	  return    parseOctal(buffer,    offset,    length,    2);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
149	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  3);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  3);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  3);	  return    parseOctal(buffer,    offset,    length,    2);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
150	[BUG]  [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  negative,  buffer.length);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  negative,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigInteger(buffer,  offset,  length,  negative,  buffer.length);	  return    parseBinaryBigInteger(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
151	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  0,  0);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  0,  0);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  0,  0);	  return    parseOctal(buffer,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
152	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  0x80);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  0x80);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  0x80);	  return    parseOctal(buffer,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
153	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  0,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  0,  buffer.length);	  return    parseOctal(buffer,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
154	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length,  0);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length,  0);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer.length,  0);	  return    parseOctal(buffer,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
155	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length  -  2);	  return    parseOctalOrBinary(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
156	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  4);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  4);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length  -  4);	  return    parseOctalOrBinary(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
157	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length  -  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
158	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length  +  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
159	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  size);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  size);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  size);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
160	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  2);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length  -  2);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
161	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  bytes.length);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  bytes.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  bytes.length);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
162	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  +  2);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  +  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length  +  2);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
163	[BUG]  [BUGGY]  return  parseBinaryOctalOrBinary(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryOctalOrBinary(buffer,  offset,  length,  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryOctalOrBinary(buffer,  offset,  length,  negative);	  return    parseBinaryOctal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
164	[BUG]  [BUGGY]  return  parseBinaryOctal(buffer,  offset,  length,  negative,  buffer.length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryOctal(buffer,  offset,  length,  negative,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryOctal(buffer,  offset,  length,  negative,  buffer.length);	  return    parseBinaryOctal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
165	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length  -  4);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length  -  4);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length  -  4);	  return    parseOctalOrBinary(buffer,    offset,    length,    buffer.length    -    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
166	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length  -  3);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length  -  3);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length  -  3);	  return    parseOctalOrBinary(buffer,    offset,    length,    buffer.length    -    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
167	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  0xff);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length,  0xff);	  return    parseBigInteger(buffer,    offset,    length,    0xff);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
168	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length,  1);	  return    parseBigInteger(buffer,    offset,    length,    0xff);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
169	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  0,  0xff);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  0,  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length,  0,  0xff);	  return    parseBigInteger(buffer,    offset,    length,    0xff);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
170	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  2);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length,  2);	  return    parseBigInteger(buffer,    offset,    length,    0xff);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
171	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  4);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  4);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length,  4);	  return    parseBigInteger(buffer,    offset,    length,    0xff);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
172	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  /  3);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  /  3);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  /  3);	  return    parseOctal(buffer,    offset,    length    +    3);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
173	[BUG]  [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  negative,  buffer.length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  negative,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBinary(buffer,  offset,  length,  negative,  buffer.length);	  return    parseOctalBinary(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
174	[BUG]  [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  negative,  0);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBinary(buffer,  offset,  length,  negative,  0);	  return    parseOctalBinary(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
175	[BUG]  [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  negative,  null);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  negative,  null);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBinary(buffer,  offset,  length,  negative,  null);	  return    parseOctalBinary(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
176	[BUG]  [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  negative,  false);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  negative,  false);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBinary(buffer,  offset,  length,  negative,  false);	  return    parseOctalBinary(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
177	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  negative,  buffer.length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  negative,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length,  negative,  buffer.length);	  return    parseBigDecimal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
178	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  negative,  0);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length,  negative,  0);	  return    parseBigDecimal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
179	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  negative,  0xff);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  negative,  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length,  negative,  0xff);	  return    parseBigDecimal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
180	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  negative,  null);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  negative,  null);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length,  negative,  null);	  return    parseBigDecimal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
181	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  negative,  false);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  negative,  false);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length,  negative,  false);	  return    parseBigDecimal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
182	[BUG]  [BUGGY]  return  parseOctalBigInteger(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBigInteger(buffer,  offset,  length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBigInteger(buffer,  offset,  length  -  1);	  return    parseBinaryBigInteger(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
183	[BUG]  [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length  -  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigInteger(buffer,  offset,  length  -  2);	  return    parseBinaryBigInteger(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
184	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length,  negative,  buffer.length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinary(buffer,  offset,  length,  negative,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinary(buffer,  offset,  length,  negative,  buffer.length);	  return    parseBinary(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
185	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length  -  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length  -  2);	  return    parseBinaryBigDecimal(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
186	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length  -  1,  buffer.length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length  -  1,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length  -  1,  buffer.length);	  return    parseBinaryBigDecimal(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
187	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length  -  1,  negative);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length  -  1,  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length  -  1,  negative);	  return    parseBinaryBigDecimal(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
188	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length  -  4);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length  -  4);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length  -  4);	  return    parseBinaryBigDecimal(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
189	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  3);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  3);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length,  3);	  return    parseBigInteger(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
190	[BUG]  [BUGGY]  return  parseBinaryLong(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryLong(buffer,  offset,  length,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryLong(buffer,  offset,  length,  buffer.length);	  return    parseBinary(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
191	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  buffer.length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  buffer.length  -  1);	  return    parseOctal(buffer,    offset,    length,    negative,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
192	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  buffer.length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  buffer.length  +  1);	  return    parseOctal(buffer,    offset,    length,    negative,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
193	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  buffer[offset]);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  buffer[offset]);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  buffer[offset]);	  return    parseOctal(buffer,    offset,    length,    negative,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
194	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  buffer.length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length,  buffer.length  +  1);	  return    parseBigInteger(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
195	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  buffer[offset]);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  buffer[offset]);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length,  buffer[offset]);	  return    parseBigInteger(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
196	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  buffer.length  -  2);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  buffer.length  -  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length,  buffer.length  -  2);	  return    parseBigInteger(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
197	[BUG]  [BUGGY]  return  parseDouble(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseDouble(buffer,  offset,  length,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseDouble(buffer,  offset,  length,  buffer.length);	  return    parseDouble(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
198	[BUG]  [BUGGY]  return  parseDouble(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseDouble(buffer,  offset,  length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseDouble(buffer,  offset,  length  -  1);	  return    parseDouble(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
199	[BUG]  [BUGGY]  return  parseDouble(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseDouble(buffer,  offset,  length,  0);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseDouble(buffer,  offset,  length,  0);	  return    parseDouble(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
200	[BUG]  [BUGGY]  return  parseDouble(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseDouble(buffer,  offset,  length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseDouble(buffer,  offset,  length  +  1);	  return    parseDouble(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
201	[BUG]  [BUGGY]  return  parseDouble(buffer,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseDouble(buffer,  offset,  length,  false);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseDouble(buffer,  offset,  length,  false);	  return    parseDouble(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
202	[BUG]  [BUGGY]  return  parseLong(buffer,  offset,  length,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseLong(buffer,  offset,  length,  buffer.length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseLong(buffer,  offset,  length,  buffer.length  -  1);	  return    parseLong(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
203	[BUG]  [BUGGY]  return  parseLong(buffer,  offset,  length,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseLong(buffer,  offset,  length,  buffer.length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseLong(buffer,  offset,  length,  buffer.length  +  1);	  return    parseLong(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
204	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  negative  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  negative  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length,  negative  +  1);	  return    parseBigInteger(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
205	[BUG]  [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  buffer.length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBinary(buffer,  offset,  length,  buffer.length  -  1);	  return    parseOctalBinary(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
206	[BUG]  [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  buffer.length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBinary(buffer,  offset,  length,  buffer.length  +  1);	  return    parseOctalBinary(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
207	[BUG]  [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  buffer[offset]);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  buffer[offset]);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBinary(buffer,  offset,  length,  buffer[offset]);	  return    parseOctalBinary(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
208	[BUG]  [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  buffer.length  -  2);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  buffer.length  -  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBinary(buffer,  offset,  length,  buffer.length  -  2);	  return    parseOctalBinary(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
209	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  null);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  null);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  null);	  return    parseOctal(buffer,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
210	[BUG]  [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  false);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBinary(buffer,  offset,  length,  false);	  return    parseOctal(buffer,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
211	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length,  buffer[offset]);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinary(buffer,  offset,  length,  buffer[offset]);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinary(buffer,  offset,  length,  buffer[offset]);	  return    parseOctal(buffer,    offset,    length,    buffer[offset]);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
212	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer[offset]  &  0x80);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer[offset]  &  0x80);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer[offset]  &  0x80);	  return    parseOctal(buffer,    offset,    length,    buffer[offset]);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
213	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  0x80);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  0x80);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length,  0x80);	  return    parseBigInteger(buffer,    offset,    length,    0xff);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
214	[BUG]  [BUGGY]  return  parseBinaryLong(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryLong(buffer,  offset,  length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryLong(buffer,  offset,  length  -  1);	  return    parseBinary(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
215	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  buffer.length  +  2);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  buffer.length  +  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length,  buffer.length  +  2);	  return    parseBigDecimal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
216	[BUG]  [BUGGY]  return  parseBinaryOctal(buffer,  offset,  length,  negative,  null);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryOctal(buffer,  offset,  length,  negative,  null);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryOctal(buffer,  offset,  length,  negative,  null);	  return    parseOctal(buffer,    offset,    length,    negative,    null);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
217	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  positive,  null);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  positive,  null);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  positive,  null);	  return    parseOctal(buffer,    offset,    length,    negative,    null);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
218	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length,  negative,  null);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinary(buffer,  offset,  length,  negative,  null);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinary(buffer,  offset,  length,  negative,  null);	  return    parseOctal(buffer,    offset,    length,    negative,    null);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
219	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length  +  1);	  return    parseBinary(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
220	[BUG]  [BUGGY]  return  parseBinaryLong(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryLong(buffer,  offset,  length,  0);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryLong(buffer,  offset,  length,  0);	  return    parseLong(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
221	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  negative,  true);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  negative,  true);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  negative,  true);	  return    parseOctal(buffer,    offset,    length,    negative,    false);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
222	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length,  negative,  false);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinary(buffer,  offset,  length,  negative,  false);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinary(buffer,  offset,  length,  negative,  false);	  return    parseOctal(buffer,    offset,    length,    negative,    false);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
223	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  positive,  false);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  positive,  false);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  positive,  false);	  return    parseOctal(buffer,    offset,    length,    negative,    false);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
224	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length  -  4);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length  -  4);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length  -  4);	  return    parseBigInteger(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
225	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length  -  3);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length  -  3);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length  -  3);	  return    parseBigInteger(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
226	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  +  2);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  +  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  +  2);	  return    parseOctal(buffer,    offset,    length    -    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
227	[BUG]  [BUGGY]  return  parseBinaryInteger(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryInteger(buffer,  offset,  length,  0);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryInteger(buffer,  offset,  length,  0);	  return    parseBinaryInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
228	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  0xff)+  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  0xff)+  1;  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  0xff)+  1;	  return    parseOctal(buffer,    offset,    length,    negative,    0xff);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
229	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length  -  negative);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length  -  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length  -  negative);	  return    parseBigDecimal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
230	[BUG]  [BUGGY]  aught(IllegalArgumentException.class))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aught(IllegalArgumentException.class))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aught(IllegalArgumentException.class))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
231	[BUG]  [BUGGY]  aught(IllegalArgumentException.INVALID_ARGUMENT_ERROR, " "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aught(IllegalArgumentException.INVALID_ARGUMENT_ERROR, " "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aught(IllegalArgumentException.INVALID_ARGUMENT_ERROR, " "))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
232	[BUG]  [BUGGY]  aught(IllegalArgumentException.INVALID_ARRAY))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aught(IllegalArgumentException.INVALID_ARRAY))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aught(IllegalArgumentException.INVALID_ARRAY))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
233	[BUG]  [BUGGY]  allowNegatives(false)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  allowNegatives(false)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	allowNegatives(false)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
234	[BUG]  [BUGGY]  allowNegatives(true)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  allowNegatives(true)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	allowNegatives(true)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
235	[BUG]  [BUGGY]  allowNegate(length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  allowNegate(length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	allowNegate(length)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
236	[BUG]  [BUGGY]  return  parseBinaryNull(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryNull(buffer,  offset,  length,  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryNull(buffer,  offset,  length,  negative);	  return    parseBinary(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
237	[BUG]  [BUGGY]  return  parseBinaryNumber(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryNumber(buffer,  offset,  length,  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryNumber(buffer,  offset,  length,  negative);	  return    parseOctalBinary(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
238	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length  *  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length  *  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length  *  1);	  return    parseOctalOrBinary(buffer,    offset,    length,    buffer.length    -    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
239	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  +  1,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  +  1,  buffer.length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length  +  1,  buffer.length  -  1);	  return    parseOctal(buffer,    offset,    length    +    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
240	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length  +  1,  buffer.length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinary(buffer,  offset,  length  +  1,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinary(buffer,  offset,  length  +  1,  buffer.length);	  return    parseOctal(buffer,    offset,    length    +    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
241	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer,  negative);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer,  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer,  negative);	  return    parseOctal(buffer,    offset,    length,    negative,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
242	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  buffer.length)+  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  buffer.length)+  1;  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  buffer.length)+  1;	  return    parseOctal(buffer,    offset,    length,    negative,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
243	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length  -  negative);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length  -  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length  -  negative);	  return    parseBigInteger(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
244	[BUG]  [BUGGY]  return  parseBinaryLong(buffer,  offset,  length,  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryLong(buffer,  offset,  length,  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryLong(buffer,  offset,  length,  1);	  return    parseOctalOrBinary(buffer,    offset,    length,    1);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
245	[BUG]  [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length  -  4);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length  -  4);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigInteger(buffer,  offset,  length  -  4);	  return    parseBinaryBigInteger(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
246	[BUG]  [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length  -  1,  buffer.length);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length  -  1,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigInteger(buffer,  offset,  length  -  1,  buffer.length);	  return    parseBinaryBigInteger(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
247	[BUG]  [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length  -  3);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length  -  3);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigInteger(buffer,  offset,  length  -  3);	  return    parseBinaryBigInteger(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
248	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length  -  negative);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length  -  negative);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length  -  negative);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
249	[BUG]  [BUGGY]  allowNegatives(length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  allowNegatives(length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	allowNegatives(length)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
250	[BUG]  [BUGGY]  allowNegate(false)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  allowNegate(false)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	allowNegate(false)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
251	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(null);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(null);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aught(new  IllegalArgumentException( " ")).initCause(null);	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
252	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(length);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aught(new  IllegalArgumentException( " ")).initCause(length);	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
253	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  -  10);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  -  10);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer.length  -  10);	  return    parseOctal(buffer,    offset,    length,    buffer.length    -    2);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
254	[BUG]  [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  false);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigInteger(buffer,  offset,  length,  false);	  return    parseOctalOrBinary(buffer,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
255	[BUG]  [BUGGY]  return  parseBinaryLong(buffer,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryLong(buffer,  offset,  length,  false);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryLong(buffer,  offset,  length,  false);	  return    parseOctalOrBinary(buffer,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
256	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  10);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  -  10);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  -  10);	  return    parseOctal(buffer,    offset,    length    -    4);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
257	[BUG]  [BUGGY]  return  parseInteger(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseInteger(buffer,  offset,  length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseInteger(buffer,  offset,  length);	  return    parseInt(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
258	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  *  1  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  *  1  +  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  *  1  +  1);	  return    parseOctal(buffer,    offset,    length    -    1    +    1);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
259	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1)/  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1)/  1;  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  -  1)/  1;	  return    parseOctal(buffer,    offset,    length    -    1    +    1);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
260	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length  -  1)+  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length  -  1)+  1;  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length  -  1)+  1;	  return    parseBinaryBigDecimal(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
261	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  start);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  start);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  start);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
262	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  buffer[offset]);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  buffer[offset]);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length,  buffer[offset]);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
263	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length  +  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length  +  2);	  return    parseBigInteger(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
264	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length  +  1,  buffer.length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length  +  1,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length  +  1,  buffer.length);	  return    parseBigInteger(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
265	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer,  0);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer,  0);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer,  0);	  return    parseOctal(buffer,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
266	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  0L);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  0L);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  0L);	  return    parseOctal(buffer,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
267	[BUG]  [BUGGY]  return  parseInteger(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseInteger(buffer,  offset,  length,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseInteger(buffer,  offset,  length,  buffer.length);	  return    parseLong(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
268	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  buffer.length  -  2);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  buffer.length  -  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length,  buffer.length  -  2);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
269	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  *  2);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  *  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer.length  *  2);	  return    parseOctal(buffer,    offset,    length,    buffer.length    +    1);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
270	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  *  2);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  *  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length  *  2);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
271	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  start);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  start);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length  -  start);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
272	[BUG]  [BUGGY]  return  parseOctalBinary(buffer,  offset,  length  +  1,  buffer.length);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBinary(buffer,  offset,  length  +  1,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBinary(buffer,  offset,  length  +  1,  buffer.length);	  return    parseOctal(buffer,    offset,    length    +    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
273	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  /  1,  buffer.length);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  /  1,  buffer.length);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  /  1,  buffer.length);	  return    parseOctal(buffer,    offset,    length    +    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
274	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  buffer.length  -  2);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  buffer.length  -  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  buffer.length  -  2);	  return    parseOctal(buffer,    offset,    length,    negative,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
275	[BUG]  [BUGGY]  return  parseBinaryInteger(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryInteger(buffer,  offset,  length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryInteger(buffer,  offset,  length  -  1);	  return    parseBinaryInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
276	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  1,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  1,  buffer.length  -  1);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length  -  1,  buffer.length  -  1);	  return    parseOctalOrBinary(buffer,    offset,    length,    buffer.length    -    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
277	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  buffer,  null);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  buffer,  null);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  buffer,  null);	  return    parseOctal(buffer,    offset,    length,    negative,    null);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
278	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  null  &&  buffer.length  >  0);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  null  &&  buffer.length  >  0);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  null  &&  buffer.length  >  0);	  return    parseOctal(buffer,    offset,    length,    negative,    null);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
279	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  buffer.length  *  2);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  buffer.length  *  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length,  buffer.length  *  2);	  return    parseBigInteger(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
280	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  +  4);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  +  4);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  +  4);	  return    parseOctal(buffer,    offset,    length    -    4);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
281	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  0x80);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  0x80);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length,  0x80);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    0xff);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
282	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  0xff,  0x80);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  0xff,  0x80);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length,  0xff,  0x80);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    0xff);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
283	[BUG]  [BUGGY]  return  parseBinaryOctal(buffer,  offset,  length,  negative,  false);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryOctal(buffer,  offset,  length,  negative,  false);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryOctal(buffer,  offset,  length,  negative,  false);	  return    parseOctal(buffer,    offset,    length,    negative,    false);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
284	[BUG]  [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  0x80);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  0x80);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigInteger(buffer,  offset,  length,  0x80);	  return    parseBinaryBigInteger(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
285	[BUG]  [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  negative,  0xff);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  negative,  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctalBinary(buffer,  offset,  length,  negative,  0xff);	  return    parseOctalBinary(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
286	[BUG]  [BUGGY]  return  parseLong(buffer,  offset,  length,  0x80);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseLong(buffer,  offset,  length,  0x80);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseLong(buffer,  offset,  length,  0x80);	  return    parseLong(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
287	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  negative,  0x80);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  negative,  0x80);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length,  negative,  0x80);	  return    parseBigDecimal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
288	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  0x90);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  0x90);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  0x90);	  return    parseOctal(buffer,    offset,    length,    negative,    0xff);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
289	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  0xff,  0x80);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  0xff,  0x80);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  0xff,  0x80);	  return    parseOctal(buffer,    offset,    length,    0xff);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
290	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  (byte)0xff);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  (byte)0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  (byte)0xff);	  return    parseOctal(buffer,    offset,    length,    0xff);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
291	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  buffer.length  *  2);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  buffer.length  *  2);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length,  buffer.length  *  2);	  return    parseBigDecimal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
292	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  buffer.length  -  start);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigDecimal(buffer,  offset,  length,  buffer.length  -  start);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigDecimal(buffer,  offset,  length,  buffer.length  -  start);	  return    parseBigDecimal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
293	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ").toString()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aught(new  IllegalArgumentException( " ").toString()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aught(new  IllegalArgumentException( " ").toString()))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
294	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ").toString())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aught(new  IllegalArgumentException( " ").toString())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aught(new  IllegalArgumentException( " ").toString())  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
295	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
296	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ").toString(), " "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aught(new  IllegalArgumentException( " ").toString(), " "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aught(new  IllegalArgumentException( " ").toString(), " "))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
297	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ").toString()))  {  throw  new  IllegalArgumentException( " ".toString());  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aught(new  IllegalArgumentException( " ").toString()))  {  throw  new  IllegalArgumentException( " ".toString());  }  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aught(new  IllegalArgumentException( " ").toString()))  {  throw  new  IllegalArgumentException( " ".toString());  }	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
298	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer[offset]  &  0xffff);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer[offset]  &  0xffff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length,  buffer[offset]  &  0xffff);	  return    parseOctal(buffer,    offset,    length,    buffer[offset]);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
299	[BUG]  [BUGGY]  aught(false)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aught(false)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aught(false)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
300	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ").toString()))  {  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  aught(new  IllegalArgumentException( " ").toString()))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	aught(new  IllegalArgumentException( " ").toString()))  {  throw  new  IllegalArgumentException( " ");	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
301	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length,  0x80);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinary(buffer,  offset,  length,  0x80);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinary(buffer,  offset,  length,  0x80);	  return    parseBinary(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
302	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1)/  2;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1)/  2;  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseOctal(buffer,  offset,  length  -  1)/  2;	  return    parseOctal(buffer,    offset,    length    -    1    +    1);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
303	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  (byte)0xff);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  (byte)0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBigInteger(buffer,  offset,  length,  (byte)0xff);	  return    parseBigInteger(buffer,    offset,    length,    0xff);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
304	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  negative,  0xff);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  negative,  0xff);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length,  negative,  0xff);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
305	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  negative,  null);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {      [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  negative,  null);  [BUGGY]      }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	174	174	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length,  negative,  null);	  return    parseBinaryBigDecimal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
