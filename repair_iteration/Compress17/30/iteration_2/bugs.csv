bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (buffer[offset  +  length  -  1]  ==  0)  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if  (buffer[offset  +  length  -  1]  ==  0)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if  (buffer[offset  +  length  -  1]  ==  0)  {	  if    (buffer[offset    +    length    -    1]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
2	[BUG]  [BUGGY]  if(buffer[offset  +  len]  ==  0)  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len]  ==  0)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]  ==  0)  {	  if    (buffer[offset    +    len    -    1]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
3	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
4	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
5	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
6	[BUG]  [BUGGY]  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
7	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
8	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
10	[BUG]  [BUGGY]  if(buffer[offset  +  len]  ==  null)  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len]  ==  null)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]  ==  null)  {	  if(buffer[offset    +    len    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
11	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]!=  null)  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len  -  1]!=  null)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]!=  null)  {	  if(buffer[offset    +    len    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
12	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  null  ||  buffer[offset  +  len  -  1]!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len  -  1]  ==  null  ||  buffer[offset  +  len  -  1]!=  null)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  null  ||  buffer[offset  +  len  -  1]!=  null)  {	  if(buffer[offset    +    len    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
13	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]!=  null  ||  buffer[offset  +  len  -  1]  ==  null)  {  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len  -  1]!=  null  ||  buffer[offset  +  len  -  1]  ==  null)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]!=  null  ||  buffer[offset  +  len  -  1]  ==  null)  {	  if(buffer[offset    +    len    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
14	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1]  ==  null)  {  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  length  -  1]  ==  null)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1]  ==  null)  {	  if(buffer[offset    +    len    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
15	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  null  ||  buffer[offset  +  len  -  1]  ==  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len  -  1]  ==  null  ||  buffer[offset  +  len  -  1]  ==  null)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  null  ||  buffer[offset  +  len  -  1]  ==  null)  {	  if(buffer[offset    +    len    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
16	[BUG]  [BUGGY]  if(buffer[offset  +  length]!=  0)  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  length]!=  0)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length]!=  0)  {	  if    (buffer[offset    +    len]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
17	[BUG]  [BUGGY]  if  (buffer[offset  +  len]  >=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if  (buffer[offset  +  len]  >=  0)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if  (buffer[offset  +  len]  >=  0)  {	  if    (buffer[offset    +    len]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
18	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1)  ==  0)  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  length  -  1)  ==  0)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1)  ==  0)  {	  if(buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  ==  0)  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  ==  0)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  ==  0)  {	  if(buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
20	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  0)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  0)  {	  if(buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
21	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  {  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len  -  1)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  {	  if(buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
22	[BUG]  [BUGGY]  if  (buffer[offset  +  length]  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if  (buffer[offset  +  length]  ==  0)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if  (buffer[offset  +  length]  ==  0)  {	  if    (buffer[offset    +    len]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
23	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  len);  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  len);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
25	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null)  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  null)  {	  if(buffer[offset    +    len    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
26	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  buffer[offset  +  len  -  1]!=  null)  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  buffer[offset  +  len  -  1]!=  null)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  null  ||  buffer[offset  +  len  -  1]!=  null)  {	  if(buffer[offset    +    len    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
27	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len  -  1)  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  if(buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
28	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1].equals(encoding))  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1].equals(encoding))  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1].equals(encoding))  {	  if(buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
29	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  if(buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
30	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {	  if(buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
31	[BUG]  [BUGGY]  if(buffer[offset  +  len--]!=  0)  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len--]!=  0)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--]!=  0)  {	  if    (buffer[offset    +    length    -    1]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
32	[BUG]  [BUGGY]  if(buffer[offset  +  len--]  ==  0)  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len--]  ==  0)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--]  ==  0)  {	  if    (buffer[offset    +    len    -    1]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
33	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  null  ||  buffer.length  <  =  length)  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len  -  1]  ==  null  ||  buffer.length  <  =  length)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  null  ||  buffer.length  <  =  length)  {	  if(buffer[offset    +    len    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
34	[BUG]  [BUGGY]  if(buffer[offset  +  len]!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len]!=  null)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]!=  null)  {	  if    (buffer[offset    +    len]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
35	[BUG]  [BUGGY]  byte[]  buffer  =  encoding.decode(buffer,  offset,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  byte[]  buffer  =  encoding.decode(buffer,  offset,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	byte[]  buffer  =  encoding.decode(buffer,  offset,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
36	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
37	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  encoding)  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  encoding)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  encoding)  {	  if(buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
38	[BUG]  [BUGGY]  if(buffer[offset  +  len--  1)  ==  0)  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {    [BUGGY]  if(buffer[offset  +  len--  1)  ==  0)  {  [BUGGY]    break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return     "   ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--  1)  ==  0)  {	  if(buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
