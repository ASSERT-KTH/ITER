bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
2	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  length,  len);  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  length,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  length,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
3	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
4	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
5	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
6	[BUG]  [BUGGY]  if(len  >  0)  {  if(buffer[offset  +  len  -  1)  {  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(len  >  0)  {  if(buffer[offset  +  len  -  1)  {  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(len  >  0)  {  if(buffer[offset  +  len  -  1)  {  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
7	[BUG]  [BUGGY]  if(length  >  0)  {  if(buffer[offset  +  len  -  1)  {  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  if(buffer[offset  +  len  -  1)  {  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  if(buffer[offset  +  len  -  1)  {  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
8	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]!=  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]!=  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]!=  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
9	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
10	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
11	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  length  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  length  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  length  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
12	[BUG]  [BUGGY]  if(buffer[offset  +  length--]  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length--]  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length--]  ==  0)  {	  if(buffer[offset    +    len--]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
13	[BUG]  [BUGGY]  if(buffer[offset  +  len]  ==  null  ||  buffer[offset  +  len]  ==  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]  ==  null  ||  buffer[offset  +  len]  ==  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]  ==  null  ||  buffer[offset  +  len]  ==  null)  {	  if(buffer[offset    +    len    -    1]    ==    null    ||    buffer[offset    +    len    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
14	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]!=  null  ||  buffer[offset  +  len  -  1]!=  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]!=  null  ||  buffer[offset  +  len  -  1]!=  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]!=  null  ||  buffer[offset  +  len  -  1]!=  null)  {	  if(buffer[offset    +    len    -    1]    ==    null    ||    buffer[offset    +    len    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
15	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  2]  ==  null  ||  buffer[offset  +  len  -  2]  ==  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  2]  ==  null  ||  buffer[offset  +  len  -  2]  ==  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  2]  ==  null  ||  buffer[offset  +  len  -  2]  ==  null)  {	  if(buffer[offset    +    len    -    1]    ==    null    ||    buffer[offset    +    len    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
16	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1]  ==  null  ||  buffer[offset  +  len  -  1]  ==  null)  {  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1]  ==  null  ||  buffer[offset  +  len  -  1]  ==  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1]  ==  null  ||  buffer[offset  +  len  -  1]  ==  null)  {	  if(buffer[offset    +    len    -    1]    ==    null    ||    buffer[offset    +    len    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
17	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1].equals(encoding))  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1].equals(encoding))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1].equals(encoding))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1].equals(encoding))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
18	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1].equals(encoding))  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1].equals(encoding))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1].equals(encoding))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1].equals(encoding))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
19	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  2].equals(encoding))  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  2].equals(encoding))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  2].equals(encoding))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1].equals(encoding))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
20	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  length  -  1].equals(encoding))  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  length  -  1].equals(encoding))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  length  -  1].equals(encoding))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1].equals(encoding))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
21	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]!=  0  ||  buffer[offset  +  len  -  1].equals(encoding))  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]!=  0  ||  buffer[offset  +  len  -  1].equals(encoding))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]!=  0  ||  buffer[offset  +  len  -  1].equals(encoding))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1].equals(encoding))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
22	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1)  ==  0  ||  buffer[offset  +  len  -  1].equals(encoding))  {  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1)  ==  0  ||  buffer[offset  +  len  -  1].equals(encoding))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1)  ==  0  ||  buffer[offset  +  len  -  1].equals(encoding))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1].equals(encoding))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
23	[BUG]  [BUGGY]  if(buffer[offset  +  length]  ==  null)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length]  ==  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length]  ==  null)  {	  if(buffer[offset    +    len]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
24	[BUG]  [BUGGY]  if(buffer[offset  +  len]  ==  null  ||  buffer[offset  +  len]!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]  ==  null  ||  buffer[offset  +  len]!=  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]  ==  null  ||  buffer[offset  +  len]!=  null)  {	  if(buffer[offset    +    len]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
25	[BUG]  [BUGGY]  if(buffer[offset  +  len]!=  null  ||  buffer[offset  +  len]  ==  null)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]!=  null  ||  buffer[offset  +  len]  ==  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]!=  null  ||  buffer[offset  +  len]  ==  null)  {	  if(buffer[offset    +    len]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
26	[BUG]  [BUGGY]  if(buffer[offset  +  len]!=  null  ||  buffer[offset  +  len]!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]!=  null  ||  buffer[offset  +  len]!=  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]!=  null  ||  buffer[offset  +  len]!=  null)  {	  if(buffer[offset    +    len]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
27	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  if(buffer[offset    +    len    -    1)    ==    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
28	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  if(buffer[offset    +    len    -    1)    ==    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
29	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  if(buffer[offset    +    len    -    1)    ==    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
30	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  if(buffer[offset    +    len    -    1)    ==    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
31	[BUG]  [BUGGY]  if(offset  +  len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(offset  +  len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(offset  +  len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  if(buffer[offset    +    len    -    1)    ==    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
32	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  if(buffer[offset    +    len    -    1)    ==    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
33	[BUG]  [BUGGY]  if(length  +  len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  +  len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  +  len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  if(buffer[offset    +    len    -    1)    ==    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
34	[BUG]  [BUGGY]  byte[]  buffer  =  encoding.decode(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  byte[]  buffer  =  encoding.decode(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	byte[]  buffer  =  encoding.decode(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  byte[]    buffer    =    encoding.decode(buffer,    offset,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
35	[BUG]  [BUGGY]  byte[]  buffer  =  encoding.parse(buffer,  offset,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  byte[]  buffer  =  encoding.parse(buffer,  offset,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	byte[]  buffer  =  encoding.parse(buffer,  offset,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  byte[]    buffer    =    encoding.decode(buffer,    offset,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
36	[BUG]  [BUGGY]  byte[]  buffer  =  encoding.decode(buffer,  offset,  len,  length);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  byte[]  buffer  =  encoding.decode(buffer,  offset,  len,  length);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	byte[]  buffer  =  encoding.decode(buffer,  offset,  len,  length);  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  byte[]    buffer    =    encoding.decode(buffer,    offset,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
37	[BUG]  [BUGGY]  byte[]  buffer  =  encoding.decode(buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  byte[]  buffer  =  encoding.decode(buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	byte[]  buffer  =  encoding.decode(buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  byte[]    buffer    =    encoding.decode(buffer,    offset,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
38	[BUG]  [BUGGY]  byte[]  buffer  =  encoding.getName();  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  byte[]  buffer  =  encoding.getName();  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	byte[]  buffer  =  encoding.getName();  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  byte[]    buffer    =    encoding.decode(buffer,    offset,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
39	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buf,  0,  len);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buf,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  buf,  0,  len);	  System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
40	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  bytes,  0,  len);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  System.arraycopy(buffer,  offset,  bytes,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  bytes,  0,  len);	  System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
41	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  b,  0,  length);	  System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
42	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len  +  1);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len  +  1);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len  +  1);	  System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
43	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  len);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  System.arraycopy(buffer,  offset,  encoding,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  encoding,  0,  len);	  System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
44	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  0,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  System.arraycopy(buffer,  offset,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  0,  len);	  System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
45	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  length);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  length);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
46	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
47	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
48	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  length);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  length);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
49	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  length);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  length);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
50	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len-1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len-1);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len-1);	  System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
51	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  buffer[offset  +  len  -  2]!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  buffer[offset  +  len  -  2]!=  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  null  ||  buffer[offset  +  len  -  2]!=  null)  {	  if(buffer[offset    +    len    -    1)    ==    null    ||    buffer[offset    +    len    -    1]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
52	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)!=  null  ||  buffer[offset  +  len  -  1]!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)!=  null  ||  buffer[offset  +  len  -  1]!=  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)!=  null  ||  buffer[offset  +  len  -  1]!=  null)  {	  if(buffer[offset    +    len    -    1)    ==    null    ||    buffer[offset    +    len    -    1]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
53	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  buffer[offset  +  length  -  1]!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  buffer[offset  +  length  -  1]!=  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  null  ||  buffer[offset  +  length  -  1]!=  null)  {	  if(buffer[offset    +    len    -    1)    ==    null    ||    buffer[offset    +    len    -    1]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
54	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1)  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1)  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1)  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  if(buffer[offset    +    length    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
55	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1)  ==  System.arraycopy(buffer,  offset,  buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1)  ==  System.arraycopy(buffer,  offset,  buffer,  offset,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1)  ==  System.arraycopy(buffer,  offset,  buffer,  offset,  len);	  if(buffer[offset    +    length    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
56	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1,    length))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
57	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  {  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  {  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  {  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1,    length))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
58	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]!=  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]!=  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]!=  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1,    length))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
59	[BUG]  [BUGGY]  if(len  >  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(len  >  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(len  >  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1,    length))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
60	[BUG]  [BUGGY]  if(len  >  0  ||  buffer[offset  +  len  -  1)  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(len  >  0  ||  buffer[offset  +  len  -  1)  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(len  >  0  ||  buffer[offset  +  len  -  1)  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1,    length))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
61	[BUG]  [BUGGY]  if(len  <  =  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(len  <  =  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(len  <  =  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1,    length))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
62	[BUG]  [BUGGY]  if(buffer[offset  +  len]!=  0  ||  buffer[offset  +  length]  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]!=  0  ||  buffer[offset  +  length]  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]!=  0  ||  buffer[offset  +  length]  ==  0)  {	  if(buffer[offset    +    length]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
63	[BUG]  [BUGGY]  if(buffer[offset  +  len]!=  0  ||  buffer[offset  +  length]!=  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]!=  0  ||  buffer[offset  +  length]!=  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]!=  0  ||  buffer[offset  +  length]!=  0)  {	  if(buffer[offset    +    length]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
64	[BUG]  [BUGGY]  if(buffer[offset  +  length]!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length]!=  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length]!=  null)  {	  if(buffer[offset    +    len]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
65	[BUG]  [BUGGY]  if(buffer[offset  +  len]!=  DEFAULT_ENCODING)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]!=  DEFAULT_ENCODING)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]!=  DEFAULT_ENCODING)  {	  if(buffer[offset    +    len]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
66	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  2]!=  null  ||  buffer[offset  +  len  -  2]  ==  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  2]!=  null  ||  buffer[offset  +  len  -  2]  ==  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  2]!=  null  ||  buffer[offset  +  len  -  2]  ==  null)  {	  if(buffer[offset    +    len    -    1]!=    null    ||    buffer[offset    +    len    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
67	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1]!=  null  ||  buffer[offset  +  len  -  1]  ==  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1]!=  null  ||  buffer[offset  +  len  -  1]  ==  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1]!=  null  ||  buffer[offset  +  len  -  1]  ==  null)  {	  if(buffer[offset    +    len    -    1]!=    null    ||    buffer[offset    +    len    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
68	[BUG]  [BUGGY]  byte[]  b  =  new  byte[length];  System.arraycopy(buffer,  offset,  b,  0,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  byte[]  b  =  new  byte[length];  System.arraycopy(buffer,  offset,  b,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	byte[]  b  =  new  byte[length];  System.arraycopy(buffer,  offset,  b,  0,  len);	  byte[]    b    =    new    byte[len];    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
69	[BUG]  [BUGGY]  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  byte[]    b    =    new    byte[len];    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
70	[BUG]  [BUGGY]  byte[]  b  =  new  byte[len+1];  System.arraycopy(buffer,  offset,  b,  0,  len);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  byte[]  b  =  new  byte[len+1];  System.arraycopy(buffer,  offset,  b,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	byte[]  b  =  new  byte[len+1];  System.arraycopy(buffer,  offset,  b,  0,  len);	  byte[]    b    =    new    byte[len];    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
71	[BUG]  [BUGGY]  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len  +  1);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len  +  1);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len  +  1);	  byte[]    b    =    new    byte[len];    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
72	[BUG]  [BUGGY]  byte[]  b  =  new  byte[len-1];  System.arraycopy(buffer,  offset,  b,  0,  len);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  byte[]  b  =  new  byte[len-1];  System.arraycopy(buffer,  offset,  b,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	byte[]  b  =  new  byte[len-1];  System.arraycopy(buffer,  offset,  b,  0,  len);	  byte[]    b    =    new    byte[len];    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
73	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1)  {	  if(buffer[offset    +    len    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
74	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  {	  if(buffer[offset    +    len    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
75	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  0,  len)  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]  ==  0,  len)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  0,  len)  {	  if(buffer[offset    +    len    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
76	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]!=  0,  len)  {  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]!=  0,  len)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]!=  0,  len)  {	  if(buffer[offset    +    len    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
77	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  offset)  {  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]  ==  offset)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  offset)  {	  if(buffer[offset    +    len    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
78	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer[offset  +  length  -  1)  {  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer[offset  +  length  -  1)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1  ||  buffer[offset  +  length  -  1)  {	  if(buffer[offset    +    len    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
79	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
80	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
81	[BUG]  [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
82	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length);  return  encoding.decode(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  length);  return  encoding.decode(buffer,  offset,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  b,  0,  length);  return  encoding.decode(buffer,  offset,  len);	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
83	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
84	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer[offset  +  length  -  1)  ==  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer[offset  +  length  -  1)  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1  ||  buffer[offset  +  length  -  1)  ==  0)  {	  if(buffer[offset    +    len    -    1    ||    buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
85	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)!=  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)!=  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)!=  0)  {	  if(buffer[offset    +    len    -    1    ||    buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
86	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1  ||  buffer[offset  +  len  -  1)  ==  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1  ||  buffer[offset  +  len  -  1)  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1  ||  buffer[offset  +  len  -  1)  ==  0)  {	  if(buffer[offset    +    len    -    1    ||    buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
87	[BUG]  [BUGGY]  if(b[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  ==  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(b[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(b[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  ==  0)  {	  if(buffer[offset    +    len    -    1    ||    buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
88	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  2)  ==  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  2)  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  2)  ==  0)  {	  if(buffer[offset    +    len    -    1    ||    buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
89	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  >=  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  >=  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  >=  0)  {	  if(buffer[offset    +    len    -    1    ||    buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
90	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1]!=  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1]!=  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1]!=  null)  {	  if(buffer[offset    +    length    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
91	[BUG]  [BUGGY]  if(buffer[offset  +  len--]  ==  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len--]  ==  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--]  ==  null)  {	  if(buffer[offset    +    length    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
92	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len  +  1);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len  +  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
93	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
94	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  len  -  1);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  len  -  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
95	[BUG]  [BUGGY]  if(buffer[offset  +  len]  ==  0  ||  buffer[offset  +  len]  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]  ==  0  ||  buffer[offset  +  len]  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]  ==  0  ||  buffer[offset  +  len]  ==  0)  {	  if(buffer[offset    +    len]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
96	[BUG]  [BUGGY]  if(buffer[offset  +  len]  ==  0  ||  buffer[offset  +  len]!=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]  ==  0  ||  buffer[offset  +  len]!=  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]  ==  0  ||  buffer[offset  +  len]!=  0)  {	  if(buffer[offset    +    len]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
97	[BUG]  [BUGGY]  if(buffer[offset  +  len]  ==  0,  len)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]  ==  0,  len)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]  ==  0,  len)  {	  if(buffer[offset    +    len]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
98	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  2]  ==  null  ||  buffer[offset  +  len  -  2]!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  2]  ==  null  ||  buffer[offset  +  len  -  2]!=  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  2]  ==  null  ||  buffer[offset  +  len  -  2]!=  null)  {	  if(buffer[offset    +    len    -    1]    ==    null    ||    buffer[offset    +    len    -    1]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
99	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1]  ==  null  ||  buffer[offset  +  len  -  1]!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1]  ==  null  ||  buffer[offset  +  len  -  1]!=  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1]  ==  null  ||  buffer[offset  +  len  -  1]!=  null)  {	  if(buffer[offset    +    len    -    1]    ==    null    ||    buffer[offset    +    len    -    1]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
100	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  buffer[offset  +  len  -  1]  ==  null)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  buffer[offset  +  len  -  1]  ==  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  null  ||  buffer[offset  +  len  -  1]  ==  null)  {	  if(buffer[offset    +    len    -    1)    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
101	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  length  >  buffer[offset  +  len  -  1])  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  length  >  buffer[offset  +  len  -  1])  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  null  ||  length  >  buffer[offset  +  len  -  1])  {	  if(buffer[offset    +    len    -    1)    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
102	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  ==  null)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  ==  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  ==  null)  {	  if(buffer[offset    +    len    -    1)    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
103	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  buffer[offset  +  len  -  1].equals(encoding))  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  buffer[offset  +  len  -  1].equals(encoding))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  null  ||  buffer[offset  +  len  -  1].equals(encoding))  {	  if(buffer[offset    +    len    -    1)    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
104	[BUG]  [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  if(encoding!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
105	[BUG]  [BUGGY]  ||  encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  ||  encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	||  encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  if(encoding!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
106	[BUG]  [BUGGY]  ||  encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  ||  encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	||  encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  if(encoding!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
107	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  DEFAULT_ENCODING)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  DEFAULT_ENCODING)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  DEFAULT_ENCODING)  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    encoding)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
108	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]!=  DEFAULT_ENCODING)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]!=  DEFAULT_ENCODING)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]!=  DEFAULT_ENCODING)  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    encoding)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
109	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  length  -  1]  ==  encoding)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  length  -  1]  ==  encoding)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  length  -  1]  ==  encoding)  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    encoding)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
110	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]!=  encoding)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]!=  encoding)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]!=  encoding)  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    encoding)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
111	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  encoding)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]  ==  encoding)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  encoding)  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    encoding)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
112	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1]  ==  encoding)  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1]  ==  encoding)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1]  ==  encoding)  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    encoding)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
113	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
114	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
115	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  length,  len);  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  length,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  length,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
116	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
117	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  length,  len);  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  length,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  length,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
118	[BUG]  [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(len  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
119	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1]  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1]  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1]  ==  0)  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
120	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]!=  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]!=  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]!=  0)  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
121	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  length  -  1]  ==  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  length  -  1]  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  length  -  1]  ==  0)  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
122	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  2]  ==  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  2]  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  2]  ==  0)  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
123	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]!=  0  ||  buffer[offset  +  len  -  1]  ==  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]!=  0  ||  buffer[offset  +  len  -  1]  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]!=  0  ||  buffer[offset  +  len  -  1]  ==  0)  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
124	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  0)  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
125	[BUG]  [BUGGY]  if(buffer[offset  +  length--]!=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length--]!=  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length--]!=  0)  {	  if(buffer[offset    +    len--]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
126	[BUG]  [BUGGY]  if(buffer[offset  +  length--  1)  ==  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length--  1)  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length--  1)  ==  0)  {	  if(buffer[offset    +    len--    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
127	[BUG]  [BUGGY]  if(buffer[offset  +  len--  1  ||  buffer[offset  +  len--  1)  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len--  1  ||  buffer[offset  +  len--  1)  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--  1  ||  buffer[offset  +  len--  1)  ==  0)  {	  if(buffer[offset    +    len--    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
128	[BUG]  [BUGGY]  if(buffer[offset  +  len--  1]  ==  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len--  1]  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--  1]  ==  0)  {	  if(buffer[offset    +    len--    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
129	[BUG]  [BUGGY]  if(buffer[offset  +  len--  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len--  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--  0)  {	  if(buffer[offset    +    len--    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
130	[BUG]  [BUGGY]  if(buffer[offset  +  len--  1)  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len--  1)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--  1)  {	  if(buffer[offset    +    len--    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
131	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  null  ||  buffer.length  <  length)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]  ==  null  ||  buffer.length  <  length)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  null  ||  buffer.length  <  length)  {	  if(buffer[offset    +    len    -    1]    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
132	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]!=  null  ||  buffer.length  <  length)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]!=  null  ||  buffer.length  <  length)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]!=  null  ||  buffer.length  <  length)  {	  if(buffer[offset    +    len    -    1]    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
133	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  null  ||  buffer.length!=  length)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]  ==  null  ||  buffer.length!=  length)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  null  ||  buffer.length!=  length)  {	  if(buffer[offset    +    len    -    1]    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
134	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  null  ||  buffer.length  >=  length)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]  ==  null  ||  buffer.length  >=  length)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  null  ||  buffer.length  >=  length)  {	  if(buffer[offset    +    len    -    1]    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
135	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]!=  null  ||  buffer.length  ==  length)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]!=  null  ||  buffer.length  ==  length)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]!=  null  ||  buffer.length  ==  length)  {	  if(buffer[offset    +    len    -    1]    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
136	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]!=  null  ||  buffer.length  <  =  length)  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]!=  null  ||  buffer.length  <  =  length)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]!=  null  ||  buffer.length  <  =  length)  {	  if(buffer[offset    +    len    -    1]    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
137	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  buffer.length  <  length)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  buffer.length  <  length)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  null  ||  buffer.length  <  length)  {	  if(buffer[offset    +    len    -    1]    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
138	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1]  ==  null  ||  buffer.length  <  =  len)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1]  ==  null  ||  buffer.length  <  =  len)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1]  ==  null  ||  buffer.length  <  =  len)  {	  if(buffer[offset    +    len    -    1]    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
139	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
140	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
141	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
142	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  encoding)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  encoding)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  encoding)  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    encoding)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
143	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  2]  ==  encoding)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  2]  ==  encoding)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  2]  ==  encoding)  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    encoding)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
144	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  length  -  1]  ==  DEFAULT_ENCODING)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  length  -  1]  ==  DEFAULT_ENCODING)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  length  -  1]  ==  DEFAULT_ENCODING)  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    encoding)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
145	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  null  ||  buffer[offset  +  length  -  1]  ==  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]  ==  null  ||  buffer[offset  +  length  -  1]  ==  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  null  ||  buffer[offset  +  length  -  1]  ==  null)  {	  if(buffer[offset    +    len    -    1]!=    null    ||    buffer[offset    +    len    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
146	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]!=  null  ||  buffer[offset  +  length  -  1]  ==  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]!=  null  ||  buffer[offset  +  length  -  1]  ==  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]!=  null  ||  buffer[offset  +  length  -  1]  ==  null)  {	  if(buffer[offset    +    len    -    1]!=    null    ||    buffer[offset    +    len    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
147	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
148	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
149	[BUG]  [BUGGY]  if(buffer[offset  +  len]  ==  DEFAULT_ENCODING)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]  ==  DEFAULT_ENCODING)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]  ==  DEFAULT_ENCODING)  {	  if(buffer[offset    +    len]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
150	[BUG]  [BUGGY]  if(buffer[offset  +  len]  ==  0,  length)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]  ==  0,  length)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]  ==  0,  length)  {	  if(buffer[offset    +    len]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
151	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1)  ==  null  ||  buffer[offset  +  len  -  1]!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1)  ==  null  ||  buffer[offset  +  len  -  1]!=  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1)  ==  null  ||  buffer[offset  +  len  -  1]!=  null)  {	  if(buffer[offset    +    len    -    1)    ==    null    ||    buffer[offset    +    len    -    1]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
152	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)!=  null  ||  buffer[offset  +  len  -  1]  ==  null)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)!=  null  ||  buffer[offset  +  len  -  1]  ==  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)!=  null  ||  buffer[offset  +  len  -  1]  ==  null)  {	  if(buffer[offset    +    len    -    1)    ==    null    ||    buffer[offset    +    len    -    1]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
153	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  length);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  length);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
154	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1)  ==  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1)  ==  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1)  ==  null)  {	  if(buffer[offset    +    length    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
155	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1)  ==  0  ||  buffer.charAt(offset  -  length  -  1)  ==  'n')  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1)  ==  0  ||  buffer.charAt(offset  -  length  -  1)  ==  'n')  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1)  ==  0  ||  buffer.charAt(offset  -  length  -  1)  ==  'n')  {	  if(buffer[offset    +    length    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
156	[BUG]  [BUGGY]  if  (buffer[offset  +  length  -  1]  ==  0,  len)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if  (buffer[offset  +  length  -  1]  ==  0,  len)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if  (buffer[offset  +  length  -  1]  ==  0,  len)  {	  if    (buffer[offset    +    length    -    1]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
157	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
158	[BUG]  [BUGGY]  if(len  >  0)  {  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(len  >  0)  {  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(len  >  0)  {  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
159	[BUG]  [BUGGY]  if(length  >  0)  {  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  >  0)  {  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  >  0)  {  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
160	[BUG]  [BUGGY]  if(buffer[offset  +  len  *  length  -  1)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  *  length  -  1)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  *  length  -  1)  {	  if(buffer[offset    +    len    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
161	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  0,  length)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]  ==  0,  length)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  0,  length)  {	  if(buffer[offset    +    len    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
162	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==	  if(buffer[offset    +    len    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
163	[BUG]  [BUGGY]  if(buffer[offset  +  len--  1)  ==  0  ||  buffer[offset  +  len--  0]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len--  1)  ==  0  ||  buffer[offset  +  len--  0]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--  1)  ==  0  ||  buffer[offset  +  len--  0]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  if(buffer[offset    +    len--    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
164	[BUG]  [BUGGY]  if(buffer[offset  +  len--  1)  ==  0  ||  buffer[offset  +  len--  0]!=  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len--  1)  ==  0  ||  buffer[offset  +  len--  0]!=  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--  1)  ==  0  ||  buffer[offset  +  len--  0]!=  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  if(buffer[offset    +    len--    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
165	[BUG]  [BUGGY]  if(buffer[offset  +  len--  1)  ==  0  ||  buffer[offset  +  len--  0]  ==  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len--  1)  ==  0  ||  buffer[offset  +  len--  0]  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--  1)  ==  0  ||  buffer[offset  +  len--  0]  ==  0)  {	  if(buffer[offset    +    len--    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
166	[BUG]  [BUGGY]  if(buffer[offset  +  len--  1)  ==  0  ||  buffer[offset  +  len--  0]!=  encoding)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len--  1)  ==  0  ||  buffer[offset  +  len--  0]!=  encoding)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--  1)  ==  0  ||  buffer[offset  +  len--  0]!=  encoding)  {	  if(buffer[offset    +    len--    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
167	[BUG]  [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  ==  0)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
168	[BUG]  [BUGGY]  byte[]  buffer  =  encoding.parse(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  byte[]  buffer  =  encoding.parse(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	byte[]  buffer  =  encoding.parse(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  byte[]    buffer    =    encoding.decode(buffer,    offset,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
169	[BUG]  [BUGGY]  byte[]  buffer  =  encoding.decode(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  byte[]  buffer  =  encoding.decode(buffer,  offset,  length);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	byte[]  buffer  =  encoding.decode(buffer,  offset,  length);	  byte[]    buffer    =    encoding.decode(buffer,    offset,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
170	[BUG]  [BUGGY]  if(buffer[offset  +  len]!=  -1)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]!=  -1)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]!=  -1)  {	  if(buffer[offset    +    length]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
171	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  buffer[offset  +  len  -  1].length!=  0)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  buffer[offset  +  len  -  1].length!=  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  null  ||  buffer[offset  +  len  -  1].length!=  0)  {	  if(buffer[offset    +    len    -    1)    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
172	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1,    length))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
173	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[offset  +  len  -  1)  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  <  =  0  ||  buffer[offset  +  len  -  1)  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  <  =  0  ||  buffer[offset  +  len  -  1)  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1,    length))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
174	[BUG]  [BUGGY]  if(length  <  0  ||  buffer[offset  +  len  -  1)  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  <  0  ||  buffer[offset  +  len  -  1)  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  <  0  ||  buffer[offset  +  len  -  1)  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1,    length))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
175	[BUG]  [BUGGY]  if(len  <  =  0  ||  buffer[offset  +  len  -  1)  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(len  <  =  0  ||  buffer[offset  +  len  -  1)  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(len  <  =  0  ||  buffer[offset  +  len  -  1)  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1,    length))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
176	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1].encoding.equals(encoding))  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1].encoding.equals(encoding))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1].encoding.equals(encoding))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1].equals(encoding))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
177	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)!=  0  ||  buffer[offset  +  len  -  1].equals(encoding))  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)!=  0  ||  buffer[offset  +  len  -  1].equals(encoding))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)!=  0  ||  buffer[offset  +  len  -  1].equals(encoding))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1].equals(encoding))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
178	[BUG]  [BUGGY]  if(buffer[offset]  ==  null  ||  buffer[offset  +  len]  ==  null)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset]  ==  null  ||  buffer[offset  +  len]  ==  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset]  ==  null  ||  buffer[offset  +  len]  ==  null)  {	  if(buffer[offset    +    len]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
179	[BUG]  [BUGGY]  byte[]  b  =  new  byte[length];  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  byte[]  b  =  new  byte[length];  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	byte[]  b  =  new  byte[length];  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  byte[]    b    =    new    byte[len];    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
180	[BUG]  [BUGGY]  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  length);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  length);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  length);	  byte[]    b    =    new    byte[len];    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
181	[BUG]  [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }	  if(encoding!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
182	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }	  if(encoding!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
183	[BUG]  [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len  +  1);  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len  +  1);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len  +  1);  }	  if(encoding!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
184	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)!=  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)!=  null)  {	  if(buffer[offset    +    len    -    1]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
185	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  2]!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  2]!=  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  2]!=  null)  {	  if(buffer[offset    +    len    -    1]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
186	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)!=  0  ||  buffer[offset  +  len  -  1]  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)!=  0  ||  buffer[offset  +  len  -  1]  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)!=  0  ||  buffer[offset  +  len  -  1]  ==  0)  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
187	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1)  {	  if(buffer[offset    +    len    -    1    ||    buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
188	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  len,  0,  len);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  System.arraycopy(buffer,  offset,  len,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  len,  0,  len);	  System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
189	[BUG]  [BUGGY]  if(buffer[offset  +  len]  ==  DEFAULT_ENCODING  ||  buffer[offset  +  len]!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]  ==  DEFAULT_ENCODING  ||  buffer[offset  +  len]!=  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]  ==  DEFAULT_ENCODING  ||  buffer[offset  +  len]!=  null)  {	  if(buffer[offset    +    len]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
190	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  null  ||  buffer[offset  +  length  -  1]!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]  ==  null  ||  buffer[offset  +  length  -  1]!=  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  null  ||  buffer[offset  +  length  -  1]!=  null)  {	  if(buffer[offset    +    len    -    1]    ==    null    ||    buffer[offset    +    len    -    1]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
191	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len--);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  System.arraycopy(buffer,  offset,  b,  0,  len--);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	System.arraycopy(buffer,  offset,  b,  0,  len--);	  System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
192	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  buffer.length  <  =  length)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  buffer.length  <  =  length)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  null  ||  buffer.length  <  =  length)  {	  if(buffer[offset    +    len    -    1)    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
193	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  buffer.length  >  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  null  ||  buffer.length  >  0)  {	  if(buffer[offset    +    len    -    1)    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
194	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  length  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  null  ||  length  >  buffer.length)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  null  ||  length  >  buffer.length)  {	  if(buffer[offset    +    len    -    1)    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
195	[BUG]  [BUGGY]  if(buffer[offset  +  len]!=  0  ||  buffer[offset  +  len]!=  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]!=  0  ||  buffer[offset  +  len]!=  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]!=  0  ||  buffer[offset  +  len]!=  0)  {	  if(buffer[offset    +    length]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
196	[BUG]  [BUGGY]  if(buffer[offset  +  len]!=  0  ||  buffer[offset  +  len]  ==  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]!=  0  ||  buffer[offset  +  len]  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]!=  0  ||  buffer[offset  +  len]  ==  0)  {	  if(buffer[offset    +    length]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
197	[BUG]  [BUGGY]  if(buffer[offset  +  len--  1]  ==  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len--  1]  ==  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--  1]  ==  null)  {	  if(buffer[offset    +    length    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
198	[BUG]  [BUGGY]  if(buffer[offset  +  len--]  ==  encoding)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len--]  ==  encoding)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--]  ==  encoding)  {	  if(buffer[offset    +    len--]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
199	[BUG]  [BUGGY]  if(buffer[offset  +  len--]!=  encoding)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len--]!=  encoding)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--]!=  encoding)  {	  if(buffer[offset    +    len--]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
200	[BUG]  [BUGGY]  if(buffer[offset  +  len]  ==  null  ||  buffer[offset  +  len  -  1]  ==  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]  ==  null  ||  buffer[offset  +  len  -  1]  ==  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]  ==  null  ||  buffer[offset  +  len  -  1]  ==  null)  {	  if(buffer[offset    +    len    -    1]!=    null    ||    buffer[offset    +    len    -    1]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
201	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
202	[BUG]  [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
203	[BUG]  [BUGGY]  if(encoding  ==  DEFAULT_ENCODING)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding  ==  DEFAULT_ENCODING)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding  ==  DEFAULT_ENCODING)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
204	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
205	[BUG]  [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
206	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  <  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  <  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  <  0)  {	  if(buffer[offset    +    len    -    1    ||    buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
207	[BUG]  [BUGGY]  if(buff[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buff[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buff[offset  +  len  -  1  ||  buffer[offset  +  len  -  1)  ==  0)  {	  if(buffer[offset    +    len    -    1    ||    buffer[offset    +    len    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
208	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  length);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  return  encoding.decode(buffer,  offset,  length);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    return    encoding.decode(buffer,    offset,    len);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
209	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
210	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
211	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
212	[BUG]  [BUGGY]  if(buffer[offset  +  len]  ==  null  ||  buffer.length  <  =  length)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]  ==  null  ||  buffer.length  <  =  length)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]  ==  null  ||  buffer.length  <  =  length)  {	  if(buffer[offset    +    len]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
213	[BUG]  [BUGGY]  if(buffer[offset  +  len]  ==  null  ||  buffer.length  >  len)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]  ==  null  ||  buffer.length  >  len)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]  ==  null  ||  buffer.length  >  len)  {	  if(buffer[offset    +    len]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
214	[BUG]  [BUGGY]  if(buffer[offset  +  len]  ==  null  ||  buffer.length  >=  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]  ==  null  ||  buffer.length  >=  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]  ==  null  ||  buffer.length  >=  0)  {	  if(buffer[offset    +    len]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
215	[BUG]  [BUGGY]  if(buffer[offset  +  len--  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len--  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer,  0,  len);	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
216	[BUG]  [BUGGY]  if(encoding!=  null)  {  byte[]  buffer  =  encoding.decode(buffer,  offset,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  byte[]  buffer  =  encoding.decode(buffer,  offset,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  byte[]  buffer  =  encoding.decode(buffer,  offset,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  byte[]    buffer    =    encoding.decode(buffer,    offset,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
217	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  if(buffer[offset    +    len    -    1)    ==    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
218	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1],  buffer[offset  +  len  -  1].equals(encoding))  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1],  buffer[offset  +  len  -  1].equals(encoding))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1],  buffer[offset  +  len  -  1].equals(encoding))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1].equals(encoding))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
219	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
220	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
221	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
222	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
223	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  b,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  System.arraycopy(buffer,    offset,    b,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
224	[BUG]  [BUGGY]  if(encoding!=  null)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  }	  byte[]    b    =    new    byte[len];    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
225	[BUG]  [BUGGY]  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  buf,  0,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  buf,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  buf,  0,  len);	  byte[]    b    =    new    byte[len];    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
226	[BUG]  [BUGGY]  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  len,  0,  len);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  len,  0,  len);  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  len,  0,  len);	  byte[]    b    =    new    byte[len];    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
227	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(length  <  =  0  ||  buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(length  <  =  0  ||  buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1,    length))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
228	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length  -  1))  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length  -  1))  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1)  ==  0  ||  buffer[offset  +  len  -  1]  ==  System.arraycopy(buffer,  offset,  buffer[offset  +  len  -  1,  length  -  1))  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    System.arraycopy(buffer,    offset,    buffer[offset    +    len    -    1,    length))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
229	[BUG]  [BUGGY]  if(buffer[offset  +  len--  1)  ==  0  ||  buffer.charAt(offset  +  len--)  <  =  '0')  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len--  1)  ==  0  ||  buffer.charAt(offset  +  len--)  <  =  '0')  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--  1)  ==  0  ||  buffer.charAt(offset  +  len--)  <  =  '0')  {	  if(buffer[offset    +    len--    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
230	[BUG]  [BUGGY]  if(buffer[offset  +  len--  1)  ==  0  ||  buffer.charAt(offset  +  len--)  ==  '0')  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len--  1)  ==  0  ||  buffer.charAt(offset  +  len--)  ==  '0')  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--  1)  ==  0  ||  buffer.charAt(offset  +  len--)  ==  '0')  {	  if(buffer[offset    +    len--    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
231	[BUG]  [BUGGY]  if(buffer[offset  +  len--  1  ||  buffer.charAt(offset  +  len--  1)!=  '0')  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len--  1  ||  buffer.charAt(offset  +  len--  1)!=  '0')  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len--  1  ||  buffer.charAt(offset  +  len--  1)!=  '0')  {	  if(buffer[offset    +    len--    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
232	[BUG]  [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
233	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  b,  0,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
234	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
235	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  length,  b,  0,  len);  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  length,  b,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  System.arraycopy(buffer,  offset,  length,  b,  0,  len);  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
236	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  b,  0,  len);  }  else  {  throw  new  IllegalStateException( " ");  }	  System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    b,    0,    len);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
237	[BUG]  [BUGGY]  if(buffer[offset  +  len]  ==  0  ||  buffer[offset  +  length]  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]  ==  0  ||  buffer[offset  +  length]  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]  ==  0  ||  buffer[offset  +  length]  ==  0)  {	  if    (buffer[offset    +    length]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
238	[BUG]  [BUGGY]  if(buffer[offset  +  len]  ==  0  ||  buffer[offset  +  length]!=  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]  ==  0  ||  buffer[offset  +  length]!=  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]  ==  0  ||  buffer[offset  +  length]!=  0)  {	  if    (buffer[offset    +    length]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
239	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1]!=  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1]!=  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1]  ==  0  ||  buffer[offset  +  len  -  1]!=  0)  {	  if(buffer[offset    +    len    -    1)    ==    0    ||    buffer[offset    +    len    -    1]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
240	[BUG]  [BUGGY]  if(buffer[offset  +  len]!=  null  ||  buffer.length  <  =  length)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]!=  null  ||  buffer.length  <  =  length)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]!=  null  ||  buffer.length  <  =  length)  {	  if(buffer[offset    +    len]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
241	[BUG]  [BUGGY]  if(buffer[offset  +  len]!=  null  ||  buffer.length  >  len)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]!=  null  ||  buffer.length  >  len)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]!=  null  ||  buffer.length  >  len)  {	  if(buffer[offset    +    len]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
242	[BUG]  [BUGGY]  if(buffer[offset  +  len]!=  null  ||  buffer.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]!=  null  ||  buffer.length  ==  0)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]!=  null  ||  buffer.length  ==  0)  {	  if(buffer[offset    +    len]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
243	[BUG]  [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  len,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  len,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding  ==  null)  {  System.arraycopy(buffer,  offset,  len,  buffer,  0,  len);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  if(encoding!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
244	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  len,  buffer,  0,  encoding.length);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  len,  buffer,  0,  encoding.length);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  len,  buffer,  0,  encoding.length);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  if(encoding!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
245	[BUG]  [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(encoding!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  0,  len);  }	  if(encoding!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    len);    System.arraycopy(buffer,    offset,    buffer,    0,    len);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
246	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer.charAt(offset  +  len)>  buffer.length)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer.charAt(offset  +  len)>  buffer.length)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1  ||  buffer.charAt(offset  +  len)>  buffer.length)  {	  if(buffer[offset    +    len    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
247	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer.charAt(offset  +  len  -  1)!=  '0')  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer.charAt(offset  +  len  -  1)!=  '0')  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1  ||  buffer.charAt(offset  +  len  -  1)!=  '0')  {	  if(buffer[offset    +    len    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
248	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer.charAt(offset  +  len  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer.charAt(offset  +  len  -  1)!=  '/')  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1  ||  buffer.charAt(offset  +  len  -  1)!=  '/')  {	  if(buffer[offset    +    len    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
249	[BUG]  [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer.charAt(offset  +  len)  >=  '0')  {  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  -  1  ||  buffer.charAt(offset  +  len)  >=  '0')  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  -  1  ||  buffer.charAt(offset  +  len)  >=  '0')  {	  if(buffer[offset    +    len    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
250	[BUG]  [BUGGY]  if(buffer[offset  +  len]  ==  0  ||  buffer.charAt(offset  +  len)  >=  '0')  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]  ==  0  ||  buffer.charAt(offset  +  len)  >=  '0')  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]  ==  0  ||  buffer.charAt(offset  +  len)  >=  '0')  {	  if(buffer[offset    +    len]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
251	[BUG]  [BUGGY]  if(buffer[offset  +  len]  ==  0  ||  buffer.charAt(offset  +  len)  <  =  '0')  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len]  ==  0  ||  buffer.charAt(offset  +  len)  <  =  '0')  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len]  ==  0  ||  buffer.charAt(offset  +  len)  <  =  '0')  {	  if(buffer[offset    +    len]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
252	[BUG]  [BUGGY]  if(buffer[offset  +  length  -  1)  ==  0  ||  buffer.charAt(offset  +  len)  ==  '0')  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  length  -  1)  ==  0  ||  buffer.charAt(offset  +  len)  ==  '0')  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  length  -  1)  ==  0  ||  buffer.charAt(offset  +  len)  ==  '0')  {	  if(buffer[offset    +    length    -    1)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
253	[BUG]  [BUGGY]  if(buffer[offset  +  len  *  len  -  1]!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  static  String  parseName(byte[]  buffer,  final  int  offset,  final  int  length,  final  ZipEncoding  encoding)  throws  IOException  {  int  len  =  length;  for  (;  len  >  0;  len--)  {      [BUGGY]  if(buffer[offset  +  len  *  len  -  1]!=  null)  {  [BUGGY]      break;  }  }  if  (len  >  0)  {  byte[]  b  =  new  byte[len];  System.arraycopy(buffer,  offset,  b,  0,  len);  return  encoding.decode(b);  }  return       "     ";  }  [CLASS]  TarUtils  1  [METHOD]  parseName  [RETURN_TYPE]  String  byte[]  buffer  final  int  offset  final  int  length  ZipEncoding  encoding  [VARIABLES]  byte[]  b  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  len  length  offset  start  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	289	289	1	replace	if(buffer[offset  +  len  *  len  -  1]!=  null)  {	  if(buffer[offset    +    len    -    1]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
