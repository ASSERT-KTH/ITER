bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while  (end  <  start)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }    [BUGGY]  while  (end  <  start)  {  [BUGGY]  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	116	116	1	replace	while  (end  <  start)  {	while  (start  <  end){  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
2	[BUG]  [BUGGY]  while  (start  <  end  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }    [BUGGY]  while  (start  <  end  ||  end  >  buffer.length)  {  [BUGGY]  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	116	116	1	replace	while  (start  <  end  ||  end  >  buffer.length)  {	while  (start  <  end){  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
3	[BUG]  [BUGGY]  while  (start  <  end  &&  end  <  length)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }    [BUGGY]  while  (start  <  end  &&  end  <  length)  {  [BUGGY]  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	116	116	1	replace	while  (start  <  end  &&  end  <  length)  {	while  (start  <  end){  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
4	[BUG]  [BUGGY]  while  (start  <  end  &&  end  <  =  length)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }    [BUGGY]  while  (start  <  end  &&  end  <  =  length)  {  [BUGGY]  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	116	116	1	replace	while  (start  <  end  &&  end  <  =  length)  {	while  (start  <  end){  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
5	[BUG]  [BUGGY]  while  (start  <  end  &&  end  <  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }    [BUGGY]  while  (start  <  end  &&  end  <  buffer.length)  {  [BUGGY]  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	116	116	1	replace	while  (start  <  end  &&  end  <  buffer.length)  {	while  (start  <  end){  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
6	[BUG]  [BUGGY]  while  (offset  <  end)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError  [CONTEXT]  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }    [BUGGY]  while  (offset  <  end)  {  [BUGGY]  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	116	116	1	replace	while  (offset  <  end)  {	while  (start  <  end){  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                AssertionError  [CONTEXT]  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }    [BUGGY]    [BUGGY]  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	116	116	1	replace	  	while  (start  <  end){  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
8	[BUG]  [BUGGY]  while  (start  <  end  &&  end  <  =  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }    [BUGGY]  while  (start  <  end  &&  end  <  =  buffer.length)  {  [BUGGY]  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	116	116	1	replace	while  (start  <  end  &&  end  <  =  buffer.length)  {	while  (start  <  end){  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
9	[BUG]  [BUGGY]  while(start  <  length)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }    [BUGGY]  while(start  <  length)  {  [BUGGY]  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  byte  trailer;  trailer  =  buffer[end-1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.5	116	116	1	replace	while(start  <  length)  {	while  (start  <  end){  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
