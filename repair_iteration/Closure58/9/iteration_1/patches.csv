bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.escaped);  [CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;  [FE]                IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.escaped);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.escaped);	  computeEscaped(jsScope,    escaped,    compiler,    this.liveSet);    	non-compiled	[CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;	5	None	replace
2	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.bitSet);  [CE]  cannot  find  symbol  bitSet  [FE]                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.bitSet);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.bitSet);	  computeEscaped(jsScope,    escaped,    compiler,    this.liveSet);    	non-compiled	[CE]  cannot  find  symbol  bitSet	5	None	replace
3	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.buffered);  [CE]  cannot  find  symbol  buffered  [FE]                    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.buffered);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.buffered);	  computeEscaped(jsScope,    escaped,    compiler,    this.liveSet);    	non-compiled	[CE]  cannot  find  symbol  buffered	5	None	replace
4	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.buffer);  [CE]  cannot  find  symbol  buffer  [FE]                      IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.buffer);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.buffer);	  computeEscaped(jsScope,    escaped,    compiler,    this.liveSet);    	non-compiled	[CE]  cannot  find  symbol  buffer	5	None	replace
5	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.hashSet);  [CE]  cannot  find  symbol  hashSet  [FE]                        IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.hashSet);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.hashSet);	  computeEscaped(jsScope,    escaped,    compiler,    this.liveSet);    	non-compiled	[CE]  cannot  find  symbol  hashSet	5	None	replace
6	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.BitSet);  [CE]  cannot  find  symbol  BitSet  [FE]                          IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.BitSet);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.BitSet);	  computeEscaped(jsScope,    escaped,    compiler,    this.liveSet);    	non-compiled	[CE]  cannot  find  symbol  BitSet	5	None	replace
7	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.ioContext);  [CE]  cannot  find  symbol  ioContext  [FE]                            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.ioContext);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.ioContext);	  computeEscaped(jsScope,    escaped,    compiler,    this.liveSet);    	non-compiled	[CE]  cannot  find  symbol  ioContext	5	None	replace
8	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.offset);  [CE]  cannot  find  symbol  offset  [FE]                              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.offset);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.offset);	  computeEscaped(jsScope,    escaped,    compiler,    this.liveSet);    	non-compiled	[CE]  cannot  find  symbol  offset	5	None	replace
9	[BUG]  [BUGGY]  this.escaped  =  Sets.newHashSet();  [CE]  variable  escaped  might  already  have  been  assigned  [FE]        IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  this.escaped  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	this.escaped  =  Sets.newHashSet();	  escaped    =    Sets.newHashSet();    	non-compiled	[CE]  variable  escaped  might  already  have  been  assigned	1	None	replace
10	[BUG]  [BUGGY]  escaped  =  Sets.newHashSetWithCapacity(jsScope.getCapacity());  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSetWithCapacity(jsScope.getCapacity());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSetWithCapacity(jsScope.getCapacity());	  escaped    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
11	[BUG]  [BUGGY]  ered  =  Sets.newHashSet();  [CE]  cannot  find  symbol  ered  [FE]            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  ered  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	ered  =  Sets.newHashSet();	  escaped    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  ered	1	None	replace
12	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(jsScope.getParent());  [CE]  incompatible  types  [FE]              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(jsScope.getParent());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(jsScope.getParent());	  escaped    =    Sets.newHashSet();    	non-compiled	[CE]  incompatible  types	1	None	replace
13	[BUG]  [BUGGY]  escape  =  Sets.newHashSet();  [CE]  cannot  find  symbol  escape  [FE]                IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escape  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escape  =  Sets.newHashSet();	  escaped    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  escape	1	None	replace
14	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(jsScope.getAnalyzer());  [CE]  cannot  find  symbol  [FE]                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(jsScope.getAnalyzer());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(jsScope.getAnalyzer());	  escaped    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
15	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  Set  <  String>  liveSet  =  Sets.newHashSet();  [CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)  [FE]    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  Set  <  String>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    String>    liveSet    =    Sets.newHashSet();    Set  <  String>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)	17	None	add
16	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  List  <  String>  liveSet  =  Sets.newHashSet();  [CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)  [FE]      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  List  <  String>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    String>    liveSet    =    Sets.newHashSet();    List  <  String>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)	17	None	add
17	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  Collection  <  String>  liveSet  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  Collection  <  String>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    String>    liveSet    =    Sets.newHashSet();    Collection  <  String>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
18	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  List  <  String>  liveSet  =  Sets.newArrayList();  [CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)  [FE]          AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  List  <  String>  liveSet  =  Sets.newArrayList();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    String>    liveSet    =    Sets.newHashSet();    List  <  String>  liveSet  =  Sets.newArrayList();	  	non-compiled	[CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)	17	None	add
19	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  HashSet  <  String>  liveSet  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  HashSet  <  String>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    String>    liveSet    =    Sets.newHashSet();    HashSet  <  String>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
20	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  set  <  String>  liveSet  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  set  <  String>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    String>    liveSet    =    Sets.newHashSet();    set  <  String>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
21	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  ArrayList  <  String>  liveSet  =  Sets.newArrayList();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  ArrayList  <  String>  liveSet  =  Sets.newArrayList();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    String>    liveSet    =    Sets.newHashSet();    ArrayList  <  String>  liveSet  =  Sets.newArrayList();	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
22	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  ArrayList  <  String>  liveSet  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  ArrayList  <  String>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    String>    liveSet    =    Sets.newHashSet();    ArrayList  <  String>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
23	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  String>  liveSet  =  Sets.newHashSet();  [CE]  cannot  find  symbol  String  [FE]                    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  String>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    String>    liveSet    =    Sets.newHashSet();    String>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol  String	17	None	add
24	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	add	Preconditions.checkState(escaped    ==    jsScope);    Preconditions.checkState(escaped  ==  jsScope);	  	compilable	  [FE]  IllegalStateException  	14	20	add
25	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped    ==    jsScope);    Preconditions.checkState(escaped  ==  jsScope);	  	compilable	  [FE]  IllegalStateException  	14	20	add
26	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  preconditions.checkState(escaped  ==  jsScope);  [CE]  cannot  find  symbol  preconditions  [FE]      IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  preconditions.checkState(escaped  ==  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped    ==    jsScope);    Preconditions.checkState(escaped  ==  jsScope);  preconditions.checkState(escaped  ==  jsScope);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	14	None	add
27	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  this.escaped  =  Sets.newHashSet();  [CE]  variable  escaped  might  already  have  been  assigned  [FE]        IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  this.escaped  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped    ==    jsScope);    Preconditions.checkState(escaped  ==  jsScope);  this.escaped  =  Sets.newHashSet();	  	non-compiled	[CE]  variable  escaped  might  already  have  been  assigned	14	None	add
28	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  }  else  {  Preconditions.checkState(escaped  ==  jsScope);  [CE]  illegal  start  of  type  [FE]          IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  }  else  {  Preconditions.checkState(escaped  ==  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped    ==    jsScope);    Preconditions.checkState(escaped  ==  jsScope);  }  else  {  Preconditions.checkState(escaped  ==  jsScope);	  	non-compiled	[CE]  illegal  start  of  type	14	None	add
29	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  }  else  {  Preconditions.checkState(escaped  ==  jsScope);  preconditions.checkState(escaped  ==  jsScope);  [CE]  illegal  start  of  type  [FE]            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  }  else  {  Preconditions.checkState(escaped  ==  jsScope);  preconditions.checkState(escaped  ==  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped    ==    jsScope);    Preconditions.checkState(escaped  ==  jsScope);  }  else  {  Preconditions.checkState(escaped  ==  jsScope);  preconditions.checkState(escaped  ==  jsScope);	  	non-compiled	[CE]  illegal  start  of  type	14	None	add
30	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped!=  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	add	Preconditions.checkState(escaped    ==    jsScope);    Preconditions.checkState(escaped!=  jsScope);	  	compilable	  [FE]  IllegalStateException  	14	20	add
31	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped!=  jsScope);  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped!=  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped    ==    jsScope);    Preconditions.checkState(escaped!=  jsScope);	  	compilable	  [FE]  IllegalStateException  	14	20	add
32	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  }  else  {  Preconditions.checkState(escaped  ==  jsScope);  this.escaped  =  Sets.newHashSet();  [CE]  illegal  start  of  type  [FE]                IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  }  else  {  Preconditions.checkState(escaped  ==  jsScope);  this.escaped  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped    ==    jsScope);    Preconditions.checkState(escaped  ==  jsScope);  }  else  {  Preconditions.checkState(escaped  ==  jsScope);  this.escaped  =  Sets.newHashSet();	  	non-compiled	[CE]  illegal  start  of  type	14	None	add
33	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(  escape  ==  jsScope);  [CE]  cannot  find  symbol  escape  [FE]                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(  escape  ==  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped    ==    jsScope);    Preconditions.checkState(  escape  ==  jsScope);	  	non-compiled	[CE]  cannot  find  symbol  escape	14	None	add
34	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  System.arraycopy(jsScope,  0,  this.escaped,  0,  jsScope.getParent());  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  System.arraycopy(jsScope,  0,  this.escaped,  0,  jsScope.getParent());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped    ==    jsScope);    Preconditions.checkState(escaped  ==  jsScope);  System.arraycopy(jsScope,  0,  this.escaped,  0,  jsScope.getParent());	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	14	None	add
35	[BUG]  [BUGGY]  Preconditions.checkState(escaped  >=  jsScope);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  >=  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped  >=  jsScope);	  Preconditions.checkState(escaped!=    jsScope);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	8	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope,  compiler);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	add	Preconditions.checkState(escaped!=  jsScope,  compiler);	  Preconditions.checkState(escaped!=    jsScope);    	compilable	  [FE]  AssertionFailedError  	8	3	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  jsScope,  compiler);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope,  compiler);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=  jsScope,  compiler);	  Preconditions.checkState(escaped!=    jsScope);    	compilable	  [FE]  AssertionFailedError  	8	3	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(escaped  >>  jsScope);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  >>  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped  >>  jsScope);	  Preconditions.checkState(escaped!=    jsScope);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	8	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(escaped  [Delete]  jsScope);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  [Delete]  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped  [Delete]  jsScope);	  Preconditions.checkState(escaped!=    jsScope);    	non-compiled	[CE]  ')'  expected	8	None	replace
40	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope,  compiler);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	add	Preconditions.checkState(escaped  ==  jsScope,  compiler);	  Preconditions.checkState(escaped!=    jsScope);    	compilable	  [FE]  IllegalStateException  	8	20	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope,  compiler);  [FE]  IllegalStateException  [FE]            AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope,  compiler);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped  ==  jsScope,  compiler);	  Preconditions.checkState(escaped!=    jsScope);    	compilable	  [FE]  IllegalStateException  	8	20	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  jsScope;  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope;  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=  jsScope;	  Preconditions.checkState(escaped!=    jsScope);    	non-compiled	[CE]  ')'  expected	8	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(escaped  [BUGGY]  jsScope);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  [BUGGY]  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped  [BUGGY]  jsScope);	  Preconditions.checkState(escaped!=    jsScope);    	non-compiled	[CE]  ')'  expected	8	None	replace
44	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  ARGUMENT_ARRAY_ALIAS);  [CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;  [FE]        IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  ARGUMENT_ARRAY_ALIAS);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  ARGUMENT_ARRAY_ALIAS);	  computeEscaped(jsScope,    escaped,    compiler,    liveSet);    	non-compiled	[CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;	13	None	replace
45	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  escaped);  [CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;  [FE]          IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  escaped);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  escaped);	  computeEscaped(jsScope,    escaped,    compiler,    liveSet);    	non-compiled	[CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;	13	None	replace
46	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  null);  [CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;  [FE]            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  null);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  null);	  computeEscaped(jsScope,    escaped,    compiler,    liveSet);    	non-compiled	[CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;	13	None	replace
47	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cache);  [CE]  cannot  find  symbol  cache  [FE]              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cache);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  cache);	  computeEscaped(jsScope,    escaped,    compiler,    liveSet);    	non-compiled	[CE]  cannot  find  symbol  cache	13	None	replace
48	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  endSet);  [CE]  cannot  find  symbol  endSet  [FE]                IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  endSet);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  endSet);	  computeEscaped(jsScope,    escaped,    compiler,    liveSet);    	non-compiled	[CE]  cannot  find  symbol  endSet	13	None	replace
49	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  set);  [CE]  cannot  find  symbol  set  [FE]                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  set);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  set);	  computeEscaped(jsScope,    escaped,    compiler,    liveSet);    	non-compiled	[CE]  cannot  find  symbol  set	13	None	replace
50	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  scope);  [CE]  cannot  find  symbol  scope  [FE]                    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  scope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  scope);	  computeEscaped(jsScope,    escaped,    compiler,    liveSet);    	non-compiled	[CE]  cannot  find  symbol  scope	13	None	replace
51	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped!=  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	add	Preconditions.checkState(escaped!=    jsScope);    Preconditions.checkState(escaped!=  jsScope);	  	compilable	  [FE]  IllegalStateException  	7	1	add
52	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped!=  jsScope);  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped!=  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=    jsScope);    Preconditions.checkState(escaped!=  jsScope);	  	compilable	  [FE]  IllegalStateException  	7	1	add
53	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped  >=  jsScope);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped  >=  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=    jsScope);    Preconditions.checkState(escaped  >=  jsScope);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	7	None	add
54	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	add	Preconditions.checkState(escaped!=    jsScope);    Preconditions.checkState(escaped  ==  jsScope);	  	compilable	  [FE]  IllegalStateException  	7	20	add
55	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=    jsScope);    Preconditions.checkState(escaped  ==  jsScope);	  	compilable	  [FE]  IllegalStateException  	7	20	add
56	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped  >>  jsScope);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped  >>  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=    jsScope);    Preconditions.checkState(escaped  >>  jsScope);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	7	None	add
57	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped!=  jsScope);  }  else  {  Preconditions.checkState(escaped!=  jsScope);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped!=  jsScope);  }  else  {  Preconditions.checkState(escaped!=  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=    jsScope);    Preconditions.checkState(escaped!=  jsScope);  }  else  {  Preconditions.checkState(escaped!=  jsScope);	  	non-compiled	[CE]  illegal  start  of  type	7	None	add
58	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped!=  jsScope);  preconditions.checkState(escaped!=  jsScope);  [CE]  cannot  find  symbol  preconditions  [FE]              AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped!=  jsScope);  preconditions.checkState(escaped!=  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=    jsScope);    Preconditions.checkState(escaped!=  jsScope);  preconditions.checkState(escaped!=  jsScope);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	7	None	add
59	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped!=  jsScope);  this.escaped  =  Sets.newHashSet();  [CE]  variable  escaped  might  already  have  been  assigned  [FE]                AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped!=  jsScope);  this.escaped  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=    jsScope);    Preconditions.checkState(escaped!=  jsScope);  this.escaped  =  Sets.newHashSet();	  	non-compiled	[CE]  variable  escaped  might  already  have  been  assigned	7	None	add
60	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped  >=  jsScope);  }  else  {  Preconditions.checkState(escaped!=  jsScope);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped  >=  jsScope);  }  else  {  Preconditions.checkState(escaped!=  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=    jsScope);    Preconditions.checkState(escaped  >=  jsScope);  }  else  {  Preconditions.checkState(escaped!=  jsScope);	  	non-compiled	[CE]  illegal  start  of  type	7	None	add
61	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped!=  jsScope);  }  else  {  Preconditions.checkState(escaped  >=  jsScope);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped!=  jsScope);  }  else  {  Preconditions.checkState(escaped  >=  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=    jsScope);    Preconditions.checkState(escaped!=  jsScope);  }  else  {  Preconditions.checkState(escaped  >=  jsScope);	  	non-compiled	[CE]  illegal  start  of  type	7	None	add
62	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped!=  jsScope);  }  else  {  Preconditions.checkState(escaped  ==  jsScope);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  Preconditions.checkState(escaped!=  jsScope);  }  else  {  Preconditions.checkState(escaped  ==  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=    jsScope);    Preconditions.checkState(escaped!=  jsScope);  }  else  {  Preconditions.checkState(escaped  ==  jsScope);	  	non-compiled	[CE]  illegal  start  of  type	7	None	add
63	[BUG]  [BUGGY]  computeEscaped(cfg,  escaped,  compiler,  jsScope);  [CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;  [FE]          IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(cfg,  escaped,  compiler,  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(cfg,  escaped,  compiler,  jsScope);	  computeEscaped(jsScope,    escaped,    compiler,    cfg);    	non-compiled	[CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;	2	None	replace
64	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  scope);  [CE]  cannot  find  symbol  scope  [FE]            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  scope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  cfg,  scope);	  computeEscaped(jsScope,    escaped,    compiler,    cfg);    	non-compiled	[CE]  cannot  find  symbol  scope	2	None	replace
65	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  ARGUMENT_ARRAY_ALIAS);  [CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;  [FE]              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  ARGUMENT_ARRAY_ALIAS);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  cfg,  ARGUMENT_ARRAY_ALIAS);	  computeEscaped(jsScope,    escaped,    compiler,    cfg);    	non-compiled	[CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;	2	None	replace
66	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  null);  [CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;  [FE]                IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  null);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  cfg,  null);	  computeEscaped(jsScope,    escaped,    compiler,    cfg);    	non-compiled	[CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;	2	None	replace
67	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  context);  [CE]  cannot  find  symbol  context  [FE]                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  context);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  cfg,  context);	  computeEscaped(jsScope,    escaped,    compiler,    cfg);    	non-compiled	[CE]  cannot  find  symbol  context	2	None	replace
68	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  execution);  [CE]  cannot  find  symbol  execution  [FE]                    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  execution);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  cfg,  execution);	  computeEscaped(jsScope,    escaped,    compiler,    cfg);    	non-compiled	[CE]  cannot  find  symbol  execution	2	None	replace
69	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  this.liveSet);  [CE]  cannot  find  symbol  liveSet  [FE]                      IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  this.liveSet);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  cfg,  this.liveSet);	  computeEscaped(jsScope,    escaped,    compiler,    cfg);    	non-compiled	[CE]  cannot  find  symbol  liveSet	2	None	replace
70	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  argument_ARRAY_ALIAS);  [CE]  cannot  find  symbol  argument_ARRAY_ALIAS  [FE]                        IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  argument_ARRAY_ALIAS);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  cfg,  argument_ARRAY_ALIAS);	  computeEscaped(jsScope,    escaped,    compiler,    cfg);    	non-compiled	[CE]  cannot  find  symbol  argument_ARRAY_ALIAS	2	None	replace
71	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                          IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  arguments);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  cfg,  arguments);	  computeEscaped(jsScope,    escaped,    compiler,    cfg);    	non-compiled	[CE]  cannot  find  symbol  arguments	2	None	replace
72	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  Set  <  Node>  liveSet  =  Sets.newHashSet();  [CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)  [FE]    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  Set  <  Node>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    Node>    liveSet    =    Sets.newHashSet();    Set  <  Node>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)	19	None	add
73	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  List  <  Node>  liveSet  =  Sets.newArrayList();  [CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)  [FE]      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  List  <  Node>  liveSet  =  Sets.newArrayList();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    Node>    liveSet    =    Sets.newHashSet();    List  <  Node>  liveSet  =  Sets.newArrayList();	  	non-compiled	[CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)	19	None	add
74	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  Collection  <  Node>  liveSet  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  Collection  <  Node>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    Node>    liveSet    =    Sets.newHashSet();    Collection  <  Node>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
75	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  List  <  Node>  liveSet  =  Sets.newHashSet();  [CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)  [FE]          AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  List  <  Node>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    Node>    liveSet    =    Sets.newHashSet();    List  <  Node>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)	19	None	add
76	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  NodeSet  <  Node>  liveSet  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  NodeSet  <  Node>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    Node>    liveSet    =    Sets.newHashSet();    NodeSet  <  Node>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
77	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  HashSet  <  Node>  liveSet  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  HashSet  <  Node>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    Node>    liveSet    =    Sets.newHashSet();    HashSet  <  Node>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
78	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  ControlFlowGraph  <  Node>  escaped  =  Sets.newHashSet();  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  ControlFlowGraph<Node>  [FE]                AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  ControlFlowGraph  <  Node>  escaped  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    Node>    liveSet    =    Sets.newHashSet();    ControlFlowGraph  <  Node>  escaped  =  Sets.newHashSet();	  	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  ControlFlowGraph<Node>	19	None	add
79	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  Iterator  <  Node>  liveSet  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  Iterator  <  Node>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    Node>    liveSet    =    Sets.newHashSet();    Iterator  <  Node>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
80	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  Node[]  liveSet  =  Sets.newHashSet();  [CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)  [FE]                    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  Node[]  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    Node>    liveSet    =    Sets.newHashSet();    Node[]  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)	19	None	add
81	[BUG]  [BUGGY]      escaped.addAll(jsScope);  [CE]  no  suitable  method  found  for  addAll(Scope)  [FE]    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]      escaped.addAll(jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	        escaped.addAll(jsScope);	  	non-compiled	[CE]  no  suitable  method  found  for  addAll(Scope)	11	None	add
82	[BUG]  [BUGGY]      System.arraycopy(jsScope,  0,  escaped,  0,  compiler.length);  [CE]  cannot  find  symbol  length  [FE]      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]      System.arraycopy(jsScope,  0,  escaped,  0,  compiler.length);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	        System.arraycopy(jsScope,  0,  escaped,  0,  compiler.length);	  	non-compiled	[CE]  cannot  find  symbol  length	11	None	add
83	[BUG]  [BUGGY]      System.arraycopy(jsScope,  0,  this.escaped,  0,  compiler.length);  [CE]  cannot  find  symbol  length  [FE]        AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]      System.arraycopy(jsScope,  0,  this.escaped,  0,  compiler.length);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	        System.arraycopy(jsScope,  0,  this.escaped,  0,  compiler.length);	  	non-compiled	[CE]  cannot  find  symbol  length	11	None	add
84	[BUG]  [BUGGY]      System.arraycopy(jsScope,  0,  escaped,  0,  compiler.getMask());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]      System.arraycopy(jsScope,  0,  escaped,  0,  compiler.getMask());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	        System.arraycopy(jsScope,  0,  escaped,  0,  compiler.getMask());	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
85	[BUG]  [BUGGY]      System.arraycopy(jsScope,  0,  escaped,  0,  compiler.getLength());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]      System.arraycopy(jsScope,  0,  escaped,  0,  compiler.getLength());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	        System.arraycopy(jsScope,  0,  escaped,  0,  compiler.getLength());	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
86	[BUG]  [BUGGY]      escaped.add(jsScope.getAnalyzer());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]      escaped.add(jsScope.getAnalyzer());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	        escaped.add(jsScope.getAnalyzer());	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
87	[BUG]  [BUGGY]      System.arraycopy(jsScope,  0,  liveSet,  0,  escaped.size());  [CE]  cannot  find  symbol  liveSet  [FE]                AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]      System.arraycopy(jsScope,  0,  liveSet,  0,  escaped.size());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	        System.arraycopy(jsScope,  0,  liveSet,  0,  escaped.size());	  	non-compiled	[CE]  cannot  find  symbol  liveSet	11	None	add
88	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet(escaped);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet(escaped);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  String>  liveSet  =  Sets.newHashSet(escaped);	  Set    <    String>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  incompatible  types	18	None	replace
89	[BUG]  [BUGGY]  List  <  String>  liveSet  =  Sets.newHashSet();  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<String>  [FE]      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  List  <  String>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	List  <  String>  liveSet  =  Sets.newHashSet();	  Set    <    String>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<String>	18	None	replace
90	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getCapacity());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getCapacity());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getCapacity());	  Set    <    String>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
91	[BUG]  [BUGGY]  ArrayList  <  String>  liveSet  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  ArrayList  <  String>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	ArrayList  <  String>  liveSet  =  Sets.newHashSet();	  Set    <    String>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
92	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet(escaped?  Sets.newHashSet()  :  Sets.newHashSet();  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet(escaped?  Sets.newHashSet()  :  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  String>  liveSet  =  Sets.newHashSet(escaped?  Sets.newHashSet()  :  Sets.newHashSet();	  Set    <    String>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  ')'  expected	18	None	replace
93	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet(escaped?  Sets.newHashSet()  :  Sets.newHashSet());  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet(escaped?  Sets.newHashSet()  :  Sets.newHashSet());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  String>  liveSet  =  Sets.newHashSet(escaped?  Sets.newHashSet()  :  Sets.newHashSet());	  Set    <    String>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  incompatible  types	18	None	replace
94	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getCapacity()  -  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getCapacity()  -  1);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getCapacity()  -  1);	  Set    <    String>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
95	[BUG]  [BUGGY]  escaped.add(jsScope,  compiler);  [CE]  no  suitable  method  found  for  add(Scope,AbstractCompiler)  [FE]            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped.add(jsScope,  compiler);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped.add(jsScope,  compiler);	  escaped.add(jsScope);    	non-compiled	[CE]  no  suitable  method  found  for  add(Scope,AbstractCompiler)	3	None	replace
96	[BUG]  [BUGGY]  escaped.add(compiler,  jsScope);  [CE]  no  suitable  method  found  for  add(AbstractCompiler,Scope)  [FE]              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped.add(compiler,  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped.add(compiler,  jsScope);	  escaped.add(jsScope);    	non-compiled	[CE]  no  suitable  method  found  for  add(AbstractCompiler,Scope)	3	None	replace
97	[BUG]  [BUGGY]  escaped.add(cfg,  jsScope);  [CE]  no  suitable  method  found  for  add(ControlFlowGraph<Node>,Scope)  [FE]                IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped.add(cfg,  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped.add(cfg,  jsScope);	  escaped.add(jsScope);    	non-compiled	[CE]  no  suitable  method  found  for  add(ControlFlowGraph<Node>,Scope)	3	None	replace
98	[BUG]  [BUGGY]  escaped.add(jsScope,  this.escaped);  [CE]  no  suitable  method  found  for  add(Scope,Set<Var>)  [FE]                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped.add(jsScope,  this.escaped);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped.add(jsScope,  this.escaped);	  escaped.add(jsScope);    	non-compiled	[CE]  no  suitable  method  found  for  add(Scope,Set<Var>)	3	None	replace
99	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(jsScope,  compiler);  [CE]  incompatible  types  [FE]                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(jsScope,  compiler);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(jsScope,  compiler);	  escaped    =    Sets.newHashSet(jsScope);    	non-compiled	[CE]  incompatible  types	6	None	replace
100	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(compiler,  jsScope);  [CE]  incompatible  types  [FE]                    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(compiler,  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(compiler,  jsScope);	  escaped    =    Sets.newHashSet(jsScope);    	non-compiled	[CE]  incompatible  types	6	None	replace
101	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(compiler);  [CE]  incompatible  types  [FE]                      IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(compiler);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(compiler);	  escaped    =    Sets.newHashSet(jsScope);    	non-compiled	[CE]  incompatible  types	6	None	replace
102	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(cfg,  jsScope);  [CE]  incompatible  types  [FE]                        IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(cfg,  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(cfg,  jsScope);	  escaped    =    Sets.newHashSet(jsScope);    	non-compiled	[CE]  incompatible  types	6	None	replace
103	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet(escaped);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet(escaped);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  Node>  liveSet  =  Sets.newHashSet(escaped);	  Set    <    Node>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  incompatible  types	20	None	replace
104	[BUG]  [BUGGY]  List  <  Node>  liveSet  =  Sets.newHashSet();  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<Node>  [FE]      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  List  <  Node>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	List  <  Node>  liveSet  =  Sets.newHashSet();	  Set    <    Node>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<Node>	20	None	replace
105	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getCapacity());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getCapacity());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getCapacity());	  Set    <    Node>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
106	[BUG]  [BUGGY]  ArrayList  <  Node>  liveSet  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  ArrayList  <  Node>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	ArrayList  <  Node>  liveSet  =  Sets.newHashSet();	  Set    <    Node>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
107	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet(1);  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet(1);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  Node>  liveSet  =  Sets.newHashSet(1);	  Set    <    Node>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  incompatible  types	20	None	replace
108	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet(escaped?  Sets.newHashSet()  :  Sets.newHashSet();  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet(escaped?  Sets.newHashSet()  :  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  Node>  liveSet  =  Sets.newHashSet(escaped?  Sets.newHashSet()  :  Sets.newHashSet();	  Set    <    Node>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  ')'  expected	20	None	replace
109	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getCapacity()  -  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getCapacity()  -  1);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getCapacity()  -  1);	  Set    <    Node>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
110	[BUG]  [BUGGY]  Collection  <  Node>  liveSet  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Collection  <  Node>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Collection  <  Node>  liveSet  =  Sets.newHashSet();	  Set    <    Node>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
111	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(liveSet);  [CE]  cannot  find  symbol  liveSet  [FE]            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(liveSet);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(liveSet);	  escaped    =    Sets.newHashSet(escaped);    	non-compiled	[CE]  cannot  find  symbol  liveSet	21	None	replace
112	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(false);  [CE]  incompatible  types  [FE]              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(false);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(false);	  escaped    =    Sets.newHashSet(escaped);    	non-compiled	[CE]  incompatible  types	21	None	replace
113	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(liveSet,  jsScope);  [CE]  cannot  find  symbol  liveSet  [FE]                IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(liveSet,  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(liveSet,  jsScope);	  escaped    =    Sets.newHashSet(escaped);    	non-compiled	[CE]  cannot  find  symbol  liveSet	21	None	replace
114	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(jsScope,  escaped);  [CE]  incompatible  types  [FE]                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(jsScope,  escaped);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(jsScope,  escaped);	  escaped    =    Sets.newHashSet(escaped);    	non-compiled	[CE]  incompatible  types	21	None	replace
115	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(buffered);  [CE]  cannot  find  symbol  buffered  [FE]                    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(buffered);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(buffered);	  escaped    =    Sets.newHashSet(escaped);    	non-compiled	[CE]  cannot  find  symbol  buffered	21	None	replace
116	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(hashSet);  [CE]  cannot  find  symbol  hashSet  [FE]                      IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(hashSet);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(hashSet);	  escaped    =    Sets.newHashSet(escaped);    	non-compiled	[CE]  cannot  find  symbol  hashSet	21	None	replace
117	[BUG]  [BUGGY]  escaped  =  computeEscaped(jsScope,  escaped,  compiler,  this.cfg);  [CE]  cfg  has  private  access  in  DataFlowAnalysis  [FE]                      IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  computeEscaped(jsScope,  escaped,  compiler,  this.cfg);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  computeEscaped(jsScope,  escaped,  compiler,  this.cfg);	  computeEscaped(jsScope,    escaped,    compiler,    this.cfg);    	non-compiled	[CE]  cfg  has  private  access  in  DataFlowAnalysis	9	None	replace
118	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  this.cfg,  compiler);  [CE]  cfg  has  private  access  in  DataFlowAnalysis  [FE]                        IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  this.cfg,  compiler);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  this.cfg,  compiler);	  computeEscaped(jsScope,    escaped,    compiler,    this.cfg);    	non-compiled	[CE]  cfg  has  private  access  in  DataFlowAnalysis	9	None	replace
119	[BUG]  [BUGGY]  escaped  =  compiler.createEscaped(jsScope,  escaped,  this.cfg);  [CE]  cfg  has  private  access  in  DataFlowAnalysis  [FE]                          IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  compiler.createEscaped(jsScope,  escaped,  this.cfg);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  compiler.createEscaped(jsScope,  escaped,  this.cfg);	  computeEscaped(jsScope,    escaped,    compiler,    this.cfg);    	non-compiled	[CE]  cfg  has  private  access  in  DataFlowAnalysis	9	None	replace
120	[BUG]  [BUGGY]  Compiler  compiler  =  jsScope.getCompiler();  [CE]  variable  compiler  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)  [FE]                            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Compiler  compiler  =  jsScope.getCompiler();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Compiler  compiler  =  jsScope.getCompiler();	  computeEscaped(jsScope,    escaped,    compiler,    this.cfg);    	non-compiled	[CE]  variable  compiler  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)	9	None	replace
121	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.cfg,  escaped);  [CE]  cfg  has  private  access  in  DataFlowAnalysis  [FE]                              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.cfg,  escaped);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.cfg,  escaped);	  computeEscaped(jsScope,    escaped,    compiler,    this.cfg);    	non-compiled	[CE]  cfg  has  private  access  in  DataFlowAnalysis	9	None	replace
122	[BUG]  [BUGGY]  computeEscaped(jsScope,  this.escaped,  compiler,  this.cfg);  [CE]  cfg  has  private  access  in  DataFlowAnalysis  [FE]                                IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  this.escaped,  compiler,  this.cfg);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  this.escaped,  compiler,  this.cfg);	  computeEscaped(jsScope,    escaped,    compiler,    this.cfg);    	non-compiled	[CE]  cfg  has  private  access  in  DataFlowAnalysis	9	None	replace
123	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.cfg,  this.liveSet);  [CE]  cfg  has  private  access  in  DataFlowAnalysis  [FE]                                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.cfg,  this.liveSet);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.cfg,  this.liveSet);	  computeEscaped(jsScope,    escaped,    compiler,    this.cfg);    	non-compiled	[CE]  cfg  has  private  access  in  DataFlowAnalysis	9	None	replace
124	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.cfg,  null);  [CE]  cfg  has  private  access  in  DataFlowAnalysis  [FE]                                    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.cfg,  null);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.cfg,  null);	  computeEscaped(jsScope,    escaped,    compiler,    this.cfg);    	non-compiled	[CE]  cfg  has  private  access  in  DataFlowAnalysis	9	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(escaped  >=  jsScope,  compiler);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  >=  jsScope,  compiler);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped  >=  jsScope,  compiler);	  Preconditions.checkState(escaped    ==    jsScope);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	15	None	replace
126	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  null);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	add	Preconditions.checkState(escaped  ==  null);	  Preconditions.checkState(escaped    ==    jsScope);    	compilable	  [FE]  IllegalStateException  	15	20	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  null);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  null);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped  ==  null);	  Preconditions.checkState(escaped    ==    jsScope);    	compilable	  [FE]  IllegalStateException  	15	20	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(escape  ==  jsScope);  [CE]  cannot  find  symbol  escape  [FE]        IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escape  ==  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escape  ==  jsScope);	  Preconditions.checkState(escaped    ==    jsScope);    	non-compiled	[CE]  cannot  find  symbol  escape	15	None	replace
129	[BUG]  [BUGGY]  ensureEscaped(compiler,  escaped,  jsScope);  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  ensureEscaped(compiler,  escaped,  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	ensureEscaped(compiler,  escaped,  jsScope);	  ensureEscaped(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
130	[BUG]  [BUGGY]  ensureEscaped(jsScope,  escaped,  compiler,  cfg);  [CE]  cannot  find  symbol  [FE]                IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  ensureEscaped(jsScope,  escaped,  compiler,  cfg);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	ensureEscaped(jsScope,  escaped,  compiler,  cfg);	  ensureEscaped(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
131	[BUG]  [BUGGY]  ensureEscaped(jsScope,  compiler,  escaped);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  ensureEscaped(jsScope,  compiler,  escaped);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	ensureEscaped(jsScope,  compiler,  escaped);	  ensureEscaped(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
132	[BUG]  [BUGGY]  ensureEscaped(jsScope,  escaped,  compiler,  this.cfg);  [CE]  cfg  has  private  access  in  DataFlowAnalysis  [FE]                    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  ensureEscaped(jsScope,  escaped,  compiler,  this.cfg);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	ensureEscaped(jsScope,  escaped,  compiler,  this.cfg);	  ensureEscaped(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cfg  has  private  access  in  DataFlowAnalysis	4	None	replace
133	[BUG]  [BUGGY]  ensureEscaped(jsScope,  escaped,  compiler,  context);  [CE]  cannot  find  symbol  context  [FE]                      IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  ensureEscaped(jsScope,  escaped,  compiler,  context);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	ensureEscaped(jsScope,  escaped,  compiler,  context);	  ensureEscaped(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol  context	4	None	replace
134	[BUG]  [BUGGY]  ensureEscaped(cfg,  jsScope,  escaped,  compiler);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  ensureEscaped(cfg,  jsScope,  escaped,  compiler);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	ensureEscaped(cfg,  jsScope,  escaped,  compiler);	  ensureEscaped(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
135	[BUG]  [BUGGY]  ensureEscaped(jsScope,  escaped,  compiler,  this.liveSet);  [CE]  cannot  find  symbol  liveSet  [FE]                          IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  ensureEscaped(jsScope,  escaped,  compiler,  this.liveSet);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	ensureEscaped(jsScope,  escaped,  compiler,  this.liveSet);	  ensureEscaped(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol  liveSet	4	None	replace
136	[BUG]  [BUGGY]  ensureEscaped(jsScope,  escaped,  compiler,  parser);  [CE]  cannot  find  symbol  parser  [FE]                            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  ensureEscaped(jsScope,  escaped,  compiler,  parser);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	ensureEscaped(jsScope,  escaped,  compiler,  parser);	  ensureEscaped(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol  parser	4	None	replace
137	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  flags);  [CE]  cannot  find  symbol  flags  [FE]            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  flags);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  flags);	  computeEscaped(jsScope,    escaped,    compiler,    baseUri);    	non-compiled	[CE]  cannot  find  symbol  flags	16	None	replace
138	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  false);  [CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;  [FE]              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  false);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  false);	  computeEscaped(jsScope,    escaped,    compiler,    baseUri);    	non-compiled	[CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;	16	None	replace
139	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  context);  [CE]  cannot  find  symbol  context  [FE]                IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  context);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  context);	  computeEscaped(jsScope,    escaped,    compiler,    baseUri);    	non-compiled	[CE]  cannot  find  symbol  context	16	None	replace
140	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  exception);  [CE]  cannot  find  symbol  exception  [FE]                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  exception);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  exception);	  computeEscaped(jsScope,    escaped,    compiler,    baseUri);    	non-compiled	[CE]  cannot  find  symbol  exception	16	None	replace
141	[BUG]  [BUGGY]  append(jsScope,  escaped,  compiler,  cfg);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  append(jsScope,  escaped,  compiler,  cfg);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	append(jsScope,  escaped,  compiler,  cfg);	  append(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
142	[BUG]  [BUGGY]  append(compiler,  escaped,  jsScope);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  append(compiler,  escaped,  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	append(compiler,  escaped,  jsScope);	  append(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
143	[BUG]  [BUGGY]  append(jsScope,  compiler,  escaped);  [CE]  cannot  find  symbol  [FE]                            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  append(jsScope,  compiler,  escaped);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	append(jsScope,  compiler,  escaped);	  append(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
144	[BUG]  [BUGGY]  append(jsScope,  escaped,  compiler,  this.escaped);  [CE]  cannot  find  symbol  [FE]                              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  append(jsScope,  escaped,  compiler,  this.escaped);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	append(jsScope,  escaped,  compiler,  this.escaped);	  append(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
145	[BUG]  [BUGGY]  append(jsScope,  escaped,  compiler,  this.cfg);  [CE]  cfg  has  private  access  in  DataFlowAnalysis  [FE]                                IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  append(jsScope,  escaped,  compiler,  this.cfg);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	append(jsScope,  escaped,  compiler,  this.cfg);	  append(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cfg  has  private  access  in  DataFlowAnalysis	10	None	replace
146	[BUG]  [BUGGY]  append(jsScope,  escaped,  compiler,  context);  [CE]  cannot  find  symbol  context  [FE]                                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  append(jsScope,  escaped,  compiler,  context);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	append(jsScope,  escaped,  compiler,  context);	  append(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol  context	10	None	replace
147	[BUG]  [BUGGY]  append(jsScope,  escaped,  compiler,  this.liveSet);  [CE]  cannot  find  symbol  liveSet  [FE]                                    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  append(jsScope,  escaped,  compiler,  this.liveSet);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	append(jsScope,  escaped,  compiler,  this.liveSet);	  append(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol  liveSet	10	None	replace
148	[BUG]  [BUGGY]  append(jsScope,  escaped,  compiler,  escaped);  [CE]  cannot  find  symbol  [FE]                                      IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  append(jsScope,  escaped,  compiler,  escaped);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	append(jsScope,  escaped,  compiler,  escaped);	  append(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
149	[BUG]  [BUGGY]  append(jsScope,  escaped,  compiler,  scope);  [CE]  cannot  find  symbol  scope  [FE]                                        IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  append(jsScope,  escaped,  compiler,  scope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	append(jsScope,  escaped,  compiler,  scope);	  append(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol  scope	10	None	replace
150	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(LiveVariableLattice.class);  [CE]  incompatible  types  [FE]            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(LiveVariableLattice.class);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(LiveVariableLattice.class);	  escaped    =    Sets.newHashSet(escaped);    	non-compiled	[CE]  incompatible  types	21	None	replace
151	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(LiveVariableLattice.EMPTY);  [CE]  cannot  find  symbol  EMPTY  [FE]              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(LiveVariableLattice.EMPTY);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(LiveVariableLattice.EMPTY);	  escaped    =    Sets.newHashSet(escaped);    	non-compiled	[CE]  cannot  find  symbol  EMPTY	21	None	replace
152	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(LiveVariableLattice.BIG_SET);  [CE]  cannot  find  symbol  BIG_SET  [FE]                IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(LiveVariableLattice.BIG_SET);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(LiveVariableLattice.BIG_SET);	  escaped    =    Sets.newHashSet(escaped);    	non-compiled	[CE]  cannot  find  symbol  BIG_SET	21	None	replace
153	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(LiveVariableLattice.UNKNOWN);  [CE]  cannot  find  symbol  UNKNOWN  [FE]                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(LiveVariableLattice.UNKNOWN);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(LiveVariableLattice.UNKNOWN);	  escaped    =    Sets.newHashSet(escaped);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN	21	None	replace
154	[BUG]  [BUGGY]      this.liveSet  =  Sets.newHashSet();  [CE]  cannot  find  symbol  liveSet  [FE]    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]      this.liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	        this.liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol  liveSet	11	None	add
155	[BUG]  [BUGGY]      System.arraycopy(jsScope,  0,  liveSet,  0,  compiler.liveSet.size());  [CE]  cannot  find  symbol  liveSet  [FE]      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]      System.arraycopy(jsScope,  0,  liveSet,  0,  compiler.liveSet.size());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	        System.arraycopy(jsScope,  0,  liveSet,  0,  compiler.liveSet.size());	  	non-compiled	[CE]  cannot  find  symbol  liveSet	11	None	add
156	[BUG]  [BUGGY]      System.arraycopy(jsScope,  0,  liveSet,  escaped,  compiler);  [CE]  cannot  find  symbol  liveSet  [FE]        AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]      System.arraycopy(jsScope,  0,  liveSet,  escaped,  compiler);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	        System.arraycopy(jsScope,  0,  liveSet,  escaped,  compiler);	  	non-compiled	[CE]  cannot  find  symbol  liveSet	11	None	add
157	[BUG]  [BUGGY]      ControlFlowGraph  <  Node>  liveSet  =  escaped.getControlFlowGraph();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]      ControlFlowGraph  <  Node>  liveSet  =  escaped.getControlFlowGraph();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	        ControlFlowGraph  <  Node>  liveSet  =  escaped.getControlFlowGraph();	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
158	[BUG]  [BUGGY]      System.arraycopy(jsScope,  0,  liveSet,  0,  escaped.length);  [CE]  cannot  find  symbol  liveSet  [FE]            AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]      System.arraycopy(jsScope,  0,  liveSet,  0,  escaped.length);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	        System.arraycopy(jsScope,  0,  liveSet,  0,  escaped.length);	  	non-compiled	[CE]  cannot  find  symbol  liveSet	11	None	add
159	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  ControlFlowGraph  <  Node>  liveSet  =  Sets.newHashSet();  [CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)  [FE]    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  ControlFlowGraph  <  Node>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    Node>    liveSet    =    Sets.newHashSet();    ControlFlowGraph  <  Node>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)	19	None	add
160	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  Node  <  Node>  liveSet  =  Sets.newHashSet();  [CE]  type  Node  does  not  take  parameters  [FE]      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  Node  <  Node>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    Node>    liveSet    =    Sets.newHashSet();    Node  <  Node>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  type  Node  does  not  take  parameters	19	None	add
161	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  escaped  =  Sets.newHashSet();  [CE]  variable  escaped  might  already  have  been  assigned  [FE]        AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet();  escaped  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    Node>    liveSet    =    Sets.newHashSet();    escaped  =  Sets.newHashSet();	  	non-compiled	[CE]  variable  escaped  might  already  have  been  assigned	19	None	add
162	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  cfg,  compiler);  [CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;  [FE]          IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  cfg,  compiler);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  cfg,  compiler);	  computeEscaped(jsScope,    escaped,    compiler,    cfg);    	non-compiled	[CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;	2	None	replace
163	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  liveSet);  [CE]  cannot  find  symbol  liveSet  [FE]            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  liveSet);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  cfg,  liveSet);	  computeEscaped(jsScope,    escaped,    compiler,    cfg);    	non-compiled	[CE]  cannot  find  symbol  liveSet	2	None	replace
164	[BUG]  [BUGGY]  computeEscaped(jsScope,  cfg,  compiler,  escaped);  [CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;  [FE]              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  cfg,  compiler,  escaped);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  cfg,  compiler,  escaped);	  computeEscaped(jsScope,    escaped,    compiler,    cfg);    	non-compiled	[CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;	2	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getControlFlowGraph();  Preconditions.checkState(escaped!=  jsScope);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getControlFlowGraph();  Preconditions.checkState(escaped!=  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=    jsScope);    ControlFlowGraph  <  Node>  escaped  =  jsScope.getControlFlowGraph();  Preconditions.checkState(escaped!=  jsScope);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
166	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.createControlFlowGraph();  Preconditions.checkState(escaped!=  jsScope);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.createControlFlowGraph();  Preconditions.checkState(escaped!=  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=    jsScope);    ControlFlowGraph  <  Node>  escaped  =  jsScope.createControlFlowGraph();  Preconditions.checkState(escaped!=  jsScope);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
167	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getParent();  Preconditions.checkState(escaped!=  jsScope);  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getParent();  Preconditions.checkState(escaped!=  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=    jsScope);    ControlFlowGraph  <  Node>  escaped  =  jsScope.getParent();  Preconditions.checkState(escaped!=  jsScope);	  	non-compiled	[CE]  incompatible  types	7	None	add
168	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getAnalysis();  Preconditions.checkState(escaped!=  jsScope);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getAnalysis();  Preconditions.checkState(escaped!=  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=    jsScope);    ControlFlowGraph  <  Node>  escaped  =  jsScope.getAnalysis();  Preconditions.checkState(escaped!=  jsScope);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
169	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getAnchor();  Preconditions.checkState(escaped!=  jsScope);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getAnchor();  Preconditions.checkState(escaped!=  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=    jsScope);    ControlFlowGraph  <  Node>  escaped  =  jsScope.getAnchor();  Preconditions.checkState(escaped!=  jsScope);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  null);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	add	Preconditions.checkState(escaped!=  null);	  Preconditions.checkState(escaped    ==    jsScope);    	compilable	  [FE]  AssertionFailedError  	15	3	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  null);  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  null);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=  null);	  Preconditions.checkState(escaped    ==    jsScope);    	compilable	  [FE]  AssertionFailedError  	15	3	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(escape!=  jsScope);  [CE]  cannot  find  symbol  escape  [FE]    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escape!=  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escape!=  jsScope);	  Preconditions.checkState(escaped!=    jsScope);    	non-compiled	[CE]  cannot  find  symbol  escape	8	None	replace
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  this.jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	add	Preconditions.checkState(escaped!=  this.jsScope);	  Preconditions.checkState(escaped!=    jsScope);    	compilable	  [FE]  AssertionFailedError  	8	3	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  this.jsScope);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  this.jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=  this.jsScope);	  Preconditions.checkState(escaped!=    jsScope);    	compilable	  [FE]  AssertionFailedError  	8	3	replace
175	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  endpoint);  [CE]  cannot  find  symbol  endpoint  [FE]            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  endpoint);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  endpoint);	  computeEscaped(jsScope,    escaped,    compiler,    baseUri);    	non-compiled	[CE]  cannot  find  symbol  endpoint	16	None	replace
176	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  0,  liveSet,  escaped));  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  0,  liveSet,  escaped));  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  0,  liveSet,  escaped));	  Set    <    String>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	18	None	replace
177	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  0,  liveSet));  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  0,  liveSet));  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  0,  liveSet));	  Set    <    String>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	18	None	replace
178	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(Arrays.asList(escaped));  [CE]  cannot  find  symbol  Arrays  [FE]        AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(Arrays.asList(escaped));  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(Arrays.asList(escaped));	  Set    <    String>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  Arrays	18	None	replace
179	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  0,  liveSet,  0));  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  0,  liveSet,  0));  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  0,  liveSet,  0));	  Set    <    String>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	18	None	replace
180	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(System.identityHashCode(jsScope));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(System.identityHashCode(jsScope));  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(System.identityHashCode(jsScope));	  Set    <    String>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
181	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  escaped));  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  escaped));  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  escaped));	  Set    <    String>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	18	None	replace
182	[BUG]  [BUGGY]  escaped  =  Sets.newHashSetWithCapacity(jsScope.liveSet);  [CE]  cannot  find  symbol  liveSet  [FE]        IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSetWithCapacity(jsScope.liveSet);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSetWithCapacity(jsScope.liveSet);	  escaped    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  liveSet	1	None	replace
183	[BUG]  [BUGGY]  escaped  =  Sets.newHashSetWithCapacity(jsScope);  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSetWithCapacity(jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSetWithCapacity(jsScope);	  escaped    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
184	[BUG]  [BUGGY]  escaped  =  Sets.newHashSetWithCapacity(jsScope.liveSet());  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSetWithCapacity(jsScope.liveSet());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSetWithCapacity(jsScope.liveSet());	  escaped    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
185	[BUG]  [BUGGY]  escaped  =  Sets.newHashSetWithCapacity(jsScope.getPosition());  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSetWithCapacity(jsScope.getPosition());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSetWithCapacity(jsScope.getPosition());	  escaped    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getControlFlowGraph();  Preconditions.checkState(escaped  ==  jsScope);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getControlFlowGraph();  Preconditions.checkState(escaped  ==  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped    ==    jsScope);    ControlFlowGraph  <  Node>  escaped  =  jsScope.getControlFlowGraph();  Preconditions.checkState(escaped  ==  jsScope);	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
187	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  ControlFlowGraph  <  Node>  escaped  =  cfg.getControlFlowGraph();  Preconditions.checkState(escaped  ==  jsScope);  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  ControlFlowGraph  <  Node>  escaped  =  cfg.getControlFlowGraph();  Preconditions.checkState(escaped  ==  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped    ==    jsScope);    ControlFlowGraph  <  Node>  escaped  =  cfg.getControlFlowGraph();  Preconditions.checkState(escaped  ==  jsScope);	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
188	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.createControlFlowGraph();  Preconditions.checkState(escaped  ==  jsScope);  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.createControlFlowGraph();  Preconditions.checkState(escaped  ==  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped    ==    jsScope);    ControlFlowGraph  <  Node>  escaped  =  jsScope.createControlFlowGraph();  Preconditions.checkState(escaped  ==  jsScope);	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
189	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getParent();  Preconditions.checkState(escaped  ==  jsScope);  [CE]  incompatible  types  [FE]          IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getParent();  Preconditions.checkState(escaped  ==  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped    ==    jsScope);    ControlFlowGraph  <  Node>  escaped  =  jsScope.getParent();  Preconditions.checkState(escaped  ==  jsScope);	  	non-compiled	[CE]  incompatible  types	14	None	add
190	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getAnalysis();  Preconditions.checkState(escaped  ==  jsScope);  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getAnalysis();  Preconditions.checkState(escaped  ==  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped    ==    jsScope);    ControlFlowGraph  <  Node>  escaped  =  jsScope.getAnalysis();  Preconditions.checkState(escaped  ==  jsScope);	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
191	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getAnchor();  Preconditions.checkState(escaped  ==  jsScope);  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getAnchor();  Preconditions.checkState(escaped  ==  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped    ==    jsScope);    ControlFlowGraph  <  Node>  escaped  =  jsScope.getAnchor();  Preconditions.checkState(escaped  ==  jsScope);	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
192	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getCfg();  Preconditions.checkState(escaped  ==  jsScope);  [CE]  cannot  find  symbol  [FE]                IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getCfg();  Preconditions.checkState(escaped  ==  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped    ==    jsScope);    ControlFlowGraph  <  Node>  escaped  =  jsScope.getCfg();  Preconditions.checkState(escaped  ==  jsScope);	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
193	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getAnalysisContext();  Preconditions.checkState(escaped  ==  jsScope);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  ControlFlowGraph  <  Node>  escaped  =  jsScope.getAnalysisContext();  Preconditions.checkState(escaped  ==  jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped    ==    jsScope);    ControlFlowGraph  <  Node>  escaped  =  jsScope.getAnalysisContext();  Preconditions.checkState(escaped  ==  jsScope);	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
194	[BUG]  [BUGGY]  ensureEscaped(jsScope,  escaped,  compiler,  scope);  [CE]  cannot  find  symbol  scope  [FE]              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  ensureEscaped(jsScope,  escaped,  compiler,  scope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	ensureEscaped(jsScope,  escaped,  compiler,  scope);	  ensureEscaped(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol  scope	4	None	replace
195	[BUG]  [BUGGY]  ensureEscaped(hash,  jsScope,  compiler);  [CE]  cannot  find  symbol  hash  [FE]                IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  ensureEscaped(hash,  jsScope,  compiler);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	ensureEscaped(hash,  jsScope,  compiler);	  ensureEscaped(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol  hash	4	None	replace
196	[BUG]  [BUGGY]  ensureEscaped(jsScope,  escaped,  compiler,  baseUri);  [CE]  cannot  find  symbol  baseUri  [FE]                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  ensureEscaped(jsScope,  escaped,  compiler,  baseUri);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	ensureEscaped(jsScope,  escaped,  compiler,  baseUri);	  ensureEscaped(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol  baseUri	4	None	replace
197	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.live);  [CE]  cannot  find  symbol  live  [FE]                IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.live);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.live);	  computeEscaped(jsScope,    escaped,    compiler,    this.liveSet);    	non-compiled	[CE]  cannot  find  symbol  live	5	None	replace
198	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  this.liveSet,  compiler);  [CE]  cannot  find  symbol  liveSet  [FE]                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  this.liveSet,  compiler);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  this.liveSet,  compiler);	  computeEscaped(jsScope,    escaped,    compiler,    this.liveSet);    	non-compiled	[CE]  cannot  find  symbol  liveSet	5	None	replace
199	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.liveSet,  null);  [CE]  cannot  find  symbol  liveSet  [FE]                    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.liveSet,  null);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.liveSet,  null);	  computeEscaped(jsScope,    escaped,    compiler,    this.liveSet);    	non-compiled	[CE]  cannot  find  symbol  liveSet	5	None	replace
200	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.liveSet,  cfg);  [CE]  cannot  find  symbol  liveSet  [FE]                      IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.liveSet,  cfg);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.liveSet,  cfg);	  computeEscaped(jsScope,    escaped,    compiler,    this.liveSet);    	non-compiled	[CE]  cannot  find  symbol  liveSet	5	None	replace
201	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.devMode);  [CE]  cannot  find  symbol  devMode  [FE]                        IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.devMode);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.devMode);	  computeEscaped(jsScope,    escaped,    compiler,    this.liveSet);    	non-compiled	[CE]  cannot  find  symbol  devMode	5	None	replace
202	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(jsScope,  liveSet);  [CE]  cannot  find  symbol  liveSet  [FE]                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(jsScope,  liveSet);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(jsScope,  liveSet);	  escaped    =    Sets.newHashSet(jsScope);    	non-compiled	[CE]  cannot  find  symbol  liveSet	6	None	replace
203	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(jsScope,  this.liveSet);  [CE]  cannot  find  symbol  liveSet  [FE]                    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(jsScope,  this.liveSet);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(jsScope,  this.liveSet);	  escaped    =    Sets.newHashSet(jsScope);    	non-compiled	[CE]  cannot  find  symbol  liveSet	6	None	replace
204	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  0,  liveSet,  escaped));  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  0,  liveSet,  escaped));  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  0,  liveSet,  escaped));	  Set    <    Node>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	20	None	replace
205	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  0,  liveSet,  0));  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  0,  liveSet,  0));  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  0,  liveSet,  0));	  Set    <    Node>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	20	None	replace
206	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  0,  liveSet));  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  0,  liveSet));  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(System.arraycopy(jsScope,  0,  liveSet));	  Set    <    Node>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	20	None	replace
207	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(System.identityHashCode(jsScope));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(System.identityHashCode(jsScope));  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(System.identityHashCode(jsScope));	  Set    <    Node>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
208	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(jsScope);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(jsScope);	  Set    <    Node>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
209	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(Arrays.asList(escaped));  [CE]  cannot  find  symbol  Arrays  [FE]              AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(Arrays.asList(escaped));  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(Arrays.asList(escaped));	  Set    <    Node>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  Arrays	20	None	replace
210	[BUG]  [BUGGY]  escaped.add(JsScope.createEmptySet(jsScope,  compiler));  [CE]  cannot  find  symbol  JsScope  [FE]            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped.add(JsScope.createEmptySet(jsScope,  compiler));  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped.add(JsScope.createEmptySet(jsScope,  compiler));	  escaped.add(jsScope);    	non-compiled	[CE]  cannot  find  symbol  JsScope	3	None	replace
211	[BUG]  [BUGGY]  escaped.add(JsScope.createEmptySet(jsScope));  [CE]  cannot  find  symbol  JsScope  [FE]              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped.add(JsScope.createEmptySet(jsScope));  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped.add(JsScope.createEmptySet(jsScope));	  escaped.add(jsScope);    	non-compiled	[CE]  cannot  find  symbol  JsScope	3	None	replace
212	[BUG]  [BUGGY]  escaped.add(jsScope,  this.liveSet);  [CE]  cannot  find  symbol  liveSet  [FE]                IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped.add(jsScope,  this.liveSet);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped.add(jsScope,  this.liveSet);	  escaped.add(jsScope);    	non-compiled	[CE]  cannot  find  symbol  liveSet	3	None	replace
213	[BUG]  [BUGGY]  escaped.add(JsScope.createEmptySet(jsScope),  compiler);  [CE]  cannot  find  symbol  JsScope  [FE]                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped.add(JsScope.createEmptySet(jsScope),  compiler);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped.add(JsScope.createEmptySet(jsScope),  compiler);	  escaped.add(jsScope);    	non-compiled	[CE]  cannot  find  symbol  JsScope	3	None	replace
214	[BUG]  [BUGGY]  append(jsScope,  escaped,  compiler,  null);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  append(jsScope,  escaped,  compiler,  null);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	append(jsScope,  escaped,  compiler,  null);	  append(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
215	[BUG]  [BUGGY]  append(jsScope,  escaped,  compiler,  baseUri);  [CE]  cannot  find  symbol  baseUri  [FE]                          IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  append(jsScope,  escaped,  compiler,  baseUri);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	append(jsScope,  escaped,  compiler,  baseUri);	  append(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol  baseUri	10	None	replace
216	[BUG]  [BUGGY]  append(jsScope,  escaped,  compiler,  parser);  [CE]  cannot  find  symbol  parser  [FE]                            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  append(jsScope,  escaped,  compiler,  parser);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	append(jsScope,  escaped,  compiler,  parser);	  append(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol  parser	10	None	replace
217	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  ControlFlowGraph  <  String>  liveSet  =  Sets.newHashSet();  [CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)  [FE]    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  ControlFlowGraph  <  String>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    String>    liveSet    =    Sets.newHashSet();    ControlFlowGraph  <  String>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)	17	None	add
218	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  BitSet  <  String>  liveSet  =  Sets.newHashSet();  [CE]  type  BitSet  does  not  take  parameters  [FE]      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  BitSet  <  String>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    String>    liveSet    =    Sets.newHashSet();    BitSet  <  String>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  type  BitSet  does  not  take  parameters	17	None	add
219	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  SimpleBitSet  <  String>  liveSet  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  SimpleBitSet  <  String>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    String>    liveSet    =    Sets.newHashSet();    SimpleBitSet  <  String>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
220	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  SimpleSet  <  String>  liveSet  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  SimpleSet  <  String>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    String>    liveSet    =    Sets.newHashSet();    SimpleSet  <  String>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
221	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  Iterator  <  String>  liveSet  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  Iterator  <  String>  liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    String>    liveSet    =    Sets.newHashSet();    Iterator  <  String>  liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
222	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  List  <  String>  liveSet  =  Sets.newHashList();  [CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)  [FE]              AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet();  List  <  String>  liveSet  =  Sets.newHashList();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set    <    String>    liveSet    =    Sets.newHashSet();    List  <  String>  liveSet  =  Sets.newHashList();	  	non-compiled	[CE]  variable  liveSet  is  already  defined  in  constructor  LiveVariablesAnalysis(ControlFlowGraph<Node>,Scope,AbstractCompiler)	17	None	add
223	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.cfg,  cfg);  [CE]  cfg  has  private  access  in  DataFlowAnalysis  [FE]                      IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.cfg,  cfg);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.cfg,  cfg);	  computeEscaped(jsScope,    escaped,    compiler,    this.cfg);    	non-compiled	[CE]  cfg  has  private  access  in  DataFlowAnalysis	9	None	replace
224	[BUG]  [BUGGY]  validate(jsScope,  escaped,  compiler,  this.cfg);  [CE]  cfg  has  private  access  in  DataFlowAnalysis  [FE]                        IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  validate(jsScope,  escaped,  compiler,  this.cfg);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	validate(jsScope,  escaped,  compiler,  this.cfg);	  computeEscaped(jsScope,    escaped,    compiler,    this.cfg);    	non-compiled	[CE]  cfg  has  private  access  in  DataFlowAnalysis	9	None	replace
225	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  endpoints);  [CE]  cannot  find  symbol  endpoints  [FE]        IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  endpoints);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  endpoints);	  computeEscaped(jsScope,    escaped,    compiler,    liveSet);    	non-compiled	[CE]  cannot  find  symbol  endpoints	13	None	replace
226	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(jsScope,  cfg);  [CE]  incompatible  types  [FE]                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(jsScope,  cfg);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(jsScope,  cfg);	  escaped    =    Sets.newHashSet(jsScope);    	non-compiled	[CE]  incompatible  types	6	None	replace
227	[BUG]  [BUGGY]  escaped  =  Sets.newHashSet(jsScope.evaluate(cfg));  [CE]  cannot  find  symbol  [FE]                    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  Sets.newHashSet(jsScope.evaluate(cfg));  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  Sets.newHashSet(jsScope.evaluate(cfg));	  escaped    =    Sets.newHashSet(jsScope);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
228	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet(escape);  [CE]  cannot  find  symbol  escape  [FE]    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSet(escape);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  String>  liveSet  =  Sets.newHashSet(escape);	  Set    <    String>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  escape	18	None	replace
229	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getPosition());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getPosition());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getPosition());	  Set    <    String>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
230	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(jsScope);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(jsScope);	  Set    <    String>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
231	[BUG]  [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getVarCount());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getVarCount());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  String>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getVarCount());	  Set    <    String>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
232	[BUG]  [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  this.liveSet  =  Sets.newHashSet();  [CE]  cannot  find  symbol  liveSet  [FE]    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped  ==  jsScope);  Preconditions.checkState(escaped  ==  jsScope);  this.liveSet  =  Sets.newHashSet();  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped    ==    jsScope);    Preconditions.checkState(escaped  ==  jsScope);  this.liveSet  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol  liveSet	14	None	add
233	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  escaped);  [CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;  [FE]          IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  cfg,  escaped);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  cfg,  escaped);	  computeEscaped(jsScope,    escaped,    compiler,    cfg);    	non-compiled	[CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;	2	None	replace
234	[BUG]  [BUGGY]  escaped  =  computeEscaped(jsScope,  escaped,  compiler,  cfg);  [CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;  [FE]            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  computeEscaped(jsScope,  escaped,  compiler,  cfg);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  computeEscaped(jsScope,  escaped,  compiler,  cfg);	  computeEscaped(jsScope,    escaped,    compiler,    cfg);    	non-compiled	[CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;	2	None	replace
235	[BUG]  [BUGGY]  escaped  =  computeEscaped(jsScope,  escaped,  compiler,  cfg,  escaped);  [CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;  [FE]              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  computeEscaped(jsScope,  escaped,  compiler,  cfg,  escaped);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  computeEscaped(jsScope,  escaped,  compiler,  cfg,  escaped);	  computeEscaped(jsScope,    escaped,    compiler,    cfg);    	non-compiled	[CE]  method  computeEscaped  in  class  DataFlowAnalysis<N,L>  cannot  be  applied  to  given  types;	2	None	replace
236	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet(escape);  [CE]  cannot  find  symbol  escape  [FE]    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSet(escape);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  Node>  liveSet  =  Sets.newHashSet(escape);	  Set    <    Node>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  escape	20	None	replace
237	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getPosition());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getPosition());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getPosition());	  Set    <    Node>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
238	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getVarCount());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getVarCount());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getVarCount());	  Set    <    Node>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
239	[BUG]  [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getParent());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getParent());  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Set  <  Node>  liveSet  =  Sets.newHashSetWithCapacity(jsScope.getParent());	  Set    <    Node>    liveSet    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
240	[BUG]  [BUGGY]  append(jsScope,  escaped,  this.escaped);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  append(jsScope,  escaped,  this.escaped);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	append(jsScope,  escaped,  this.escaped);	  append(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
241	[BUG]  [BUGGY]  append(jsScope,  escaped,  compiler,  this.lattice);  [CE]  cannot  find  symbol  lattice  [FE]                          IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  append(jsScope,  escaped,  compiler,  this.lattice);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	append(jsScope,  escaped,  compiler,  this.lattice);	  append(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol  lattice	10	None	replace
242	[BUG]  [BUGGY]  append(jsScope,  escaped,  compiler,  this.devMode);  [CE]  cannot  find  symbol  devMode  [FE]                            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  append(jsScope,  escaped,  compiler,  this.devMode);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	append(jsScope,  escaped,  compiler,  this.devMode);	  append(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol  devMode	10	None	replace
243	[BUG]  [BUGGY]  ensureEscaped(jsScope,  escaped,  this.escaped);  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  ensureEscaped(jsScope,  escaped,  this.escaped);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	ensureEscaped(jsScope,  escaped,  this.escaped);	  ensureEscaped(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
244	[BUG]  [BUGGY]  ensureEscaped(jsScope,  escaped,  compiler,  null);  [CE]  cannot  find  symbol  [FE]                IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  ensureEscaped(jsScope,  escaped,  compiler,  null);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	ensureEscaped(jsScope,  escaped,  compiler,  null);	  ensureEscaped(jsScope,    escaped,    compiler);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
245	[BUG]  [BUGGY]  Preconditions.checkState(escaped!=  jsScope,  this.liveSet);  [CE]  cannot  find  symbol  liveSet  [FE]    AssertionFailedError    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  Preconditions.checkState(escaped!=  jsScope,  this.liveSet);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	Preconditions.checkState(escaped!=  jsScope,  this.liveSet);	  Preconditions.checkState(escaped!=    jsScope);    	non-compiled	[CE]  cannot  find  symbol  liveSet	8	None	replace
246	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.liveSet,  escaped);  [CE]  cannot  find  symbol  liveSet  [FE]                IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.liveSet,  escaped);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.liveSet,  escaped);	  computeEscaped(jsScope,    escaped,    compiler,    this.liveSet);    	non-compiled	[CE]  cannot  find  symbol  liveSet	5	None	replace
247	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.liveSet,  false);  [CE]  cannot  find  symbol  liveSet  [FE]                  IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.liveSet,  false);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.liveSet,  false);	  computeEscaped(jsScope,    escaped,    compiler,    this.liveSet);    	non-compiled	[CE]  cannot  find  symbol  liveSet	5	None	replace
248	[BUG]  [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.liveSet,  true);  [CE]  cannot  find  symbol  liveSet  [FE]                    IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  computeEscaped(jsScope,  escaped,  compiler,  this.liveSet,  true);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	computeEscaped(jsScope,  escaped,  compiler,  this.liveSet,  true);	  computeEscaped(jsScope,    escaped,    compiler,    this.liveSet);    	non-compiled	[CE]  cannot  find  symbol  liveSet	5	None	replace
249	[BUG]  [BUGGY]  escaped.add(jsScope,  cfg);  [CE]  no  suitable  method  found  for  add(Scope,ControlFlowGraph<Node>)  [FE]            IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped.add(jsScope,  cfg);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped.add(jsScope,  cfg);	  escaped.add(jsScope);    	non-compiled	[CE]  no  suitable  method  found  for  add(Scope,ControlFlowGraph<Node>)	3	None	replace
250	[BUG]  [BUGGY]  escaped.add(jsScope,  this.jsScope);  [CE]  no  suitable  method  found  for  add(Scope,Scope)  [FE]              IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped.add(jsScope,  this.jsScope);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped.add(jsScope,  this.jsScope);	  escaped.add(jsScope);    	non-compiled	[CE]  no  suitable  method  found  for  add(Scope,Scope)	3	None	replace
251	[BUG]  [BUGGY]  escaped  =  computeEscaped(jsScope,  this.cfg,  compiler);  [CE]  cfg  has  private  access  in  DataFlowAnalysis  [FE]                      IllegalStateException    [CONTEXT]    LiveVariablesAnalysis(ControlFlowGraph<Node>  cfg,  Scope  jsScope,  AbstractCompiler  compiler)  {  super(cfg,  new  LiveVariableJoinOp());  this.jsScope  =  jsScope;  this.escaped  =  Sets.newHashSet();    [BUGGY]  escaped  =  computeEscaped(jsScope,  this.cfg,  compiler);  [BUGGY]    }  [CLASS]  LiveVariablesAnalysis  LiveVariableJoinOp  LiveVariableLattice  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  Node>  cfg  Scope  jsScope  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  BitSet  liveSet  String  ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	escaped  =  computeEscaped(jsScope,  this.cfg,  compiler);	  computeEscaped(jsScope,    escaped,    compiler,    this.cfg);    	non-compiled	[CE]  cfg  has  private  access  in  DataFlowAnalysis	9	None	replace
