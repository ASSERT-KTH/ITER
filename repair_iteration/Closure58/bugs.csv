bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if (!NodeUtil.isForIn(n)) { [FE] IllegalStateException [CONTEXT] return; case Token.WHILE: case Token.DO: case Token.IF: computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional); return; case Token.FOR: [BUGGY] if (!NodeUtil.isForIn(n)) { [BUGGY] computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional); } else {  Node lhs = n.getFirstChild(); Node rhs = lhs.getNext(); if (NodeUtil.isVar(lhs)) {  lhs = lhs.getLastChild(); } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] computeGenKill [RETURN_TYPE] void  Node n BitSet gen BitSet kill boolean conditional [VARIABLES] BitSet gen kill liveSet Set escaped String ARGUMENT_ARRAY_ALIAS var boolean conditional Scope jsScope Node c lhs n rhs  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.7071067811865475	195	195	1	replace	
2	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] return; case Token.WHILE: case Token.DO: case Token.IF: computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional); return; case Token.FOR: [BUGGY] [BUGGY] if (!NodeUtil.isForIn(n)) { computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional); } else {  Node lhs = n.getFirstChild(); Node rhs = lhs.getNext(); if (NodeUtil.isVar(lhs)) {  lhs = lhs.getLastChild(); } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] computeGenKill [RETURN_TYPE] void  Node n BitSet gen BitSet kill boolean conditional [VARIABLES] BitSet gen kill liveSet Set escaped String ARGUMENT_ARRAY_ALIAS var boolean conditional Scope jsScope Node c lhs n rhs  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.7071067811865475	195	195	1	add	
3	[BUG] [BUGGY] Node lhs = n.getFirstChild(); [FE] IllegalStateException [CONTEXT] if (!NodeUtil.isForIn(n)) { computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional); } else {  [BUGGY] Node lhs = n.getFirstChild(); [BUGGY] Node rhs = lhs.getNext(); if (NodeUtil.isVar(lhs)) {  lhs = lhs.getLastChild(); } addToSetIfLocal(lhs, kill); addToSetIfLocal(lhs, gen); computeGenKill(rhs, gen, kill, conditional); } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] computeGenKill [RETURN_TYPE] void  Node n BitSet gen BitSet kill boolean conditional [VARIABLES] BitSet gen kill liveSet Set escaped String ARGUMENT_ARRAY_ALIAS var boolean conditional Scope jsScope Node c lhs n rhs  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.7071067811865475	200	200	1	replace	
4	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] if (!NodeUtil.isForIn(n)) { computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional); } else {  [BUGGY] [BUGGY] Node lhs = n.getFirstChild(); Node rhs = lhs.getNext(); if (NodeUtil.isVar(lhs)) {  lhs = lhs.getLastChild(); } addToSetIfLocal(lhs, kill); addToSetIfLocal(lhs, gen); computeGenKill(rhs, gen, kill, conditional); } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] computeGenKill [RETURN_TYPE] void  Node n BitSet gen BitSet kill boolean conditional [VARIABLES] BitSet gen kill liveSet Set escaped String ARGUMENT_ARRAY_ALIAS var boolean conditional Scope jsScope Node c lhs n rhs  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.7071067811865475	200	200	1	add	
5	[BUG] [BUGGY] Node rhs = lhs.getNext(); [FE] IllegalStateException [CONTEXT] if (!NodeUtil.isForIn(n)) { computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional); } else {  Node lhs = n.getFirstChild(); [BUGGY] Node rhs = lhs.getNext(); [BUGGY] if (NodeUtil.isVar(lhs)) {  lhs = lhs.getLastChild(); } addToSetIfLocal(lhs, kill); addToSetIfLocal(lhs, gen); computeGenKill(rhs, gen, kill, conditional); } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] computeGenKill [RETURN_TYPE] void  Node n BitSet gen BitSet kill boolean conditional [VARIABLES] BitSet gen kill liveSet Set escaped String ARGUMENT_ARRAY_ALIAS var boolean conditional Scope jsScope Node c lhs n rhs  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.7071067811865475	201	201	1	replace	
6	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] if (!NodeUtil.isForIn(n)) { computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional); } else {  Node lhs = n.getFirstChild(); [BUGGY] [BUGGY] Node rhs = lhs.getNext(); if (NodeUtil.isVar(lhs)) {  lhs = lhs.getLastChild(); } addToSetIfLocal(lhs, kill); addToSetIfLocal(lhs, gen); computeGenKill(rhs, gen, kill, conditional); } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] computeGenKill [RETURN_TYPE] void  Node n BitSet gen BitSet kill boolean conditional [VARIABLES] BitSet gen kill liveSet Set escaped String ARGUMENT_ARRAY_ALIAS var boolean conditional Scope jsScope Node c lhs n rhs  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.7071067811865475	201	201	1	add	
7	[BUG] [BUGGY] if (NodeUtil.isVar(lhs)) { [FE] IllegalStateException [CONTEXT] if (!NodeUtil.isForIn(n)) { computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional); } else {  Node lhs = n.getFirstChild(); Node rhs = lhs.getNext(); [BUGGY] if (NodeUtil.isVar(lhs)) { [BUGGY]  lhs = lhs.getLastChild(); } addToSetIfLocal(lhs, kill); addToSetIfLocal(lhs, gen); computeGenKill(rhs, gen, kill, conditional); } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] computeGenKill [RETURN_TYPE] void  Node n BitSet gen BitSet kill boolean conditional [VARIABLES] BitSet gen kill liveSet Set escaped String ARGUMENT_ARRAY_ALIAS var boolean conditional Scope jsScope Node c lhs n rhs  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.7071067811865475	202	202	1	replace	
8	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] if (!NodeUtil.isForIn(n)) { computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional); } else {  Node lhs = n.getFirstChild(); Node rhs = lhs.getNext(); [BUGGY] [BUGGY] if (NodeUtil.isVar(lhs)) {  lhs = lhs.getLastChild(); } addToSetIfLocal(lhs, kill); addToSetIfLocal(lhs, gen); computeGenKill(rhs, gen, kill, conditional); } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] computeGenKill [RETURN_TYPE] void  Node n BitSet gen BitSet kill boolean conditional [VARIABLES] BitSet gen kill liveSet Set escaped String ARGUMENT_ARRAY_ALIAS var boolean conditional Scope jsScope Node c lhs n rhs  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.7071067811865475	202	202	1	add	
9	[BUG] [BUGGY] addToSetIfLocal(lhs, kill); [FE] IllegalStateException [CONTEXT] computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional); } else {  Node lhs = n.getFirstChild(); Node rhs = lhs.getNext(); if (NodeUtil.isVar(lhs)) {  lhs = lhs.getLastChild(); } [BUGGY] addToSetIfLocal(lhs, kill); [BUGGY] addToSetIfLocal(lhs, gen); computeGenKill(rhs, gen, kill, conditional); } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] computeGenKill [RETURN_TYPE] void  Node n BitSet gen BitSet kill boolean conditional [VARIABLES] BitSet gen kill liveSet Set escaped String ARGUMENT_ARRAY_ALIAS var boolean conditional Scope jsScope Node c lhs n rhs  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.7071067811865475	206	206	1	replace	
10	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional); } else {  Node lhs = n.getFirstChild(); Node rhs = lhs.getNext(); if (NodeUtil.isVar(lhs)) {  lhs = lhs.getLastChild(); } [BUGGY] [BUGGY] addToSetIfLocal(lhs, kill); addToSetIfLocal(lhs, gen); computeGenKill(rhs, gen, kill, conditional); } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] computeGenKill [RETURN_TYPE] void  Node n BitSet gen BitSet kill boolean conditional [VARIABLES] BitSet gen kill liveSet Set escaped String ARGUMENT_ARRAY_ALIAS var boolean conditional Scope jsScope Node c lhs n rhs  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.7071067811865475	206	206	1	add	
11	[BUG] [BUGGY] super(cfg, new LiveVariableJoinOp()); [FE] IllegalStateException [CONTEXT] LiveVariablesAnalysis(ControlFlowGraph<Node> cfg, Scope jsScope, AbstractCompiler compiler) { [BUGGY] super(cfg, new LiveVariableJoinOp()); [BUGGY] this.jsScope = jsScope; this.escaped = Sets.newHashSet(); computeEscaped(jsScope, escaped, compiler); } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler Set escaped boolean Scope jsScope ControlFlowGraph cfg BitSet liveSet String ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	117	117	1	replace	
12	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] LiveVariablesAnalysis(ControlFlowGraph<Node> cfg, Scope jsScope, AbstractCompiler compiler) { [BUGGY] [BUGGY] super(cfg, new LiveVariableJoinOp()); this.jsScope = jsScope; this.escaped = Sets.newHashSet(); computeEscaped(jsScope, escaped, compiler); } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler Set escaped boolean Scope jsScope ControlFlowGraph cfg BitSet liveSet String ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	117	117	1	add	
13	[BUG] [BUGGY] this.jsScope = jsScope; [FE] IllegalStateException [CONTEXT] LiveVariablesAnalysis(ControlFlowGraph<Node> cfg, Scope jsScope, AbstractCompiler compiler) { super(cfg, new LiveVariableJoinOp()); [BUGGY] this.jsScope = jsScope; [BUGGY] this.escaped = Sets.newHashSet(); computeEscaped(jsScope, escaped, compiler); } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler Set escaped boolean Scope jsScope ControlFlowGraph cfg BitSet liveSet String ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	118	118	1	replace	
14	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] LiveVariablesAnalysis(ControlFlowGraph<Node> cfg, Scope jsScope, AbstractCompiler compiler) { super(cfg, new LiveVariableJoinOp()); [BUGGY] [BUGGY] this.jsScope = jsScope; this.escaped = Sets.newHashSet(); computeEscaped(jsScope, escaped, compiler); } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler Set escaped boolean Scope jsScope ControlFlowGraph cfg BitSet liveSet String ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	118	118	1	add	
15	[BUG] [BUGGY] this.escaped = Sets.newHashSet(); [FE] IllegalStateException [CONTEXT] LiveVariablesAnalysis(ControlFlowGraph<Node> cfg, Scope jsScope, AbstractCompiler compiler) { super(cfg, new LiveVariableJoinOp()); this.jsScope = jsScope; [BUGGY] this.escaped = Sets.newHashSet(); [BUGGY] computeEscaped(jsScope, escaped, compiler); } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler Set escaped boolean Scope jsScope ControlFlowGraph cfg BitSet liveSet String ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	119	119	1	replace	
16	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] LiveVariablesAnalysis(ControlFlowGraph<Node> cfg, Scope jsScope, AbstractCompiler compiler) { super(cfg, new LiveVariableJoinOp()); this.jsScope = jsScope; [BUGGY] [BUGGY] this.escaped = Sets.newHashSet(); computeEscaped(jsScope, escaped, compiler); } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler Set escaped boolean Scope jsScope ControlFlowGraph cfg BitSet liveSet String ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	119	119	1	add	
17	[BUG] [BUGGY] computeEscaped(jsScope, escaped, compiler); [FE] IllegalStateException [CONTEXT] LiveVariablesAnalysis(ControlFlowGraph<Node> cfg, Scope jsScope, AbstractCompiler compiler) { super(cfg, new LiveVariableJoinOp()); this.jsScope = jsScope; this.escaped = Sets.newHashSet(); [BUGGY] computeEscaped(jsScope, escaped, compiler); [BUGGY] } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler Set escaped boolean Scope jsScope ControlFlowGraph cfg BitSet liveSet String ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	replace	
18	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] LiveVariablesAnalysis(ControlFlowGraph<Node> cfg, Scope jsScope, AbstractCompiler compiler) { super(cfg, new LiveVariableJoinOp()); this.jsScope = jsScope; this.escaped = Sets.newHashSet(); [BUGGY] [BUGGY] computeEscaped(jsScope, escaped, compiler); } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler Set escaped boolean Scope jsScope ControlFlowGraph cfg BitSet liveSet String ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	120	120	1	add	
19	[BUG] [BUGGY] } [FE] IllegalStateException [CONTEXT] LiveVariablesAnalysis(ControlFlowGraph<Node> cfg, Scope jsScope, AbstractCompiler compiler) { super(cfg, new LiveVariableJoinOp()); this.jsScope = jsScope; this.escaped = Sets.newHashSet(); computeEscaped(jsScope, escaped, compiler); [BUGGY] } [BUGGY]  [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler Set escaped boolean Scope jsScope ControlFlowGraph cfg BitSet liveSet String ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	121	121	1	replace	
20	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] LiveVariablesAnalysis(ControlFlowGraph<Node> cfg, Scope jsScope, AbstractCompiler compiler) { super(cfg, new LiveVariableJoinOp()); this.jsScope = jsScope; this.escaped = Sets.newHashSet(); computeEscaped(jsScope, escaped, compiler); [BUGGY] [BUGGY] } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler Set escaped boolean Scope jsScope ControlFlowGraph cfg BitSet liveSet String ARGUMENT_ARRAY_ALIAS  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	121	121	1	add	
21	[BUG] [BUGGY] return false; [FE] IllegalStateException [CONTEXT] boolean isForward() { [BUGGY] return false; [BUGGY] } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] isForward [RETURN_TYPE] boolean  [VARIABLES] BitSet liveSet Set escaped String ARGUMENT_ARRAY_ALIAS var boolean Scope jsScope  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	133	133	1	replace	
22	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] boolean isForward() { [BUGGY] [BUGGY] return false; } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] isForward [RETURN_TYPE] boolean  [VARIABLES] BitSet liveSet Set escaped String ARGUMENT_ARRAY_ALIAS var boolean Scope jsScope  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	133	133	1	add	
23	[BUG] [BUGGY] return new LiveVariableLattice(jsScope.getVarCount()); [FE] IllegalStateException [CONTEXT] LiveVariableLattice createInitialEstimateLattice() { [BUGGY] return new LiveVariableLattice(jsScope.getVarCount()); [BUGGY] } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] createInitialEstimateLattice [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  [VARIABLES] BitSet liveSet Set escaped String ARGUMENT_ARRAY_ALIAS var boolean Scope jsScope  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	143	143	1	replace	
24	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] LiveVariableLattice createInitialEstimateLattice() { [BUGGY] [BUGGY] return new LiveVariableLattice(jsScope.getVarCount()); } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] createInitialEstimateLattice [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  [VARIABLES] BitSet liveSet Set escaped String ARGUMENT_ARRAY_ALIAS var boolean Scope jsScope  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	143	143	1	add	
25	[BUG] [BUGGY] final BitSet gen = new BitSet(input.liveSet.size()); [FE] IllegalStateException [CONTEXT] LiveVariableLattice flowThrough(Node node, LiveVariableLattice input) { [BUGGY] final BitSet gen = new BitSet(input.liveSet.size()); [BUGGY] final BitSet kill = new BitSet(input.liveSet.size());  boolean conditional = false; List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	148	148	1	replace	
26	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] LiveVariableLattice flowThrough(Node node, LiveVariableLattice input) { [BUGGY] [BUGGY] final BitSet gen = new BitSet(input.liveSet.size()); final BitSet kill = new BitSet(input.liveSet.size());  boolean conditional = false; List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	148	148	1	add	
27	[BUG] [BUGGY] final BitSet kill = new BitSet(input.liveSet.size()); [FE] IllegalStateException [CONTEXT] LiveVariableLattice flowThrough(Node node, LiveVariableLattice input) { final BitSet gen = new BitSet(input.liveSet.size()); [BUGGY] final BitSet kill = new BitSet(input.liveSet.size()); [BUGGY]   boolean conditional = false; List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } computeGenKill(node, gen, kill, conditional); [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	149	149	1	replace	
28	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] LiveVariableLattice flowThrough(Node node, LiveVariableLattice input) { final BitSet gen = new BitSet(input.liveSet.size()); [BUGGY] [BUGGY] final BitSet kill = new BitSet(input.liveSet.size());  boolean conditional = false; List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } computeGenKill(node, gen, kill, conditional); [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	149	149	1	add	
29	[BUG] [BUGGY] boolean conditional = false; [FE] IllegalStateException [CONTEXT] LiveVariableLattice flowThrough(Node node, LiveVariableLattice input) { final BitSet gen = new BitSet(input.liveSet.size()); final BitSet kill = new BitSet(input.liveSet.size());  [BUGGY] boolean conditional = false; [BUGGY] List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } computeGenKill(node, gen, kill, conditional); LiveVariableLattice result = new LiveVariableLattice(input);  result.liveSet.andNot(kill); [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	152	152	1	replace	
30	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] LiveVariableLattice flowThrough(Node node, LiveVariableLattice input) { final BitSet gen = new BitSet(input.liveSet.size()); final BitSet kill = new BitSet(input.liveSet.size());  [BUGGY] [BUGGY] boolean conditional = false; List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } computeGenKill(node, gen, kill, conditional); LiveVariableLattice result = new LiveVariableLattice(input);  result.liveSet.andNot(kill); [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	152	152	1	add	
31	[BUG] [BUGGY] List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); [FE] IllegalStateException [CONTEXT] LiveVariableLattice flowThrough(Node node, LiveVariableLattice input) { final BitSet gen = new BitSet(input.liveSet.size()); final BitSet kill = new BitSet(input.liveSet.size());  boolean conditional = false; [BUGGY] List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); [BUGGY] for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } computeGenKill(node, gen, kill, conditional); LiveVariableLattice result = new LiveVariableLattice(input);  result.liveSet.andNot(kill); result.liveSet.or(gen); [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	153	153	1	replace	
32	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] LiveVariableLattice flowThrough(Node node, LiveVariableLattice input) { final BitSet gen = new BitSet(input.liveSet.size()); final BitSet kill = new BitSet(input.liveSet.size());  boolean conditional = false; [BUGGY] [BUGGY] List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } computeGenKill(node, gen, kill, conditional); LiveVariableLattice result = new LiveVariableLattice(input);  result.liveSet.andNot(kill); result.liveSet.or(gen); [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	153	153	1	add	
33	[BUG] [BUGGY] for (DiGraphEdge<Node, Branch> edge : edgeList) { [FE] IllegalStateException [CONTEXT] LiveVariableLattice flowThrough(Node node, LiveVariableLattice input) { final BitSet gen = new BitSet(input.liveSet.size()); final BitSet kill = new BitSet(input.liveSet.size());  boolean conditional = false; List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); [BUGGY] for (DiGraphEdge<Node, Branch> edge : edgeList) { [BUGGY] if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } computeGenKill(node, gen, kill, conditional); LiveVariableLattice result = new LiveVariableLattice(input);  result.liveSet.andNot(kill); result.liveSet.or(gen); return result; [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	154	154	1	replace	
34	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] LiveVariableLattice flowThrough(Node node, LiveVariableLattice input) { final BitSet gen = new BitSet(input.liveSet.size()); final BitSet kill = new BitSet(input.liveSet.size());  boolean conditional = false; List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); [BUGGY] [BUGGY] for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } computeGenKill(node, gen, kill, conditional); LiveVariableLattice result = new LiveVariableLattice(input);  result.liveSet.andNot(kill); result.liveSet.or(gen); return result; [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	154	154	1	add	
35	[BUG] [BUGGY] if (Branch.ON_EX.equals(edge.getValue())) { [FE] IllegalStateException [CONTEXT] LiveVariableLattice flowThrough(Node node, LiveVariableLattice input) { final BitSet gen = new BitSet(input.liveSet.size()); final BitSet kill = new BitSet(input.liveSet.size());  boolean conditional = false; List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { [BUGGY] if (Branch.ON_EX.equals(edge.getValue())) { [BUGGY] conditional = true; } } computeGenKill(node, gen, kill, conditional); LiveVariableLattice result = new LiveVariableLattice(input);  result.liveSet.andNot(kill); result.liveSet.or(gen); return result; } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	155	155	1	replace	
36	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] LiveVariableLattice flowThrough(Node node, LiveVariableLattice input) { final BitSet gen = new BitSet(input.liveSet.size()); final BitSet kill = new BitSet(input.liveSet.size());  boolean conditional = false; List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { [BUGGY] [BUGGY] if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } computeGenKill(node, gen, kill, conditional); LiveVariableLattice result = new LiveVariableLattice(input);  result.liveSet.andNot(kill); result.liveSet.or(gen); return result; } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	155	155	1	add	
37	[BUG] [BUGGY] } [FE] IllegalStateException [CONTEXT] final BitSet gen = new BitSet(input.liveSet.size()); final BitSet kill = new BitSet(input.liveSet.size());  boolean conditional = false; List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } [BUGGY] } [BUGGY] computeGenKill(node, gen, kill, conditional); LiveVariableLattice result = new LiveVariableLattice(input);  result.liveSet.andNot(kill); result.liveSet.or(gen); return result; } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	158	158	1	replace	
38	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] final BitSet gen = new BitSet(input.liveSet.size()); final BitSet kill = new BitSet(input.liveSet.size());  boolean conditional = false; List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } [BUGGY] [BUGGY] } computeGenKill(node, gen, kill, conditional); LiveVariableLattice result = new LiveVariableLattice(input);  result.liveSet.andNot(kill); result.liveSet.or(gen); return result; } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	158	158	1	add	
39	[BUG] [BUGGY] computeGenKill(node, gen, kill, conditional); [FE] IllegalStateException [CONTEXT] final BitSet kill = new BitSet(input.liveSet.size());  boolean conditional = false; List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } [BUGGY] computeGenKill(node, gen, kill, conditional); [BUGGY] LiveVariableLattice result = new LiveVariableLattice(input);  result.liveSet.andNot(kill); result.liveSet.or(gen); return result; } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	159	159	1	replace	
40	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] final BitSet kill = new BitSet(input.liveSet.size());  boolean conditional = false; List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } [BUGGY] [BUGGY] computeGenKill(node, gen, kill, conditional); LiveVariableLattice result = new LiveVariableLattice(input);  result.liveSet.andNot(kill); result.liveSet.or(gen); return result; } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	159	159	1	add	
41	[BUG] [BUGGY] LiveVariableLattice result = new LiveVariableLattice(input); [FE] IllegalStateException [CONTEXT]  boolean conditional = false; List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } computeGenKill(node, gen, kill, conditional); [BUGGY] LiveVariableLattice result = new LiveVariableLattice(input); [BUGGY]  result.liveSet.andNot(kill); result.liveSet.or(gen); return result; } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	160	160	1	replace	
42	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT]  boolean conditional = false; List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } computeGenKill(node, gen, kill, conditional); [BUGGY] [BUGGY] LiveVariableLattice result = new LiveVariableLattice(input);  result.liveSet.andNot(kill); result.liveSet.or(gen); return result; } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	160	160	1	add	
43	[BUG] [BUGGY] result.liveSet.andNot(kill); [FE] IllegalStateException [CONTEXT] boolean conditional = false; List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } computeGenKill(node, gen, kill, conditional); LiveVariableLattice result = new LiveVariableLattice(input);  [BUGGY] result.liveSet.andNot(kill); [BUGGY] result.liveSet.or(gen); return result; } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	162	162	1	replace	
44	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] boolean conditional = false; List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } computeGenKill(node, gen, kill, conditional); LiveVariableLattice result = new LiveVariableLattice(input);  [BUGGY] [BUGGY] result.liveSet.andNot(kill); result.liveSet.or(gen); return result; } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	162	162	1	add	
45	[BUG] [BUGGY] result.liveSet.or(gen); [FE] IllegalStateException [CONTEXT] List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } computeGenKill(node, gen, kill, conditional); LiveVariableLattice result = new LiveVariableLattice(input);  result.liveSet.andNot(kill); [BUGGY] result.liveSet.or(gen); [BUGGY] return result; } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	163	163	1	replace	
46	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } computeGenKill(node, gen, kill, conditional); LiveVariableLattice result = new LiveVariableLattice(input);  result.liveSet.andNot(kill); [BUGGY] [BUGGY] result.liveSet.or(gen); return result; } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	163	163	1	add	
47	[BUG] [BUGGY] return result; [FE] IllegalStateException [CONTEXT] for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } computeGenKill(node, gen, kill, conditional); LiveVariableLattice result = new LiveVariableLattice(input);  result.liveSet.andNot(kill); result.liveSet.or(gen); [BUGGY] return result; [BUGGY] } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	164	164	1	replace	
48	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] for (DiGraphEdge<Node, Branch> edge : edgeList) { if (Branch.ON_EX.equals(edge.getValue())) { conditional = true; } } computeGenKill(node, gen, kill, conditional); LiveVariableLattice result = new LiveVariableLattice(input);  result.liveSet.andNot(kill); result.liveSet.or(gen); [BUGGY] [BUGGY] return result; } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] flowThrough [RETURN_TYPE] LiveVariablesAnalysis$LiveVariableLattice  Node node LiveVariableLattice input [VARIABLES] Set escaped boolean conditional DiGraphEdge edge Scope jsScope LiveVariableLattice input result Node node BitSet gen kill liveSet List edgeList String ARGUMENT_ARRAY_ALIAS var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	164	164	1	add	
49	[BUG] [BUGGY] switch (n.getType()) { [FE] IllegalStateException [CONTEXT] boolean conditional) { [BUGGY] switch (n.getType()) { [BUGGY] case Token.SCRIPT: case Token.BLOCK: case Token.FUNCTION: return; case Token.WHILE: case Token.DO: case Token.IF: computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional); [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] computeGenKill [RETURN_TYPE] void  Node n BitSet gen BitSet kill boolean conditional [VARIABLES] BitSet gen kill liveSet Set escaped String ARGUMENT_ARRAY_ALIAS var boolean conditional Scope jsScope Node c lhs n rhs  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	181	181	1	replace	
50	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] boolean conditional) { [BUGGY] [BUGGY] switch (n.getType()) { case Token.SCRIPT: case Token.BLOCK: case Token.FUNCTION: return; case Token.WHILE: case Token.DO: case Token.IF: computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional); [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] computeGenKill [RETURN_TYPE] void  Node n BitSet gen BitSet kill boolean conditional [VARIABLES] BitSet gen kill liveSet Set escaped String ARGUMENT_ARRAY_ALIAS var boolean conditional Scope jsScope Node c lhs n rhs  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	181	181	1	add	
51	[BUG] [BUGGY] return; [FE] IllegalStateException [CONTEXT] boolean conditional) { switch (n.getType()) { case Token.SCRIPT: case Token.BLOCK: case Token.FUNCTION: [BUGGY] return; [BUGGY]  case Token.WHILE: case Token.DO: case Token.IF: computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional); return; case Token.FOR: if (!NodeUtil.isForIn(n)) { [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] computeGenKill [RETURN_TYPE] void  Node n BitSet gen BitSet kill boolean conditional [VARIABLES] BitSet gen kill liveSet Set escaped String ARGUMENT_ARRAY_ALIAS var boolean conditional Scope jsScope Node c lhs n rhs  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	185	185	1	replace	
52	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] boolean conditional) { switch (n.getType()) { case Token.SCRIPT: case Token.BLOCK: case Token.FUNCTION: [BUGGY] [BUGGY] return; case Token.WHILE: case Token.DO: case Token.IF: computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional); return; case Token.FOR: if (!NodeUtil.isForIn(n)) { [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] computeGenKill [RETURN_TYPE] void  Node n BitSet gen BitSet kill boolean conditional [VARIABLES] BitSet gen kill liveSet Set escaped String ARGUMENT_ARRAY_ALIAS var boolean conditional Scope jsScope Node c lhs n rhs  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	185	185	1	add	
53	[BUG] [BUGGY] Preconditions.checkState(NodeUtil.isName(node)); [FE] IllegalStateException [CONTEXT] private void addToSetIfLocal(Node node, BitSet set) { [BUGGY] Preconditions.checkState(NodeUtil.isName(node)); [BUGGY] String name = node.getString(); if (!jsScope.isDeclared(name, false)) { return; } Var var = jsScope.getVar(name); if (!escaped.contains(var)) { set.set(var.index); } } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] addToSetIfLocal [RETURN_TYPE] void  Node node BitSet set [VARIABLES] Set escaped boolean Scope jsScope Var var Node node BitSet gen kill liveSet set String ARGUMENT_ARRAY_ALIAS name var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	266	266	1	replace	
54	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] private void addToSetIfLocal(Node node, BitSet set) { [BUGGY] [BUGGY] Preconditions.checkState(NodeUtil.isName(node)); String name = node.getString(); if (!jsScope.isDeclared(name, false)) { return; } Var var = jsScope.getVar(name); if (!escaped.contains(var)) { set.set(var.index); } } [CLASS] LiveVariablesAnalysis LiveVariableJoinOp LiveVariableLattice [METHOD] addToSetIfLocal [RETURN_TYPE] void  Node node BitSet set [VARIABLES] Set escaped boolean Scope jsScope Var var Node node BitSet gen kill liveSet set String ARGUMENT_ARRAY_ALIAS name var  	projects/Closure58/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java	0.22360679774997896	266	266	1	add	
