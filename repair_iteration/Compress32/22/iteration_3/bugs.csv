bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(coll!=  null  &&  coll.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll!=  null  &&  coll.length  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll!=  null  &&  coll.length  >  0)  {	  while(i!=    null    &&    coll.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
2	[BUG]  [BUGGY]  while(len!=  0  &&  coll.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  0  &&  coll.length  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  0  &&  coll.length  >  0)  {	  while(i!=    null    &&    coll.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
3	[BUG]  [BUGGY]  while(i  ==  null  &&  coll.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i  ==  null  &&  coll.length  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i  ==  null  &&  coll.length  >  0)  {	  while(i!=    null    &&    coll.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
4	[BUG]  [BUGGY]  while(i!=  null  &&  coll.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&  coll.length  <  =  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&  coll.length  <  =  0)  {	  while(i!=    null    &&    coll.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
5	[BUG]  [BUGGY]  while(i  >=  null  &&  coll.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i  >=  null  &&  coll.length  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i  >=  null  &&  coll.length  >  0)  {	  while(i!=    null    &&    coll.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
6	[BUG]  [BUGGY]  while(coll.hasMoreTokens()  &&  coll.hasMoreTokens())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.hasMoreTokens()  &&  coll.hasMoreTokens())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.hasMoreTokens()  &&  coll.hasMoreTokens())  {	  while(i.hasMoreTokens()    &&    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
7	[BUG]  [BUGGY]  while(!i.hasMoreTokens()  &&  coll.hasMoreTokens())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasMoreTokens()  &&  coll.hasMoreTokens())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasMoreTokens()  &&  coll.hasMoreTokens())  {	  while(i.hasMoreTokens()    &&    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
8	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.hasMoreTokens()  ||  coll.hasMoreTokens())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.hasMoreTokens()  ||  coll.hasMoreTokens())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.hasMoreTokens()  ||  coll.hasMoreTokens())  {	  while(i.hasMoreTokens()    &&    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
9	[BUG]  [BUGGY]  while(!coll.hasMoreTokens()  &&  coll.hasMoreTokens())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!coll.hasMoreTokens()  &&  coll.hasMoreTokens())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!coll.hasMoreTokens()  &&  coll.hasMoreTokens())  {	  while(i.hasMoreTokens()    &&    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
10	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.nextToken())  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.nextToken())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.nextToken())  {	  while(i.hasMoreTokens()    &&    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
11	[BUG]  [BUGGY]  while(i.hasNext()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  ==  -1)  {	  while(i.hasNext()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
12	[BUG]  [BUGGY]  while(i.hasNext()  >=  -1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  >=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  >=  -1)  {	  while(i.hasNext()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
13	[BUG]  [BUGGY]  while(len.hasNext()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len.hasNext()!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len.hasNext()!=  -1)  {	  while(i.hasNext()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
14	[BUG]  [BUGGY]  while(i.hasNext()  >>  -1)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  >>  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  >>  -1)  {	  while(i.hasNext()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
15	[BUG]  [BUGGY]  while(coll.hasMoreElements()  &&  coll.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.hasMoreElements()  &&  coll.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.hasMoreElements()  &&  coll.hasMoreElements())  {	  while(i.hasMoreElements()    &&    coll.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
16	[BUG]  [BUGGY]  while(!i.hasMoreElements()  &&  coll.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasMoreElements()  &&  coll.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasMoreElements()  &&  coll.hasMoreElements())  {	  while(i.hasMoreElements()    &&    coll.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
17	[BUG]  [BUGGY]  while(!coll.hasMoreElements()  &&  coll.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!coll.hasMoreElements()  &&  coll.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!coll.hasMoreElements()  &&  coll.hasMoreElements())  {	  while(i.hasMoreElements()    &&    coll.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
18	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.nextElement())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  &&  coll.nextElement())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  &&  coll.nextElement())  {	  while(i.hasMoreElements()    &&    coll.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
19	[BUG]  [BUGGY]  while(len.hasMoreElements()  &&  coll.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len.hasMoreElements()  &&  coll.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len.hasMoreElements()  &&  coll.hasMoreElements())  {	  while(i.hasMoreElements()    &&    coll.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
20	[BUG]  [BUGGY]  whilst(i!=  null  &&(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  whilst(i!=  null  &&(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	whilst(i!=  null  &&(ch  =  coll.read())!=  -1)  {	  whilst(i!=    null    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
21	[BUG]  [BUGGY]  whilst(i!=  null  &&(ch  =  col.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  whilst(i!=  null  &&(ch  =  col.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	whilst(i!=  null  &&(ch  =  col.read())!=  -1)  {	  whilst(i!=    null    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
22	[BUG]  [BUGGY]  whilst(i  ==  null  &&(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  whilst(i  ==  null  &&(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	whilst(i  ==  null  &&(ch  =  coll.read())!=  -1)  {	  whilst(i!=    null    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
23	[BUG]  [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&!hasHitEOF  &&(ch  =  coll.read())!=  -1)  {	  while(i!=    null    &&!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
24	[BUG]  [BUGGY]  while(i!=  null  &&  hasHitEOF  &&(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&  hasHitEOF  &&(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&  hasHitEOF  &&(ch  =  coll.read())!=  -1)  {	  while(i!=    null    &&!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
25	[BUG]  [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(ch  =  col.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(ch  =  col.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&!hasHitEOF  &&(ch  =  col.read())!=  -1)  {	  while(i!=    null    &&!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
26	[BUG]  [BUGGY]  while(i!=  null  &&  hasHitEOF  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&  hasHitEOF  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&  hasHitEOF  &&(ch  =  i.read())!=  -1)  {	  while(i!=    null    &&!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
27	[BUG]  [BUGGY]  while(i.isEmpty()  ||  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  ||  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  ||  coll.length()  >  0)  {	  while(i.isEmpty()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
28	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.length()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.length()  <  =  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.length()  <  =  0)  {	  while(i.isEmpty()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
29	[BUG]  [BUGGY]  while(coll.isEmpty()  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.isEmpty()  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.isEmpty()  &&  coll.length()  >  0)  {	  while(i.isEmpty()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
30	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.length()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.length()  >=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.length()  >=  0)  {	  while(i.isEmpty()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
31	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len  =  coll.read()  -  1)!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(len  =  coll.read()  -  1)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(len  =  coll.read()  -  1)!=  -1)  {	  while(!hasHitEOF    &&(len    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
32	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len  =  coll.length())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(len  =  coll.length())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(len  =  coll.length())!=  -1)  {	  while(!hasHitEOF    &&(len    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
33	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len  =  coll.read()  +  1)!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(len  =  coll.read()  +  1)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(len  =  coll.read()  +  1)!=  -1)  {	  while(!hasHitEOF    &&(len    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
34	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len  =  coll.read())!=  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(len  =  coll.read())!=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(len  =  coll.read())!=  0)  {	  while(!hasHitEOF    &&(len    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
35	[BUG]  [BUGGY]  while(i.isEmpty()  ||  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  ||  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  ||  coll.size()  >  0)  {	  while(i.isEmpty()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
36	[BUG]  [BUGGY]  while(coll.isEmpty()  &&  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.isEmpty()  &&  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.isEmpty()  &&  coll.size()  >  0)  {	  while(i.isEmpty()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
37	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.size()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.size()  <  =  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.size()  <  =  0)  {	  while(i.isEmpty()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
38	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.isEmpty()  &&  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.isEmpty()  &&  coll.size()  >  0)  {	  while(i.isEmpty()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.size()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.size()  ==  0)  {	  while(i.isEmpty()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.size()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.size()  >=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.size()  >=  0)  {	  while(i.isEmpty()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  while(i.isEmpty()  ||  coll.isEnabled(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  ||  coll.isEnabled(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  ||  coll.isEnabled(CharsetNames.UTF_8))  {	  while(i.isEmpty()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
42	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  coll.isEnabled(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.isEmpty()  &&  coll.isEnabled(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.isEmpty()  &&  coll.isEnabled(CharsetNames.UTF_8))  {	  while(i.isEmpty()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
43	[BUG]  [BUGGY]  while(coll.isEmpty()  &&  coll.isEnabled(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.isEmpty()  &&  coll.isEnabled(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.isEmpty()  &&  coll.isEnabled(CharsetNames.UTF_8))  {	  while(i.isEmpty()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
44	[BUG]  [BUGGY]  while(!coll.isEmpty()  &&  coll.isEnabled(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!coll.isEmpty()  &&  coll.isEnabled(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!coll.isEmpty()  &&  coll.isEnabled(CharsetNames.UTF_8))  {	  while(i.isEmpty()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
45	[BUG]  [BUGGY]  while(len.isEmpty()  &&  coll.isEnabled(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len.isEmpty()  &&  coll.isEnabled(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len.isEmpty()  &&  coll.isEnabled(CharsetNames.UTF_8))  {	  while(i.isEmpty()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
46	[BUG]  [BUGGY]  whilst(coll!=  null  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  whilst(coll!=  null  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	whilst(coll!=  null  &&  coll.isEmpty())  {	  whilst(i!=    null    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
47	[BUG]  [BUGGY]  whilst(i  ==  null  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  whilst(i  ==  null  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	whilst(i  ==  null  &&  coll.isEmpty())  {	  whilst(i!=    null    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
48	[BUG]  [BUGGY]  whilst(len!=  0  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  whilst(len!=  0  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	whilst(len!=  0  &&  coll.isEmpty())  {	  whilst(i!=    null    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
49	[BUG]  [BUGGY]  while(i!=  null  &&  coll.size()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&  coll.size()  <  =  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&  coll.size()  <  =  0)  {	  while(i!=    null    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
50	[BUG]  [BUGGY]  while(coll!=  null  &&  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll!=  null  &&  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll!=  null  &&  coll.size()  >  0)  {	  while(i!=    null    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
51	[BUG]  [BUGGY]  while(len!=  0  &&  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  0  &&  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  0  &&  coll.size()  >  0)  {	  while(i!=    null    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
52	[BUG]  [BUGGY]  while(i  ==  null  &&  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i  ==  null  &&  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i  ==  null  &&  coll.size()  >  0)  {	  while(i!=    null    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
53	[BUG]  [BUGGY]  while(i!=  null  &&  coll.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&  coll.size()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&  coll.size()  ==  0)  {	  while(i!=    null    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
54	[BUG]  [BUGGY]  while(i!=  null  &&  coll.size()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&  coll.size()  >=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&  coll.size()  >=  0)  {	  while(i!=    null    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
55	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len  ==  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(len  ==  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(len  ==  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    ==    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
56	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  ==  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()  ==  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()  ==  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    ==    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
57	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  ==  coll.length())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  ==  coll.length())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  ==  coll.length())!=  -1)  {	  while(!hasHitEOF    &&(ch    ==    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
58	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  >=  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  >=  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  >=  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    ==    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
59	[BUG]  [BUGGY]  while(i.read()!=  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.read()!=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.read()!=  0)  {	  while(i.read()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
60	[BUG]  [BUGGY]  while(coll.read()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.read()  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.read()  ==  -1)  {	  while(i.read()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
61	[BUG]  [BUGGY]  while(i.hasNext()!=  ch  &&(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()!=  ch  &&(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()!=  ch  &&(ch  =  coll.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
62	[BUG]  [BUGGY]  while(i.hasNext()!=  &&(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()!=  &&(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()!=  &&(ch  =  coll.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
63	[BUG]  [BUGGY]  while(i.hasNext()  ==  ch  &&(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  ==  ch  &&(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  ==  ch  &&(ch  =  coll.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
64	[BUG]  [BUGGY]  while(i.hasNext()  >=  ch  &&(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  >=  ch  &&(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  >=  ch  &&(ch  =  coll.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
65	[BUG]  [BUGGY]  while(i.hasNext()!=  null  &&(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()!=  null  &&(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()!=  null  &&(ch  =  coll.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
66	[BUG]  [BUGGY]  while(i.hasNext()!=  len  &&(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()!=  len  &&(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()!=  len  &&(ch  =  coll.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
67	[BUG]  [BUGGY]  while(i.hasNext()  >>  ch  &&(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  >>  ch  &&(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  >>  ch  &&(ch  =  coll.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
68	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  ==  0))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()  ==  0))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()  ==  0))  {	  while(!hasHitEOF    &&(i.read()    ==    -1))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
69	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.read()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&  coll.read()  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&  coll.read()  ==  -1)  {	  while(!hasHitEOF    &&(i.read()    ==    -1))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
70	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()!=  0))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()!=  0))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()!=  0))  {	  while(!hasHitEOF    &&(i.read()    ==    -1))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
71	[BUG]  [BUGGY]  while(!hasHitEOF  &&(coll.read()  ==  -1))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(coll.read()  ==  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(coll.read()  ==  -1))  {	  while(!hasHitEOF    &&(i.read()    ==    -1))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
72	[BUG]  [BUGGY]  while(i.hasMoreElements()  ||  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  ||  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  ||  coll.size()  >  0)  {	  while(i.hasMoreElements()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
73	[BUG]  [BUGGY]  while(coll.hasMoreElements()  &&  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.hasMoreElements()  &&  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.hasMoreElements()  &&  coll.size()  >  0)  {	  while(i.hasMoreElements()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
74	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.size()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  &&  coll.size()  <  =  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  &&  coll.size()  <  =  0)  {	  while(i.hasMoreElements()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
75	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.size()  >  1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  &&  coll.size()  >  1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  &&  coll.size()  >  1)  {	  while(i.hasMoreElements()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
76	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  &&  coll.size()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  &&  coll.size()  ==  0)  {	  while(i.hasMoreElements()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
77	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.size()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  &&  coll.size()  >=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  &&  coll.size()  >=  0)  {	  while(i.hasMoreElements()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
78	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.endsWith( "java "))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.endsWith( "java "))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.endsWith( "java "))  {	  while(i.isEmpty()    &&    coll.endsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
79	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.endsWith( "java/ "))  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.endsWith( "java/ "))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.endsWith( "java/ "))  {	  while(i.isEmpty()    &&    coll.endsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
80	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.endsWith( "/.java "))  {  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.endsWith( "/.java "))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.endsWith( "/.java "))  {	  while(i.isEmpty()    &&    coll.endsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
81	[BUG]  [BUGGY]  while(i.isEmpty()  ||  coll.endsWith( ".java "))  {  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  ||  coll.endsWith( ".java "))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  ||  coll.endsWith( ".java "))  {	  while(i.isEmpty()    &&    coll.endsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
82	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.endsWith( "java. "))  {  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.endsWith( "java. "))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.endsWith( "java. "))  {	  while(i.isEmpty()    &&    coll.endsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
83	[BUG]  [BUGGY]  while(coll.isEmpty()  &&  coll.endsWith( ".java "))  {  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.isEmpty()  &&  coll.endsWith( ".java "))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.isEmpty()  &&  coll.endsWith( ".java "))  {	  while(i.isEmpty()    &&    coll.endsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
84	[BUG]  [BUGGY]  While(coll!=  null  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  While(coll!=  null  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	While(coll!=  null  &&  coll.isEmpty())  {	  While(i!=    null    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
85	[BUG]  [BUGGY]  While(len!=  0  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  While(len!=  0  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	While(len!=  0  &&  coll.isEmpty())  {	  While(i!=    null    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
86	[BUG]  [BUGGY]  While(i  ==  null  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  While(i  ==  null  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	While(i  ==  null  &&  coll.isEmpty())  {	  While(i!=    null    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
87	[BUG]  [BUGGY]  While(i!=  null  ||  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  While(i!=  null  ||  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	While(i!=  null  ||  coll.isEmpty())  {	  While(i!=    null    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
88	[BUG]  [BUGGY]  while(len!=  null  &&  coll.length()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  null  &&  coll.length()  <  =  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  null  &&  coll.length()  <  =  0)  {	  while(len!=    null    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
89	[BUG]  [BUGGY]  while(len!=  null  ||  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  null  ||  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  null  ||  coll.length()  >  0)  {	  while(len!=    null    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
90	[BUG]  [BUGGY]  while(len  >=  null  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  >=  null  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  >=  null  &&  coll.length()  >  0)  {	  while(len!=    null    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
91	[BUG]  [BUGGY]  while(i.next()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.next()  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.next()  ==  -1)  {	  while(i.next()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
92	[BUG]  [BUGGY]  while(len.next()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len.next()!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len.next()!=  -1)  {	  while(i.next()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
93	[BUG]  [BUGGY]  while(i.next()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.next()!=  null)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.next()!=  null)  {	  while(i.next()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
94	[BUG]  [BUGGY]  while(coll.hasMoreTokens()  ||  coll.hasMoreTokens())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.hasMoreTokens()  ||  coll.hasMoreTokens())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.hasMoreTokens()  ||  coll.hasMoreTokens())  {	  while(i.hasMoreTokens()    ||    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
95	[BUG]  [BUGGY]  while(len.hasMoreTokens()  ||  coll.hasMoreTokens())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len.hasMoreTokens()  ||  coll.hasMoreTokens())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len.hasMoreTokens()  ||  coll.hasMoreTokens())  {	  while(i.hasMoreTokens()    ||    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
96	[BUG]  [BUGGY]  while(!coll.hasMoreTokens()  ||  coll.hasMoreTokens())  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!coll.hasMoreTokens()  ||  coll.hasMoreTokens())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!coll.hasMoreTokens()  ||  coll.hasMoreTokens())  {	  while(i.hasMoreTokens()    ||    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
97	[BUG]  [BUGGY]  while(!i.hasMoreTokens()  ||  coll.hasMoreTokens())  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasMoreTokens()  ||  coll.hasMoreTokens())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasMoreTokens()  ||  coll.hasMoreTokens())  {	  while(i.hasMoreTokens()    ||    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
98	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.close();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.close();  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.close();	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
99	[BUG]  [BUGGY]  if(ch  ==  '.')  {  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.close();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  if(ch  ==  '.')  {  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.close();  }  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	if(ch  ==  '.')  {  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.close();  }	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
100	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read);  coll.close();  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read);  coll.close();  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read);  coll.close();	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
101	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream();  coll.close();  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream();  coll.close();  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  new  ByteArrayOutputStream();  coll.close();	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
102	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.flush();  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.flush();  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.flush();	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
103	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream();  coll.close();  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream();  coll.close();  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  new  ByteArrayInputStream();  coll.close();	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
104	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len  <  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(len  <  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(len  <  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
105	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()  <  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
106	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  <  coll.length())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  <  coll.length())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  <  coll.length())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
107	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  <  coll.length)!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  <  coll.length)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  <  coll.length)!=  -1)  {	  while(!hasHitEOF    &&(ch    <    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
108	[BUG]  [BUGGY]  while(!hasHitEOF  &&(coll.read()  <  =  0)!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(coll.read()  <  =  0)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(coll.read()  <  =  0)!=  -1)  {	  while(!hasHitEOF    &&(ch    <    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
109	[BUG]  [BUGGY]  while((  ch  =  coll.readFully(i))!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.readFully(i))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.readFully(i))!=  -1)  {	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
110	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i,  coll))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(i,  coll))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(i,  coll))!=  -1)  {	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
111	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i,  len))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(i,  len))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(i,  len))!=  -1)  {	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
112	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i,  restLen))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(i,  restLen))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(i,  restLen))!=  -1)  {	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
113	[BUG]  [BUGGY]  while((  ch  =  col.readFully(i))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  col.readFully(i))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  col.readFully(i))!=  -1)  {	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
114	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i),  read!=  -1))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(i),  read!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(i),  read!=  -1))  {	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
115	[BUG]  [BUGGY]  while(i.isEmpty()  ||  coll.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  ||  coll.length()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  ||  coll.length()  ==  0)  {	  while(i.isEmpty()    &&    coll.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
116	[BUG]  [BUGGY]  while(coll.isEmpty()  &&  coll.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.isEmpty()  &&  coll.length()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.isEmpty()  &&  coll.length()  ==  0)  {	  while(i.isEmpty()    &&    coll.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
117	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  coll.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.isEmpty()  &&  coll.length()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.isEmpty()  &&  coll.length()  ==  0)  {	  while(i.isEmpty()    &&    coll.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
118	[BUG]  [BUGGY]  int  len  =  coll.length()  -  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  int  len  =  coll.length()  -  1;  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	int  len  =  coll.length()  -  1;	  int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
119	[BUG]  [BUGGY]  int  len  =  coll.length()  +  1;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  int  len  =  coll.length()  +  1;  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	int  len  =  coll.length()  +  1;	  int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
120	[BUG]  [BUGGY]  int  len  =  coll.length()  -  read;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  int  len  =  coll.length()  -  read;  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	int  len  =  coll.length()  -  read;	  int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
121	[BUG]  [BUGGY]  int  len  =  coll.length()  -  2;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  int  len  =  coll.length()  -  2;  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	int  len  =  coll.length()  -  2;	  int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
122	[BUG]  [BUGGY]  Integer  len  =  coll.length();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  Integer  len  =  coll.length();  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	Integer  len  =  coll.length();	  int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
123	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readInputStream(i);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  IOUtils.readInputStream(i);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  IOUtils.readInputStream(i);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
124	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  i);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  i);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  IOUtils.readFully(i,  i);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
125	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readInputStream(i,  read);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  IOUtils.readInputStream(i,  read);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  IOUtils.readInputStream(i,  read);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
126	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  ch);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  ch);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  IOUtils.readFully(i,  ch);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
127	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readFully(i);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  IOUtils.readFully(i);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  IOUtils.readFully(i);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
128	[BUG]  [BUGGY]  InputStream  coll  =  i.readInputStream(ch);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  i.readInputStream(ch);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  i.readInputStream(ch);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
129	[BUG]  [BUGGY]  while(!i.hasMoreElements()  &&  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasMoreElements()  &&  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasMoreElements()  &&  coll.size()  >  0)  {	  while(!i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
130	[BUG]  [BUGGY]  while(!coll.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!coll.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!coll.hasMoreElements())  {	  while(!i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
131	[BUG]  [BUGGY]  while(!i.hasMoreElements()  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasMoreElements()  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasMoreElements()  &&  coll.length()  >  0)  {	  while(!i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
132	[BUG]  [BUGGY]  while(!i.hasMoreElements()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasMoreElements()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasMoreElements()  &&  coll.isEmpty())  {	  while(!i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
133	[BUG]  [BUGGY]  while(!i.hasMoreElements()  &&  coll.charAt(len  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasMoreElements()  &&  coll.charAt(len  -  1)!=  'n')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasMoreElements()  &&  coll.charAt(len  -  1)!=  'n')  {	  while(!i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
134	[BUG]  [BUGGY]  parsePaxHeaders(i,  coll,  ch);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  parsePaxHeaders(i,  coll,  ch);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	parsePaxHeaders(i,  coll,  ch);	  parsePaxHeaders(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
135	[BUG]  [BUGGY]  parsePaxHeaders(i,  coll,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  parsePaxHeaders(i,  coll,  hasHitEOF);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	parsePaxHeaders(i,  coll,  hasHitEOF);	  parsePaxHeaders(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
136	[BUG]  [BUGGY]  parsePaxHeaders(i,  coll,  read);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  parsePaxHeaders(i,  coll,  read);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	parsePaxHeaders(i,  coll,  read);	  parsePaxHeaders(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
137	[BUG]  [BUGGY]  parsePaxHeaders(i,  coll,  len);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  parsePaxHeaders(i,  coll,  len);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	parsePaxHeaders(i,  coll,  len);	  parsePaxHeaders(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
138	[BUG]  [BUGGY]  parsePaxHeaders(i,  coll,  headers);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  parsePaxHeaders(i,  coll,  headers);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	parsePaxHeaders(i,  coll,  headers);	  parsePaxHeaders(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
139	[BUG]  [BUGGY]  parsePaxHeaders(i,  coll,  length);  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  parsePaxHeaders(i,  coll,  length);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	parsePaxHeaders(i,  coll,  length);	  parsePaxHeaders(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
140	[BUG]  [BUGGY]  parsePaxHeaders(i,  coll,  true);  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  parsePaxHeaders(i,  coll,  true);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	parsePaxHeaders(i,  coll,  true);	  parsePaxHeaders(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
141	[BUG]  [BUGGY]  IOUtils.readFully(i,  coll,  read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  IOUtils.readFully(i,  coll,  read);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	IOUtils.readFully(i,  coll,  read);	  IOUtils.readFully(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
142	[BUG]  [BUGGY]  IOUtils.readFully(len,  coll);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  IOUtils.readFully(len,  coll);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	IOUtils.readFully(len,  coll);	  IOUtils.readFully(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
143	[BUG]  [BUGGY]  IOUtils.readFully(i,  coll,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  IOUtils.readFully(i,  coll,  hasHitEOF);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	IOUtils.readFully(i,  coll,  hasHitEOF);	  IOUtils.readFully(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
144	[BUG]  [BUGGY]  IOUtils.readFully(i,  coll,  ch);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  IOUtils.readFully(i,  coll,  ch);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	IOUtils.readFully(i,  coll,  ch);	  IOUtils.readFully(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
145	[BUG]  [BUGGY]  IOUtils.readFully(coll,  i);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  IOUtils.readFully(coll,  i);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	IOUtils.readFully(coll,  i);	  IOUtils.readFully(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
146	[BUG]  [BUGGY]  IOUtils.readFully(i,  coll,  len);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  IOUtils.readFully(i,  coll,  len);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	IOUtils.readFully(i,  coll,  len);	  IOUtils.readFully(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
147	[BUG]  [BUGGY]  while((  ch  =  coll.readFully(i.readFully()))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.readFully(i.readFully()))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.readFully(i.readFully()))!=  -1)  {	  while((    ch    =    IOUtils.readFully(i.readFully()))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
148	[BUG]  [BUGGY]  while((  ch  =  i.readFully())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  i.readFully())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  i.readFully())!=  -1)  {	  while((    ch    =    IOUtils.readFully(i.readFully()))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
149	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i.readFully()),  read!=  -1))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(i.readFully()),  read!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(i.readFully()),  read!=  -1))  {	  while((    ch    =    IOUtils.readFully(i.readFully()))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
150	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i.readFully()),  read  >=  -1))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(i.readFully()),  read  >=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(i.readFully()),  read  >=  -1))  {	  while((    ch    =    IOUtils.readFully(i.readFully()))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
151	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i.getBytes()))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(i.getBytes()))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(i.getBytes()))!=  -1)  {	  while((    ch    =    IOUtils.readFully(i.readFully()))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
152	[BUG]  [BUGGY]  while((  ch  =  col.readFully(i.readFully()))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  col.readFully(i.readFully()))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  col.readFully(i.readFully()))!=  -1)  {	  while((    ch    =    IOUtils.readFully(i.readFully()))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
153	[BUG]  [BUGGY]  while(i.available()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.available()  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.available()  ==  -1)  {	  while(i.available()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
154	[BUG]  [BUGGY]  while(i.available()!=  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.available()!=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.available()!=  0)  {	  while(i.available()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
155	[BUG]  [BUGGY]  while(len.available()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len.available()!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len.available()!=  -1)  {	  while(i.available()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
156	[BUG]  [BUGGY]  while(i.available()  >=  -1)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.available()  >=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.available()  >=  -1)  {	  while(i.available()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
157	[BUG]  [BUGGY]  while(coll.available()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.available()!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.available()!=  -1)  {	  while(i.available()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
158	[BUG]  [BUGGY]  while(i.hasNext()  ||  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  ||  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  ||  coll.size()  >  0)  {	  while(i.hasNext()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
159	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.size()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.size()  <  =  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.size()  <  =  0)  {	  while(i.hasNext()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
160	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.size()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.size()  ==  0)  {	  while(i.hasNext()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
161	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.size()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.size()  >=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.size()  >=  0)  {	  while(i.hasNext()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
162	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.size()  >  1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.size()  >  1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.size()  >  1)  {	  while(i.hasNext()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
163	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.size()!=  0)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.size()!=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.size()!=  0)  {	  while(i.hasNext()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
164	[BUG]  [BUGGY]  while(i!=  null  &&(len  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(len  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(len  =  coll.read())!=  -1)  {	  while(i!=    null    &&(len    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
165	[BUG]  [BUGGY]  while(len!=  0  &&(len  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  0  &&(len  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  0  &&(len  =  i.read())!=  -1)  {	  while(i!=    null    &&(len    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
166	[BUG]  [BUGGY]  while(i!=  null  &&(len  =  col.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(len  =  col.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(len  =  col.read())!=  -1)  {	  while(i!=    null    &&(len    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
167	[BUG]  [BUGGY]  whilst(i!=  null  &&(len  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  whilst(i!=  null  &&(len  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	whilst(i!=  null  &&(len  =  i.read())!=  -1)  {	  while(i!=    null    &&(len    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
168	[BUG]  [BUGGY]  while(coll!=  null  &&(ch  =  col.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll!=  null  &&(ch  =  col.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll!=  null  &&(ch  =  col.read())!=  -1)  {	  while(i!=    null    &&(ch    =    col.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
169	[BUG]  [BUGGY]  while(coll!=  null  &&(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll!=  null  &&(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll!=  null  &&(ch  =  coll.read())!=  -1)  {	  while(i!=    null    &&(ch    =    col.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
170	[BUG]  [BUGGY]  while(len!=  0  &&(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  0  &&(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  0  &&(ch  =  coll.read())!=  -1)  {	  while(i!=    null    &&(ch    =    col.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
171	[BUG]  [BUGGY]  while((  ch  =  coll.readFully(len))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.readFully(len))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.readFully(len))!=  -1)  {	  while((    ch    =    IOUtils.readFully(len))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
172	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(len,  coll))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(len,  coll))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(len,  coll))!=  -1)  {	  while((    ch    =    IOUtils.readFully(len))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
173	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i),  len)!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(i),  len)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(i),  len)!=  -1)  {	  while((    ch    =    IOUtils.readFully(len))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
174	[BUG]  [BUGGY]  while((  ch  =  coll.readFully(len))!=  -1))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.readFully(len))!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.readFully(len))!=  -1))  {	  while((    ch    =    IOUtils.readFully(len))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
175	[BUG]  [BUGGY]  while(i!=  null  &&(ch  <  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  <  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  <  coll.read())!=  -1)  {	  while(i!=    null    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
176	[BUG]  [BUGGY]  while(i!=  null  &&(ch  <  len.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  <  len.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  <  len.read())!=  -1)  {	  while(i!=    null    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
177	[BUG]  [BUGGY]  while(i!=  null  &&(ch  <  coll.length())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  <  coll.length())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  <  coll.length())!=  -1)  {	  while(i!=    null    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
178	[BUG]  [BUGGY]  while(i!=  null  &&(ch  <  str.length())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  <  str.length())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  <  str.length())!=  -1)  {	  while(i!=    null    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
179	[BUG]  [BUGGY]  while(i!=  null  &&(ch  <  col.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  <  col.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  <  col.read())!=  -1)  {	  while(i!=    null    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
180	[BUG]  [BUGGY]  while(i!=  null  &&  coll.length()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&  coll.length()  >=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&  coll.length()  >=  0)  {	  while(i!=    null    &&    coll.length()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
181	[BUG]  [BUGGY]  while(i!=  null  &&  coll.length()  <  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&  coll.length()  <  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&  coll.length()  <  0)  {	  while(i!=    null    &&    coll.length()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
182	[BUG]  [BUGGY]  while(i!=  null  &&  coll.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&  coll.length()!=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&  coll.length()!=  0)  {	  while(i!=    null    &&    coll.length()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
183	[BUG]  [BUGGY]  while(len!=  0  &&  coll.length()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  0  &&  coll.length()  <  =  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  0  &&  coll.length()  <  =  0)  {	  while(i!=    null    &&    coll.length()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
184	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i  =  coll.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i  =  coll.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i  =  coll.read())  ==  -1)  {	  while(!hasHitEOF    &&(i    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
185	[BUG]  [BUGGY]  while(i!=  hasHitEOF  &&(i  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  hasHitEOF  &&(i  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  hasHitEOF  &&(i  =  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(i    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
186	[BUG]  [BUGGY]  while(i!=  0  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  0  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  0  &&(ch  =  i.read())!=  -1)  {	  while(len!=    0    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
187	[BUG]  [BUGGY]  while(i!=  len  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  len  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  len  &&(ch  =  i.read())!=  -1)  {	  while(len!=    0    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
188	[BUG]  [BUGGY]  while(len  >=  0  &&(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  >=  0  &&(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  >=  0  &&(ch  =  coll.read())!=  -1)  {	  while(len!=    0    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
189	[BUG]  [BUGGY]  while(len!=  0  &&(ch  <  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  0  &&(ch  <  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  0  &&(ch  <  i.read())!=  -1)  {	  while(len!=    0    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
190	[BUG]  [BUGGY]  while(len  >=  0  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  >=  0  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  >=  0  &&(ch  =  i.read())!=  -1)  {	  while(len!=    0    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
191	[BUG]  [BUGGY]  while(i.read()  >  -1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.read()  >  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.read()  >  -1)  {	  while(i.read()    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
192	[BUG]  [BUGGY]  while(i.read()  >>  -1)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.read()  >>  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.read()  >>  -1)  {	  while(i.read()    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
193	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next())!=  'n')  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next())!=  'n')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.charAt(i.next())!=  'n')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
194	[BUG]  [BUGGY]  while(i.hasNext()  ||  coll.charAt(i.next()  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  ||  coll.charAt(i.next()  -  1)!=  'n')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  ||  coll.charAt(i.next()  -  1)!=  'n')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
195	[BUG]  [BUGGY]  while(i.hasNext()  <  len  &&  coll.charAt(i.next()  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  <  len  &&  coll.charAt(i.next()  -  1)!=  'n')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  <  len  &&  coll.charAt(i.next()  -  1)!=  'n')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
196	[BUG]  [BUGGY]  while(i.hasNext()  zilei  &&  coll.charAt(i.next()  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  zilei  &&  coll.charAt(i.next()  -  1)!=  'n')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  zilei  &&  coll.charAt(i.next()  -  1)!=  'n')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
197	[BUG]  [BUGGY]  while(i.hasNext()  >  0  &&  coll.charAt(i.next()  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  >  0  &&  coll.charAt(i.next()  -  1)!=  'n')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  >  0  &&  coll.charAt(i.next()  -  1)!=  'n')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
198	[BUG]  [BUGGY]  while(i.hasNext()  >  &&  coll.charAt(i.next()  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  >  &&  coll.charAt(i.next()  -  1)!=  'n')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  >  &&  coll.charAt(i.next()  -  1)!=  'n')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
199	[BUG]  [BUGGY]  while(len  >  0  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  >  0  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  >  0  &&  coll.isEmpty())  {	  while(len!=    0    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
200	[BUG]  [BUGGY]  while(len  ==  0  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  ==  0  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  ==  0  &&  coll.isEmpty())  {	  while(len!=    0    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
201	[BUG]  [BUGGY]  while(len!=  0  ||  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  0  ||  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  0  ||  coll.isEmpty())  {	  while(len!=    0    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
202	[BUG]  [BUGGY]  while(i!=  0  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  0  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  0  &&  coll.isEmpty())  {	  while(len!=    0    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
203	[BUG]  [BUGGY]  while(len  >>  0  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  >>  0  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  >>  0  &&  coll.isEmpty())  {	  while(len!=    0    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
204	[BUG]  [BUGGY]  while(i.hasMoreTokens()  ||  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  ||  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  ||  coll.size()  >  0)  {	  while(i.hasMoreTokens()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
205	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.size()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.size()  <  =  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.size()  <  =  0)  {	  while(i.hasMoreTokens()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
206	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.size()  >  1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.size()  >  1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.size()  >  1)  {	  while(i.hasMoreTokens()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
207	[BUG]  [BUGGY]  while(coll.hasMoreTokens()  &&  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.hasMoreTokens()  &&  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.hasMoreTokens()  &&  coll.size()  >  0)  {	  while(i.hasMoreTokens()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
208	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.size()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.size()  ==  0)  {	  while(i.hasMoreTokens()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
209	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.size()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.size()  >=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.size()  >=  0)  {	  while(i.hasMoreTokens()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
210	[BUG]  [BUGGY]  while(len  ==  0  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  ==  0  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  ==  0  &&  coll.length()  >  0)  {	  while(i    ==    null    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
211	[BUG]  [BUGGY]  While(coll!=  null  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  While(coll!=  null  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	While(coll!=  null  &&  coll.length()  >  0)  {	  While(i!=    null    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
212	[BUG]  [BUGGY]  While(len!=  0  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  While(len!=  0  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	While(len!=  0  &&  coll.length()  >  0)  {	  While(i!=    null    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
213	[BUG]  [BUGGY]  While(i!=  null  &&  coll.length()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  While(i!=  null  &&  coll.length()  <  =  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	While(i!=  null  &&  coll.length()  <  =  0)  {	  While(i!=    null    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
214	[BUG]  [BUGGY]  While(i  ==  null  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  While(i  ==  null  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	While(i  ==  null  &&  coll.length()  >  0)  {	  While(i!=    null    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
215	[BUG]  [BUGGY]  while((  coll.read()  +  1)!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  coll.read()  +  1)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  coll.read()  +  1)!=  -1)  {	  while((    i.read()    +    1)!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
216	[BUG]  [BUGGY]  while((  ch.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch.read())!=  -1)  {	  while((    i.read()    +    1)!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
217	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i!=  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i!=  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i!=  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(ch!=    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
218	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len!=  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(len!=  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(len!=  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch!=    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
219	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i  ==  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i  ==  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i  ==  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(ch!=    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
220	[BUG]  [BUGGY]  while(i.hasMoreElements()  ||  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  ||  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  ||  coll.isEmpty())  {	  while(i.hasMoreElements()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
221	[BUG]  [BUGGY]  while(coll.hasMoreElements()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.hasMoreElements()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.hasMoreElements()  &&  coll.isEmpty())  {	  while(i.hasMoreElements()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
222	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  &&  coll.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  &&  coll.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.hasMoreElements()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
223	[BUG]  [BUGGY]  while(!coll.hasMoreElements()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!coll.hasMoreElements()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!coll.hasMoreElements()  &&  coll.isEmpty())  {	  while(i.hasMoreElements()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
224	[BUG]  [BUGGY]  while(len.hasMoreElements()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len.hasMoreElements()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len.hasMoreElements()  &&  coll.isEmpty())  {	  while(i.hasMoreElements()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
225	[BUG]  [BUGGY]  while(len!=  len  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  len  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  len  &&  coll.isEmpty())  {	  while(len!=    null    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
226	[BUG]  [BUGGY]  while(i.hasMoreTokens()  ||  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  ||  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  ||  coll.length()  >  0)  {	  while(i.hasMoreTokens()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
227	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.length()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.length()  <  =  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.length()  <  =  0)  {	  while(i.hasMoreTokens()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
228	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.length()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.length()  ==  0)  {	  while(i.hasMoreTokens()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
229	[BUG]  [BUGGY]  while(coll.hasMoreTokens()  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.hasMoreTokens()  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.hasMoreTokens()  &&  coll.length()  >  0)  {	  while(i.hasMoreTokens()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
230	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.length()!=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.length()!=  0)  {	  while(i.hasMoreTokens()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
231	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.length()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.length()  >=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.length()  >=  0)  {	  while(i.hasMoreTokens()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
232	[BUG]  [BUGGY]  while(coll!=  null  ||  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll!=  null  ||  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll!=  null  ||  coll.isEmpty())  {	  while(coll!=    null    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
233	[BUG]  [BUGGY]  while(coll  ==  null  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll  ==  null  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll  ==  null  &&  coll.isEmpty())  {	  while(coll!=    null    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
234	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken()  -  1)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken()  -  1)!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken()  -  1)!=  '-')  {	  while(i.hasMoreTokens()    &&    coll.charAt(i.nextToken())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
235	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken()  +  1)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken()  +  1)!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken()  +  1)!=  '-')  {	  while(i.hasMoreTokens()    &&    coll.charAt(i.nextToken())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
236	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken())  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken())  ==  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken())  ==  '-')  {	  while(i.hasMoreTokens()    &&    coll.charAt(i.nextToken())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
237	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(ch)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(ch)!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.charAt(ch)!=  '-')  {	  while(i.hasMoreTokens()    &&    coll.charAt(i.nextToken())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
238	[BUG]  [BUGGY]  while(i.hasMoreTokens()  ||  coll.charAt(i.nextToken())!=  '-')  {  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  ||  coll.charAt(i.nextToken())!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  ||  coll.charAt(i.nextToken())!=  '-')  {	  while(i.hasMoreTokens()    &&    coll.charAt(i.nextToken())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
239	[BUG]  [BUGGY]  while(!i.hasMoreTokens()  &&  coll.charAt(i.nextToken())!=  '-')  {  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasMoreTokens()  &&  coll.charAt(i.nextToken())!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasMoreTokens()  &&  coll.charAt(i.nextToken())!=  '-')  {	  while(i.hasMoreTokens()    &&    coll.charAt(i.nextToken())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
240	[BUG]  [BUGGY]  while(len  ==  0  &&(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  ==  0  &&(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  ==  0  &&(ch  =  coll.read())!=  -1)  {	  while(i    ==    null    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
241	[BUG]  [BUGGY]  while(i!=  null  &&(ch  =  coll.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  =  coll.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  =  coll.read())  ==  -1)  {	  while(i    ==    null    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
242	[BUG]  [BUGGY]  while((  ch  =  coll.readFully(len,  i.read())!=  -1))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.readFully(len,  i.read())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.readFully(len,  i.read())!=  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.read())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
243	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i,  coll.read())!=  -1))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(i,  coll.read())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(i,  coll.read())!=  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.read())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
244	[BUG]  [BUGGY]  while((  ch  =  coll.readFully(len,  len.read())!=  -1))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.readFully(len,  len.read())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.readFully(len,  len.read())!=  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.read())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
245	[BUG]  [BUGGY]  while((  ch  =  coll.readFully(len,  IOUtils.readFully(len))!=  -1))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.readFully(len,  IOUtils.readFully(len))!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.readFully(len,  IOUtils.readFully(len))!=  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.read())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
246	[BUG]  [BUGGY]  while((  ch  =  coll.readFully(len,  col.read())!=  -1))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.readFully(len,  col.read())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.readFully(len,  col.read())!=  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.read())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
247	[BUG]  [BUGGY]  while((  ch  =  coll.readFully(len,  len)!=  -1))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.readFully(len,  len)!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.readFully(len,  len)!=  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.read())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
248	[BUG]  [BUGGY]  while((  ch  =  coll.readFully(len,  coll.length())!=  -1))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.readFully(len,  coll.length())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.readFully(len,  coll.length())!=  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.length())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
249	[BUG]  [BUGGY]  while((  ch  =  coll.readFully(len,  len.length())!=  -1))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.readFully(len,  len.length())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.readFully(len,  len.length())!=  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.length())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
250	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i,  coll.length())!=  -1))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(i,  coll.length())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(i,  coll.length())!=  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.length())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
251	[BUG]  [BUGGY]  while((  ch  =  coll.readFully(len,  col.length())!=  -1))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.readFully(len,  col.length())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.readFully(len,  col.length())!=  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.length())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
252	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(len,  coll.length())!=  0))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(len,  coll.length())!=  0))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(len,  coll.length())!=  0))  {	  while((    ch    =    IOUtils.readFully(len,    coll.length())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
253	[BUG]  [BUGGY]  while((  ch  =  coll.length())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.length())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.length())!=  -1)  {	  while((    ch    =    IOUtils.readFully(len,    coll.length())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
254	[BUG]  [BUGGY]  while(i.hasNext()  ||  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  ||  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  ||  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
255	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE)||  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE)||  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE)||  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
256	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE,  read))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE,  read))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE,  read))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
257	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE,  ch))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE,  ch))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE,  ch))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
258	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE),  read  >  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE),  read  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE),  read  >  0)  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
259	[BUG]  [BUGGY]  while(i.hasNext()  >  0  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  >  0  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  >  0  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
260	[BUG]  [BUGGY]  while((  ch  =  i.next())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  i.next())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  i.next())!=  -1)  {	  while((    i.hasNext())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
261	[BUG]  [BUGGY]  while((  coll.hasNext())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  coll.hasNext())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  coll.hasNext())!=  -1)  {	  while((    i.hasNext())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
262	[BUG]  [BUGGY]  while((  i.next())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  i.next())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  i.next())!=  -1)  {	  while((    i.hasNext())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
263	[BUG]  [BUGGY]  while((  i.hasNext())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  i.hasNext())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  i.hasNext())  ==  -1)  {	  while((    i.hasNext())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
264	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.read()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&  coll.read()!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&  coll.read()!=  -1)  {	  while(!hasHitEOF    &&(i.read()!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
265	[BUG]  [BUGGY]  while(!hasHitEOF  &&(coll.read()!=  -1))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(coll.read()!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(coll.read()!=  -1))  {	  while(!hasHitEOF    &&(i.read()!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
266	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len.read()!=  -1))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(len.read()!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(len.read()!=  -1))  {	  while(!hasHitEOF    &&(i.read()!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
267	[BUG]  [BUGGY]  while(i.hasMoreElements()  ||  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  ||  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  ||  coll.length()  >  0)  {	  while(i.hasMoreElements()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
268	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  &&  coll.length()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  &&  coll.length()  ==  0)  {	  while(i.hasMoreElements()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
269	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.length()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  &&  coll.length()  <  =  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  &&  coll.length()  <  =  0)  {	  while(i.hasMoreElements()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
270	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  &&  coll.length()!=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  &&  coll.length()!=  0)  {	  while(i.hasMoreElements()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
271	[BUG]  [BUGGY]  while(coll.hasMoreElements()  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.hasMoreElements()  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.hasMoreElements()  &&  coll.length()  >  0)  {	  while(i.hasMoreElements()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
272	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.length()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  &&  coll.length()  >=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  &&  coll.length()  >=  0)  {	  while(i.hasMoreElements()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
273	[BUG]  [BUGGY]  while(i.isDirectory()  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isDirectory()  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isDirectory()  &&  coll.length()  >  0)  {	  while(i.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
274	[BUG]  [BUGGY]  while(!i.isDirectory())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.isDirectory())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.isDirectory())  {	  while(i.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
275	[BUG]  [BUGGY]  while(i.isDirectory()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isDirectory()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isDirectory()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
276	[BUG]  [BUGGY]  while(i.isDirectory()  &&  coll.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isDirectory()  &&  coll.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isDirectory()  &&  coll.hasMoreElements())  {	  while(i.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
277	[BUG]  [BUGGY]  while(i.isDirectory()  &&  coll.equals(ch))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isDirectory()  &&  coll.equals(ch))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isDirectory()  &&  coll.equals(ch))  {	  while(i.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
278	[BUG]  [BUGGY]  while(i.isDirectory()  &&  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isDirectory()  &&  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isDirectory()  &&  coll.size()  >  0)  {	  while(i.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
279	[BUG]  [BUGGY]  while(i.isDirectory()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isDirectory()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isDirectory()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME))  {	  while(i.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
280	[BUG]  [BUGGY]  while(len!=  0  &&  coll.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  0  &&  coll.length()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  0  &&  coll.length()  ==  0)  {	  while(i!=    null    &&    coll.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
281	[BUG]  [BUGGY]  while(coll!=  null  &&  coll.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll!=  null  &&  coll.length()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll!=  null  &&  coll.length()  ==  0)  {	  while(i!=    null    &&    coll.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
282	[BUG]  [BUGGY]  while(coll!=  null  &&  coll.hasMoreTokens())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll!=  null  &&  coll.hasMoreTokens())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll!=  null  &&  coll.hasMoreTokens())  {	  while(i!=    null    &&    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
283	[BUG]  [BUGGY]  while(len!=  0  &&  coll.hasMoreTokens())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  0  &&  coll.hasMoreTokens())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  0  &&  coll.hasMoreTokens())  {	  while(i!=    null    &&    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
284	[BUG]  [BUGGY]  while(i  ==  null  &&  coll.hasMoreTokens())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i  ==  null  &&  coll.hasMoreTokens())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i  ==  null  &&  coll.hasMoreTokens())  {	  while(i!=    null    &&    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
285	[BUG]  [BUGGY]  whilst(i!=  null  &&  coll.hasMoreTokens())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  whilst(i!=  null  &&  coll.hasMoreTokens())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	whilst(i!=  null  &&  coll.hasMoreTokens())  {	  while(i!=    null    &&    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
286	[BUG]  [BUGGY]  while(i!=  null  &&  coll.hasMoreTokens()  ||  coll.hasMoreTokens())  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&  coll.hasMoreTokens()  ||  coll.hasMoreTokens())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&  coll.hasMoreTokens()  ||  coll.hasMoreTokens())  {	  while(i!=    null    &&    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
287	[BUG]  [BUGGY]  while(i.isEmpty()  ||  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  ||  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  ||  coll.isEmpty())  {	  while(i.isEmpty()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
288	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.isEmpty()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.isEmpty()  &&  coll.isEmpty())  {	  while(i.isEmpty()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
289	[BUG]  [BUGGY]  while(coll.isEmpty()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.isEmpty()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.isEmpty()  &&  coll.isEmpty())  {	  while(i.isEmpty()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
290	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.isEmpty()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
291	[BUG]  [BUGGY]  while(!coll.isEmpty()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!coll.isEmpty()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!coll.isEmpty()  &&  coll.isEmpty())  {	  while(i.isEmpty()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
292	[BUG]  [BUGGY]  while(len.isEmpty()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len.isEmpty()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len.isEmpty()  &&  coll.isEmpty())  {	  while(i.isEmpty()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
293	[BUG]  [BUGGY]  while(i!=  null  &&(ch  <  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  <  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  <  =  coll.read())!=  -1)  {	  while(i!=    null    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
294	[BUG]  [BUGGY]  while(i!=  null  &&(ch  >=  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  >=  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  >=  i.read())!=  -1)  {	  while(i!=    null    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
295	[BUG]  [BUGGY]  while(i  ==  null  &&(ch  <  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i  ==  null  &&(ch  <  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i  ==  null  &&(ch  <  i.read())!=  -1)  {	  while(i!=    null    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
296	[BUG]  [BUGGY]  while(i!=  null  &&(ch  <  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  <  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  <  i.read())  ==  -1)  {	  while(i!=    null    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
297	[BUG]  [BUGGY]  while(len  >=  0  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  >=  0  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  >=  0  &&  coll.length()  >  0)  {	  while(len!=    0    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
298	[BUG]  [BUGGY]  while(len  >  0  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  >  0  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  >  0  &&  coll.length()  >  0)  {	  while(len!=    0    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
299	[BUG]  [BUGGY]  while(len  >=  0  &&  coll.length()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  >=  0  &&  coll.length()  <  =  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  >=  0  &&  coll.length()  <  =  0)  {	  while(len!=    0    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
300	[BUG]  [BUGGY]  while(len  >>  0  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  >>  0  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  >>  0  &&  coll.length()  >  0)  {	  while(len!=    0    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
301	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(read);	  InputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
302	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream();  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  new  ByteArrayInputStream();	  InputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
303	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(0);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(0);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(0);	  InputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
304	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(ch);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(ch);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(ch);	  InputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
305	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(len);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(len);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(len);	  InputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
306	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(read);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(read);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  new  ByteArrayInputStream(read);	  InputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
307	[BUG]  [BUGGY]  while((  coll.get())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  coll.get())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  coll.get())!=  -1)  {	  while((    i.get())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
308	[BUG]  [BUGGY]  while((  ch  =  i.get())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  i.get())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  i.get())!=  -1)  {	  while((    i.get())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
309	[BUG]  [BUGGY]  while((  i  =  coll.get())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  i  =  coll.get())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  i  =  coll.get())!=  -1)  {	  while((    i.get())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
310	[BUG]  [BUGGY]  while((  i.get())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  i.get())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  i.get())  ==  -1)  {	  while((    i.get())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
311	[BUG]  [BUGGY]  while(i.hasMoreTokens()  ||  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  ||  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  ||  coll.isEmpty())  {	  while(i.hasMoreTokens()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
312	[BUG]  [BUGGY]  while(coll.hasMoreTokens()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.hasMoreTokens()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.hasMoreTokens()  &&  coll.isEmpty())  {	  while(i.hasMoreTokens()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
313	[BUG]  [BUGGY]  while(!i.hasMoreTokens()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasMoreTokens()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasMoreTokens()  &&  coll.isEmpty())  {	  while(i.hasMoreTokens()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
314	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.hasMoreTokens()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
315	[BUG]  [BUGGY]  while(!coll.hasMoreTokens()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!coll.hasMoreTokens()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!coll.hasMoreTokens()  &&  coll.isEmpty())  {	  while(i.hasMoreTokens()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
316	[BUG]  [BUGGY]  while((  ch  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  i.read())  ==  -1)  {	  while((    ch    =    coll.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
317	[BUG]  [BUGGY]  while((  ch  =  coll.get())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.get())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.get())!=  -1)  {	  while((    ch    =    coll.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
318	[BUG]  [BUGGY]  while(i.hasNext()  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
319	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
320	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
321	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.toString(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.toString(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.toString(CharsetNames.UTF_8))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
322	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAME))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
323	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
324	[BUG]  [BUGGY]  while((  coll.read()  +  ch)!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  coll.read()  +  ch)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  coll.read()  +  ch)!=  -1)  {	  while((    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
325	[BUG]  [BUGGY]  while((  coll.read()  -  1)!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  coll.read()  -  1)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  coll.read()  -  1)!=  -1)  {	  while((    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
326	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedInputStream(i.inputStream());  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  new  BufferedInputStream(i.inputStream());  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  new  BufferedInputStream(i.inputStream());	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
327	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  read);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  read);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  IOUtils.readFully(i,  read);	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
328	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE)!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE)!=  -1)  {	  while(!hasHitEOF    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
329	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  ch)!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  ch)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()  <  ch)!=  -1)  {	  while(!hasHitEOF    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
330	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i  <  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i  <  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i  <  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
331	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len  <  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(len  <  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(len  <  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
332	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE)  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE)  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE)  ==  -1)  {	  while(!hasHitEOF    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
333	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE)  >>  -1)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE)  >>  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE)  >>  -1)  {	  while(!hasHitEOF    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
334	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  len)!=  -1)  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  len)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()  <  len)!=  -1)  {	  while(!hasHitEOF    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
335	[BUG]  [BUGGY]  while(i.hasNext()  ||  coll.isEnabled(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  ||  coll.isEnabled(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  ||  coll.isEnabled(CharsetNames.UTF_8))  {	  while(i.hasNext()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
336	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_8)||  coll.isEnabled(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_8)||  coll.isEnabled(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_8)||  coll.isEnabled(CharsetNames.UTF_8))  {	  while(i.hasNext()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
337	[BUG]  [BUGGY]  while(i.hasNext()  >  0  &&  coll.isEnabled(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  >  0  &&  coll.isEnabled(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  >  0  &&  coll.isEnabled(CharsetNames.UTF_8))  {	  while(i.hasNext()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
338	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(CharsetNames.US_ASCII))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(CharsetNames.US_ASCII))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(CharsetNames.US_ASCII))  {	  while(i.hasNext()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
339	[BUG]  [BUGGY]  while(i.hasNext()  <  len  &&  coll.isEnabled(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  <  len  &&  coll.isEnabled(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  <  len  &&  coll.isEnabled(CharsetNames.UTF_8))  {	  while(i.hasNext()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
340	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_8)||  coll.isEnabled(CharsetNames.US_ASCII))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_8)||  coll.isEnabled(CharsetNames.US_ASCII))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_8)||  coll.isEnabled(CharsetNames.US_ASCII))  {	  while(i.hasNext()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
341	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  ==  ch)!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()  ==  ch)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()  ==  ch)!=  -1)  {	  while(!hasHitEOF    &&(ch    ==    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
342	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(len  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(len  =  i.read())  ==  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
343	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  <  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  <  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  <  i.read())  ==  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
344	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  >  -1))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()  >  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()  >  -1))  {	  while(!hasHitEOF    &&(ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
345	[BUG]  [BUGGY]  while(i.isEmpty()  ||  coll.equals(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  ||  coll.equals(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  ||  coll.equals(CharsetNames.UTF_8))  {	  while(i.isEmpty()    &&    coll.equals(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
346	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  coll.equals(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.isEmpty()  &&  coll.equals(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.isEmpty()  &&  coll.equals(CharsetNames.UTF_8))  {	  while(i.isEmpty()    &&    coll.equals(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
347	[BUG]  [BUGGY]  while(coll.isEmpty()  &&  coll.equals(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.isEmpty()  &&  coll.equals(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.isEmpty()  &&  coll.equals(CharsetNames.UTF_8))  {	  while(i.isEmpty()    &&    coll.equals(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
348	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.equals(CharsetNames.US_ASCII))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.equals(CharsetNames.US_ASCII))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.equals(CharsetNames.US_ASCII))  {	  while(i.isEmpty()    &&    coll.equals(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
349	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.toString(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.toString(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.toString(CharsetNames.UTF_8))  {	  while(i.isEmpty()    &&    coll.equals(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
350	[BUG]  [BUGGY]  whilst(i.isEmpty()  &&  coll.equals(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  whilst(i.isEmpty()  &&  coll.equals(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	whilst(i.isEmpty()  &&  coll.equals(CharsetNames.UTF_8))  {	  while(i.isEmpty()    &&    coll.equals(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
351	[BUG]  [BUGGY]  while(len!=  0  &&  coll.hasNext())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  0  &&  coll.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  0  &&  coll.hasNext())  {	  while(i!=    null    &&    coll.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
352	[BUG]  [BUGGY]  while(coll!=  null  &&  coll.hasNext())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll!=  null  &&  coll.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll!=  null  &&  coll.hasNext())  {	  while(i!=    null    &&    coll.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
353	[BUG]  [BUGGY]  while(i  ==  null  &&  coll.hasNext())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i  ==  null  &&  coll.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i  ==  null  &&  coll.hasNext())  {	  while(i!=    null    &&    coll.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
354	[BUG]  [BUGGY]  while(i!=  null  &&  coll.next())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&  coll.next())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&  coll.next())  {	  while(i!=    null    &&    coll.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
355	[BUG]  [BUGGY]  while(i  >=  null  &&  coll.hasNext())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i  >=  null  &&  coll.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i  >=  null  &&  coll.hasNext())  {	  while(i!=    null    &&    coll.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
356	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(len);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(len);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.write(len);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
357	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read);  coll.write(len);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read);  coll.write(len);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read);  coll.write(len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.write(len);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
358	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(ch);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(ch);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(ch);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.write(len);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
359	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream();  coll.write(ch);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream();  coll.write(ch);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  new  ByteArrayOutputStream();  coll.write(ch);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.write(len);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
360	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(ch,  read);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(ch,  read);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(ch,  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.write(len);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
361	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream();  coll.write(ch);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream();  coll.write(ch);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  new  ByteArrayInputStream();  coll.write(ch);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.write(len);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
362	[BUG]  [BUGGY]  while(i.isEmpty()  ||  coll.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  ||  coll.length()!=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  ||  coll.length()!=  0)  {	  while(i.isEmpty()    &&    coll.length()!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
363	[BUG]  [BUGGY]  while(coll.isEmpty()  &&  coll.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.isEmpty()  &&  coll.length()!=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.isEmpty()  &&  coll.length()!=  0)  {	  while(i.isEmpty()    &&    coll.length()!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
364	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  coll.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.isEmpty()  &&  coll.length()!=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.isEmpty()  &&  coll.length()!=  0)  {	  while(i.isEmpty()    &&    coll.length()!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
365	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  ==  IOUtils.readFully(len))!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  ==  IOUtils.readFully(len))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  ==  IOUtils.readFully(len))!=  -1)  {	  while(!hasHitEOF    &&(ch    =    IOUtils.readFully(len))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
366	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch!=  IOUtils.readFully(len))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch!=  IOUtils.readFully(len))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch!=  IOUtils.readFully(len))!=  -1)  {	  while(!hasHitEOF    &&(ch    =    IOUtils.readFully(len))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
367	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  <  =  IOUtils.readFully(len))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  <  =  IOUtils.readFully(len))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  <  =  IOUtils.readFully(len))!=  -1)  {	  while(!hasHitEOF    &&(ch    =    IOUtils.readFully(len))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
368	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len  =  IOUtils.readFully(ch))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(len  =  IOUtils.readFully(ch))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(len  =  IOUtils.readFully(ch))!=  -1)  {	  while(!hasHitEOF    &&(ch    =    IOUtils.readFully(len))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
369	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch!=  IOUtils.readFully(i,  len))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch!=  IOUtils.readFully(i,  len))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch!=  IOUtils.readFully(i,  len))!=  -1)  {	  while(!hasHitEOF    &&(ch    =    IOUtils.readFully(len))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
370	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch!=  IOUtils.readFully(i))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch!=  IOUtils.readFully(i))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch!=  IOUtils.readFully(i))!=  -1)  {	  while(!hasHitEOF    &&(ch    =    IOUtils.readFully(len))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
371	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch!=  IOUtils.readFully(len,  coll))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch!=  IOUtils.readFully(len,  coll))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch!=  IOUtils.readFully(len,  coll))!=  -1)  {	  while(!hasHitEOF    &&(ch    =    IOUtils.readFully(len))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
372	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()!=  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()!=  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()!=  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(ch!=    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
373	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len!=  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(len!=  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(len!=  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(ch!=    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
374	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len  >=  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(len  >=  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(len  >=  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(ch!=    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
375	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch!=  coll.length())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch!=  coll.length())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch!=  coll.length())!=  -1)  {	  while(!hasHitEOF    &&(ch!=    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
376	[BUG]  [BUGGY]  while(len  <  0  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  <  0  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  <  0  &&  coll.isEmpty())  {	  while(len    >=    0    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
377	[BUG]  [BUGGY]  while(i!=  len  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  len  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  len  &&  coll.isEmpty())  {	  while(len    >=    0    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
378	[BUG]  [BUGGY]  Integer  i  =  coll.readInt()  +  1;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  Integer  i  =  coll.readInt()  +  1;  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	Integer  i  =  coll.readInt()  +  1;	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
379	[BUG]  [BUGGY]  Integer  i  =  coll.intValue();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  Integer  i  =  coll.intValue();  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	Integer  i  =  coll.intValue();	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
380	[BUG]  [BUGGY]  Integer  i  =  coll.getIntValue();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  Integer  i  =  coll.getIntValue();  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	Integer  i  =  coll.getIntValue();	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
381	[BUG]  [BUGGY]  Integer  i  =  coll.readInt(ch);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  Integer  i  =  coll.readInt(ch);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	Integer  i  =  coll.readInt(ch);	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
382	[BUG]  [BUGGY]  Integer  i  =  coll.getIntValue(ch);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  Integer  i  =  coll.getIntValue(ch);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	Integer  i  =  coll.getIntValue(ch);	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
383	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  <  coll.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  <  coll.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  <  coll.read())  ==  -1)  {	  while(!hasHitEOF    &&(ch    =    coll.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
384	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  <  =  coll.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  <  =  coll.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  <  =  coll.read())  ==  -1)  {	  while(!hasHitEOF    &&(ch    =    coll.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
385	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  =  coll.read()  -  1)  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  =  coll.read()  -  1)  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  =  coll.read()  -  1)  ==  -1)  {	  while(!hasHitEOF    &&(ch    =    coll.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
386	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len  =  coll.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(len  =  coll.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(len  =  coll.read())  ==  -1)  {	  while(!hasHitEOF    &&(ch    =    coll.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
387	[BUG]  [BUGGY]  while((  coll.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  coll.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  coll.read())  ==  -1)  {	  while((    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
388	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i  <  ch.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i  <  ch.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i  <  ch.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
389	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  =  ch)!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  =  ch)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()  <  =  ch)!=  -1)  {	  while(!hasHitEOF    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
390	[BUG]  [BUGGY]  while(coll!=  null  &&  coll.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll!=  null  &&  coll.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll!=  null  &&  coll.hasMoreElements())  {	  while(i!=    null    &&    coll.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
391	[BUG]  [BUGGY]  while(len!=  0  &&  coll.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  0  &&  coll.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  0  &&  coll.hasMoreElements())  {	  while(i!=    null    &&    coll.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
392	[BUG]  [BUGGY]  while(i  ==  null  &&  coll.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i  ==  null  &&  coll.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i  ==  null  &&  coll.hasMoreElements())  {	  while(i!=    null    &&    coll.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
393	[BUG]  [BUGGY]  whilst(i!=  null  &&  coll.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  whilst(i!=  null  &&  coll.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	whilst(i!=  null  &&  coll.hasMoreElements())  {	  while(i!=    null    &&    coll.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
394	[BUG]  [BUGGY]  while(i!=  null  &&  coll.hasMoreElements()  ||  coll.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&  coll.hasMoreElements()  ||  coll.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&  coll.hasMoreElements()  ||  coll.hasMoreElements())  {	  while(i!=    null    &&    coll.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
395	[BUG]  [BUGGY]  while(i.hasNext().equals(ch)&&  coll.next().equals(ch))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext().equals(ch)&&  coll.next().equals(ch))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext().equals(ch)&&  coll.next().equals(ch))  {	  while(i.hasNext()    &&    coll.next().equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
396	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.next().equals(ch,  read))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.next().equals(ch,  read))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.next().equals(ch,  read))  {	  while(i.hasNext()    &&    coll.next().equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
397	[BUG]  [BUGGY]  while(i.hasNext()  ||  coll.next().equals(ch))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  ||  coll.next().equals(ch))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  ||  coll.next().equals(ch))  {	  while(i.hasNext()    &&    coll.next().equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
398	[BUG]  [BUGGY]  while(coll.hasNext()  &&  coll.next().equals(ch))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.hasNext()  &&  coll.next().equals(ch))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.hasNext()  &&  coll.next().equals(ch))  {	  while(i.hasNext()    &&    coll.next().equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
399	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.next().equals(ch  +  1))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.next().equals(ch  +  1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.next().equals(ch  +  1))  {	  while(i.hasNext()    &&    coll.next().equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
400	[BUG]  [BUGGY]  while(i.hasNext()  ||  coll.next().length  >  0)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  ||  coll.next().length  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  ||  coll.next().length  >  0)  {	  while(i.hasNext()    &&    coll.next().length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
401	[BUG]  [BUGGY]  while(coll.hasNext()  &&  coll.next().length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.hasNext()  &&  coll.next().length  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.hasNext()  &&  coll.next().length  >  0)  {	  while(i.hasNext()    &&    coll.next().length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
402	[BUG]  [BUGGY]  while(i.hasNext().length  &&  coll.next().length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext().length  &&  coll.next().length  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext().length  &&  coll.next().length  >  0)  {	  while(i.hasNext()    &&    coll.next().length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
403	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.next().length  >  1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.next().length  >  1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.next().length  >  1)  {	  while(i.hasNext()    &&    coll.next().length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
404	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.next().length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.next().length  <  =  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.next().length  <  =  0)  {	  while(i.hasNext()    &&    coll.next().length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
405	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
406	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
407	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
408	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
409	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
410	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
411	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken())!=  '/')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken())!=  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken())!=  '/')  {	  while(i.hasMoreTokens()    &&    coll.charAt(i.nextToken()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
412	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken()  +  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken()  +  1)!=  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken()  +  1)!=  '/')  {	  while(i.hasMoreTokens()    &&    coll.charAt(i.nextToken()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
413	[BUG]  [BUGGY]  while(i.hasMoreTokens()  ||  coll.charAt(i.nextToken()  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  ||  coll.charAt(i.nextToken()  -  1)!=  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  ||  coll.charAt(i.nextToken()  -  1)!=  '/')  {	  while(i.hasMoreTokens()    &&    coll.charAt(i.nextToken()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
414	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken()  -  1)  ==  '/')  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken()  -  1)  ==  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken()  -  1)  ==  '/')  {	  while(i.hasMoreTokens()    &&    coll.charAt(i.nextToken()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
415	[BUG]  [BUGGY]  while(!i.hasMoreTokens()  &&  coll.charAt(i.nextToken()  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasMoreTokens()  &&  coll.charAt(i.nextToken()  -  1)!=  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasMoreTokens()  &&  coll.charAt(i.nextToken()  -  1)!=  '/')  {	  while(i.hasMoreTokens()    &&    coll.charAt(i.nextToken()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
416	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken()).charAt(0)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken()).charAt(0)!=  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken()).charAt(0)!=  '/')  {	  while(i.hasMoreTokens()    &&    coll.charAt(i.nextToken()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
417	[BUG]  [BUGGY]  while(i.hasNext()  ||  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  ||  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  ||  coll.isEmpty())  {	  while(i.hasNext()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
418	[BUG]  [BUGGY]  while(coll.hasNext()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.hasNext()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.hasNext()  &&  coll.isEmpty())  {	  while(i.hasNext()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
419	[BUG]  [BUGGY]  while(i.hasNext()  <  len  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  <  len  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  <  len  &&  coll.isEmpty())  {	  while(i.hasNext()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
420	[BUG]  [BUGGY]  while(len.hasNext()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len.hasNext()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len.hasNext()  &&  coll.isEmpty())  {	  while(i.hasNext()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
421	[BUG]  [BUGGY]  while(i.hasNext()  =  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  =  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  =  coll.isEmpty())  {	  while(i.hasNext()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
422	[BUG]  [BUGGY]  while(i.hasNext()  ==  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  ==  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  ==  coll.isEmpty())  {	  while(i.hasNext()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
423	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len  <  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(len  <  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(len  <  =  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
424	[BUG]  [BUGGY]  while(i!=  null  &&(ch  =  col.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  =  col.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  =  col.read())  ==  -1)  {	  while(i!=    null    &&(ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
425	[BUG]  [BUGGY]  while(i  ==  null  &&(ch  =  coll.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i  ==  null  &&(ch  =  coll.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i  ==  null  &&(ch  =  coll.read())  ==  -1)  {	  while(i!=    null    &&(ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
426	[BUG]  [BUGGY]  while(coll!=  null  ||  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll!=  null  ||  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll!=  null  ||  coll.length()  >  0)  {	  while(coll!=    null    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
427	[BUG]  [BUGGY]  while(coll!=  null  &&  coll.length()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll!=  null  &&  coll.length()  <  =  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll!=  null  &&  coll.length()  <  =  0)  {	  while(coll!=    null    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
428	[BUG]  [BUGGY]  while(coll  ==  null  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll  ==  null  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll  ==  null  &&  coll.length()  >  0)  {	  while(coll!=    null    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
429	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.charAt(ch)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.charAt(ch)!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.charAt(ch)!=  '-')  {	  while(i.isEmpty()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
430	[BUG]  [BUGGY]  while(i.isEmpty()  ||  coll.charAt(i.next())!=  '-')  {  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  ||  coll.charAt(i.next())!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  ||  coll.charAt(i.next())!=  '-')  {	  while(i.isEmpty()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
431	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  coll.charAt(i.next())!=  '-')  {  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.isEmpty()  &&  coll.charAt(i.next())!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.isEmpty()  &&  coll.charAt(i.next())!=  '-')  {	  while(i.isEmpty()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
432	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.charAt(i.next()  -  1)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.charAt(i.next()  -  1)!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.charAt(i.next()  -  1)!=  '-')  {	  while(i.isEmpty()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
433	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.charAt(i.next())  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.charAt(i.next())  ==  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.charAt(i.next())  ==  '-')  {	  while(i.isEmpty()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
434	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.charAt(i.next()  +  1)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.charAt(i.next()  +  1)!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.charAt(i.next()  +  1)!=  '-')  {	  while(i.isEmpty()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
435	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  coll.equals(ch))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.isEmpty()  &&  coll.equals(ch))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.isEmpty()  &&  coll.equals(ch))  {	  while(i.isEmpty()    &&    coll.equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
436	[BUG]  [BUGGY]  while(i.isEmpty()  ||  coll.equals(ch))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  ||  coll.equals(ch))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  ||  coll.equals(ch))  {	  while(i.isEmpty()    &&    coll.equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
437	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.equals(ch)||  coll.equals(ch))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.equals(ch)||  coll.equals(ch))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.equals(ch)||  coll.equals(ch))  {	  while(i.isEmpty()    &&    coll.equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
438	[BUG]  [BUGGY]  while(coll.isEmpty()  &&  coll.equals(ch))  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.isEmpty()  &&  coll.equals(ch))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.isEmpty()  &&  coll.equals(ch))  {	  while(i.isEmpty()    &&    coll.equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
439	[BUG]  [BUGGY]  while(!coll.isEmpty()  &&  coll.equals(ch))  {  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!coll.isEmpty()  &&  coll.equals(ch))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!coll.isEmpty()  &&  coll.equals(ch))  {	  while(i.isEmpty()    &&    coll.equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
440	[BUG]  [BUGGY]  while(len.isEmpty()  &&  coll.equals(ch))  {  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len.isEmpty()  &&  coll.equals(ch))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len.isEmpty()  &&  coll.equals(ch))  {	  while(i.isEmpty()    &&    coll.equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
441	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(len,  col.read())!=  -1))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(len,  col.read())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(len,  col.read())!=  -1))  {	  while((    ch    =    col.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
442	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  >>  -1))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()  >>  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()  >>  -1))  {	  while(!hasHitEOF    &&(i.read()    >=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
443	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  >=  0))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()  >=  0))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()  >=  0))  {	  while(!hasHitEOF    &&(i.read()    >=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
444	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.read()  >=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&  coll.read()  >=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&  coll.read()  >=  -1)  {	  while(!hasHitEOF    &&(i.read()    >=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
445	[BUG]  [BUGGY]  while(!coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!coll.isEmpty())  {	  while(!i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
446	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.isEmpty()  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.isEmpty()  &&  coll.length()  >  0)  {	  while(!i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
447	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  coll.endsWith( ".java "))  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.isEmpty()  &&  coll.endsWith( ".java "))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.isEmpty()  &&  coll.endsWith( ".java "))  {	  while(!i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
448	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  coll.charAt(ch)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.isEmpty()  &&  coll.charAt(ch)!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.isEmpty()  &&  coll.charAt(ch)!=  '-')  {	  while(!i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
449	[BUG]  [BUGGY]  while(i.hasNext()  ||  coll.charAt(i.next())!=  '-')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  ||  coll.charAt(i.next())!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  ||  coll.charAt(i.next())!=  '-')  {	  while(i.hasNext()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
450	[BUG]  [BUGGY]  while(i.hasNext()  <  len  &&  coll.charAt(i.next())!=  '-')  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  <  len  &&  coll.charAt(i.next())!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  <  len  &&  coll.charAt(i.next())!=  '-')  {	  while(i.hasNext()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
451	[BUG]  [BUGGY]  while(i.hasNext()  >  0  &&  coll.charAt(i.next())!=  '-')  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  >  0  &&  coll.charAt(i.next())!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  >  0  &&  coll.charAt(i.next())!=  '-')  {	  while(i.hasNext()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
452	[BUG]  [BUGGY]  while(i.hasNext()  zilei  &&  coll.charAt(i.next())!=  '-')  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  zilei  &&  coll.charAt(i.next())!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  zilei  &&  coll.charAt(i.next())!=  '-')  {	  while(i.hasNext()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
453	[BUG]  [BUGGY]  while(i.hasNext()!=  '-'  &&  coll.charAt(i.next())!=  '-')  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()!=  '-'  &&  coll.charAt(i.next())!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()!=  '-'  &&  coll.charAt(i.next())!=  '-')  {	  while(i.hasNext()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
454	[BUG]  [BUGGY]  while(i.hasNext()!=  ch  &&  coll.charAt(i.next())!=  '-')  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()!=  ch  &&  coll.charAt(i.next())!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()!=  ch  &&  coll.charAt(i.next())!=  '-')  {	  while(i.hasNext()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
455	[BUG]  [BUGGY]  while((  ch  =  i.read())  >=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  i.read())  >=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  i.read())  >=  -1)  {	  while((    ch    =    coll.read())    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
456	[BUG]  [BUGGY]  while(coll.hasMoreElements()  ||  coll.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.hasMoreElements()  ||  coll.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.hasMoreElements()  ||  coll.hasMoreElements())  {	  while(i.hasMoreElements()    ||    coll.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
457	[BUG]  [BUGGY]  while(len.hasMoreElements()  ||  coll.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len.hasMoreElements()  ||  coll.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len.hasMoreElements()  ||  coll.hasMoreElements())  {	  while(i.hasMoreElements()    ||    coll.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
458	[BUG]  [BUGGY]  while(!coll.hasMoreElements()  ||  coll.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!coll.hasMoreElements()  ||  coll.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!coll.hasMoreElements()  ||  coll.hasMoreElements())  {	  while(i.hasMoreElements()    ||    coll.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
459	[BUG]  [BUGGY]  while(i.hasNext()  ||  coll.charAt(i.next()  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  ||  coll.charAt(i.next()  -  1)!=  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  ||  coll.charAt(i.next()  -  1)!=  '/')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
460	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next())!=  '/')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next())!=  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.charAt(i.next())!=  '/')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
461	[BUG]  [BUGGY]  while(i.hasNext()  <  len  &&  coll.charAt(i.next()  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  <  len  &&  coll.charAt(i.next()  -  1)!=  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  <  len  &&  coll.charAt(i.next()  -  1)!=  '/')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
462	[BUG]  [BUGGY]  while(i.hasNext()  zilei  &&  coll.charAt(i.next()  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  zilei  &&  coll.charAt(i.next()  -  1)!=  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  zilei  &&  coll.charAt(i.next()  -  1)!=  '/')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
463	[BUG]  [BUGGY]  while(i.hasNext()  >  0  &&  coll.charAt(i.next()  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  >  0  &&  coll.charAt(i.next()  -  1)!=  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  >  0  &&  coll.charAt(i.next()  -  1)!=  '/')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
464	[BUG]  [BUGGY]  while(i.hasNext()  >  &&  coll.charAt(i.next()  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  >  &&  coll.charAt(i.next()  -  1)!=  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  >  &&  coll.charAt(i.next()  -  1)!=  '/')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
465	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read);  coll.write(ch);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read);  coll.write(ch);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read);  coll.write(ch);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.write(ch);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
466	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(ch,  0);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(ch,  0);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(ch,  0);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.write(ch);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
467	[BUG]  [BUGGY]  while(i.hasMoreElements()  ||  coll.hasNext())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  ||  coll.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  ||  coll.hasNext())  {	  while(i.hasMoreElements()    &&    coll.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
468	[BUG]  [BUGGY]  while(coll.hasMoreElements()  &&  coll.hasNext())  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.hasMoreElements()  &&  coll.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.hasMoreElements()  &&  coll.hasNext())  {	  while(i.hasMoreElements()    &&    coll.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
469	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.next())  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  &&  coll.next())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  &&  coll.next())  {	  while(i.hasMoreElements()    &&    coll.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
470	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.hasNext()  ||  coll.hasNext())  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  &&  coll.hasNext()  ||  coll.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  &&  coll.hasNext()  ||  coll.hasNext())  {	  while(i.hasMoreElements()    &&    coll.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
471	[BUG]  [BUGGY]  while(!i.hasMoreElements()  &&  coll.hasNext())  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasMoreElements()  &&  coll.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasMoreElements()  &&  coll.hasNext())  {	  while(i.hasMoreElements()    &&    coll.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
472	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.hasMoreElements())  {	  while(i.hasMoreElements()    &&    coll.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
473	[BUG]  [BUGGY]  while(len  ==  0  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  ==  0  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  ==  0  &&(ch  =  i.read())!=  -1)  {	  while(i    ==    null    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
474	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE  ||  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE  ||  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE  ||  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
475	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SIZE))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SIZE))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
476	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE)||  coll.equals(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE)||  coll.equals(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE)||  coll.equals(CharsetNames.UTF_8))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
477	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE,  true))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE,  true))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE,  true))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
478	[BUG]  [BUGGY]  coll  =  new  ByteArrayOutputStream();  coll.write(ch);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  coll  =  new  ByteArrayOutputStream();  coll.write(ch);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	coll  =  new  ByteArrayOutputStream();  coll.write(ch);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.write(len);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
479	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write('  ');  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write('  ');  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write('  ');	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.write(len);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
480	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0);  coll.write(ch);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0);  coll.write(ch);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0);  coll.write(ch);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.write(len);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
481	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write('n');  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write('n');  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write('n');	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.write(len);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
482	[BUG]  [BUGGY]  While(i!=  null  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  While(i!=  null  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	While(i!=  null  &&(ch  =  i.read())!=  -1)  {	  while(i!=    null    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
483	[BUG]  [BUGGY]  while(i!=  null  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i!=    null    &&    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
484	[BUG]  [BUGGY]  while(i!=  null  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  while(i!=    null    &&    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
485	[BUG]  [BUGGY]  while(i!=  null  &&  coll.getMoreTokens())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&  coll.getMoreTokens())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&  coll.getMoreTokens())  {	  while(i!=    null    &&    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
486	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.next().equals(keyword))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.next().equals(keyword))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.next().equals(keyword))  {	  while(i.hasNext()    &&    coll.next().equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
487	[BUG]  [BUGGY]  while(len.hasNext()  &&  coll.next().equals(ch))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len.hasNext()  &&  coll.next().equals(ch))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len.hasNext()  &&  coll.next().equals(ch))  {	  while(i.hasNext()    &&    coll.next().equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
488	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.next().equals(ch)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.next().equals(ch)||  hasHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.next().equals(ch)||  hasHitEOF)  {	  while(i.hasNext()    &&    coll.next().equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
489	[BUG]  [BUGGY]  while(i!=  null  &&  coll.getMoreElements())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&  coll.getMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&  coll.getMoreElements())  {	  while(i!=    null    &&    coll.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
490	[BUG]  [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(ch  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(ch  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&!hasHitEOF  &&(ch  =  i.read())  ==  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
491	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  <  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  <  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  <  =  i.read())  ==  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
492	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.isEnabled(CharsetNames.US_ASCII))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.isEnabled(CharsetNames.US_ASCII))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.isEnabled(CharsetNames.US_ASCII))  {	  while(i.isEmpty()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
493	[BUG]  [BUGGY]  while((  ch  =  coll.readFully(len,  i.readFully())!=  -1))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.readFully(len,  i.readFully())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.readFully(len,  i.readFully())!=  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.read())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
494	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(len,  i.read())!=  -1))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(len,  i.read())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(len,  i.read())!=  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.read())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
495	[BUG]  [BUGGY]  while((  ch  =  i.readFully(len,  coll.read())!=  -1))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  i.readFully(len,  coll.read())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  i.readFully(len,  coll.read())!=  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.read())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
496	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(len,  coll.read())!=  -1)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(len,  coll.read())!=  -1)&&  hasHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(len,  coll.read())!=  -1)&&  hasHitEOF)  {	  while((    ch    =    IOUtils.readFully(len,    coll.read())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
497	[BUG]  [BUGGY]  while(len!=  null  &&  coll.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  null  &&  coll.length  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  null  &&  coll.length  >  0)  {	  while(i!=    null    &&    coll.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
498	[BUG]  [BUGGY]  While(i!=  null  &&  coll.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  While(i!=  null  &&  coll.length  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	While(i!=  null  &&  coll.length  >  0)  {	  while(i!=    null    &&    coll.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
499	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES),  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES),  hasHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES),  hasHitEOF)  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
500	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.getCharsetNames().size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.getCharsetNames().size()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.getCharsetNames().size()  ==  0)  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
501	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.equals(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.equals(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.equals(Feature.QUOTE_FIELD_NAME))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
502	[BUG]  [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(ch  <  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(ch  <  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&!hasHitEOF  &&(ch  <  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
503	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  =  -1))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  =  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()  <  =  -1))  {	  while(!hasHitEOF    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
504	[BUG]  [BUGGY]  while(len.hasMoreTokens()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len.hasMoreTokens()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len.hasMoreTokens()  &&  coll.isEmpty())  {	  while(i.hasMoreTokens()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
505	[BUG]  [BUGGY]  While(i.hasMoreTokens()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  While(i.hasMoreTokens()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	While(i.hasMoreTokens()  &&  coll.isEmpty())  {	  while(i.hasMoreTokens()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
506	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read(ch)!=  -1))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read(ch)!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read(ch)!=  -1))  {	  while(!hasHitEOF    &&(ch!=    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
507	[BUG]  [BUGGY]  while(i!=  hasHitEOF  &&(ch!=  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  hasHitEOF  &&(ch!=  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  hasHitEOF  &&(ch!=  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch!=    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
508	[BUG]  [BUGGY]  while(i.hasNext()  [Delete]  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  [Delete]  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  [Delete]  -1)  {	  while(i.hasNext()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
509	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken())  ==  '/')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken())  ==  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken())  ==  '/')  {	  while(i.hasMoreTokens()    &&    coll.charAt(i.nextToken()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
510	[BUG]  [BUGGY]  while((  coll  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  coll  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  coll  =  i.read())!=  -1)  {	  while((    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
511	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  =  coll.readFully(len))!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  =  coll.readFully(len))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  =  coll.readFully(len))!=  -1)  {	  while(!hasHitEOF    &&(ch    =    IOUtils.readFully(len))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
512	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.hasNext())&&(ch  =  IOUtils.readFully(len))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.hasNext())&&(ch  =  IOUtils.readFully(len))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.hasNext())&&(ch  =  IOUtils.readFully(len))!=  -1)  {	  while(!hasHitEOF    &&(ch    =    IOUtils.readFully(len))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
513	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  <  IOUtils.readFully(len))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  <  IOUtils.readFully(len))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  <  IOUtils.readFully(len))!=  -1)  {	  while(!hasHitEOF    &&(ch    =    IOUtils.readFully(len))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
514	[BUG]  [BUGGY]  coll  =  new  ByteArrayOutputStream();  coll.close();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  coll  =  new  ByteArrayOutputStream();  coll.close();  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	coll  =  new  ByteArrayOutputStream();  coll.close();	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
515	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0);  coll.close();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0);  coll.close();  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0);  coll.close();	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
516	[BUG]  [BUGGY]  while(len.isEmpty()  &&  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len.isEmpty()  &&  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len.isEmpty()  &&  coll.size()  >  0)  {	  while(i.isEmpty()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
517	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.size()  >  1)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.size()  >  1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.size()  >  1)  {	  while(i.isEmpty()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
518	[BUG]  [BUGGY]  while(coll.hasNext()  &&  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.hasNext()  &&  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.hasNext()  &&  coll.size()  >  0)  {	  while(i.hasNext()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
519	[BUG]  [BUGGY]  while(i.isDirectory()  &&  coll.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isDirectory()  &&  coll.length()!=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isDirectory()  &&  coll.length()!=  0)  {	  while(i.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
520	[BUG]  [BUGGY]  while(i.isDirectory()  &&  coll.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isDirectory()  &&  coll.length()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isDirectory()  &&  coll.length()  ==  0)  {	  while(i.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
521	[BUG]  [BUGGY]  while(i.isDirectory()  &&  coll.endsWith( ".js "))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isDirectory()  &&  coll.endsWith( ".js "))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isDirectory()  &&  coll.endsWith( ".js "))  {	  while(i.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
522	[BUG]  [BUGGY]  while(i.isDirectory()  &&  coll.endsWith( "/ "))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isDirectory()  &&  coll.endsWith( "/ "))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isDirectory()  &&  coll.endsWith( "/ "))  {	  while(i.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
523	[BUG]  [BUGGY]  while(len!=  0  &&(ch  <  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  0  &&(ch  <  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  0  &&(ch  <  =  i.read())!=  -1)  {	  while(len!=    0    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
524	[BUG]  [BUGGY]  while(len  >=  0  &&(ch  <  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  >=  0  &&(ch  <  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  >=  0  &&(ch  <  =  i.read())!=  -1)  {	  while(len!=    0    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
525	[BUG]  [BUGGY]  while(len!=  0  &&(ch  ==  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  0  &&(ch  ==  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  0  &&(ch  ==  i.read())!=  -1)  {	  while(len!=    0    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
526	[BUG]  [BUGGY]  while(i.hasNext()  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&(ch  =  i.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
527	[BUG]  [BUGGY]  while(i.hasNext()  ||(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  ||(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  ||(ch  =  coll.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
528	[BUG]  [BUGGY]  while(i.hasNext()  &&(ch  <  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&(ch  <  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&(ch  <  coll.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
529	[BUG]  [BUGGY]  while(i.hasNext()  &&(ch  <  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&(ch  <  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&(ch  <  =  coll.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
530	[BUG]  [BUGGY]  while(i.hasNext()  }  &&(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  }  &&(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  }  &&(ch  =  coll.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
531	[BUG]  [BUGGY]  whil((  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  whil((  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	whil((  i.read())!=  -1)  {	  while((    i.read()    +    1)!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
532	[BUG]  [BUGGY]  while(i!=  null  &&(ch  <  =  IOUtils.readFully(i,  coll))!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  <  =  IOUtils.readFully(i,  coll))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  <  =  IOUtils.readFully(i,  coll))!=  -1)  {	  while(i!=    null    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
533	[BUG]  [BUGGY]  while(i!=  null  &&(ch  <  =  IOUtils.readFully(i.read()))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  <  =  IOUtils.readFully(i.read()))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  <  =  IOUtils.readFully(i.read()))!=  -1)  {	  while(i!=    null    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
534	[BUG]  [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(i.read()  ==  -1))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(i.read()  ==  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&!hasHitEOF  &&(i.read()  ==  -1))  {	  while(!hasHitEOF    &&(i.read()    ==    -1))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
535	[BUG]  [BUGGY]  while(!isEOF  &&(i.read()  ==  -1))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!isEOF  &&(i.read()  ==  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!isEOF  &&(i.read()  ==  -1))  {	  while(!hasHitEOF    &&(i.read()    ==    -1))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
536	[BUG]  [BUGGY]  whilst(i!=  null  &&(ch  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  whilst(i!=  null  &&(ch  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	whilst(i!=  null  &&(ch  =  i.read())  ==  -1)  {	  whilst(i!=    null    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
537	[BUG]  [BUGGY]  whilst(i  ==  null  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  whilst(i  ==  null  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	whilst(i  ==  null  &&(ch  =  i.read())!=  -1)  {	  whilst(i!=    null    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
538	[BUG]  [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(len  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(len  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&!hasHitEOF  &&(len  =  i.read())!=  -1)  {	  while(i!=    null    &&!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
539	[BUG]  [BUGGY]  while(i.get()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.get()!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.get()!=  -1)  {	  while(i.read()    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
540	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.endsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.endsWith( "- "))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.endsWith( "- "))  {	  while(i.isEmpty()    &&    coll.endsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
541	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.equals(CharacterEncoding.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.equals(CharacterEncoding.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.equals(CharacterEncoding.UTF_8))  {	  while(i.isEmpty()    &&    coll.equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
542	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.equals(ch))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.equals(ch))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.equals(ch))  {	  while(i.isEmpty()    &&    coll.equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
543	[BUG]  [BUGGY]  while(len!=  null  &&  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  null  &&  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  null  &&  coll.size()  >  0)  {	  while(i!=    null    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
544	[BUG]  [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(i.read()!=  -1))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(i.read()!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&!hasHitEOF  &&(i.read()!=  -1))  {	  while(!hasHitEOF    &&(i.read()!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
545	[BUG]  [BUGGY]  while(!isEOF  &&(i.read()!=  -1))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!isEOF  &&(i.read()!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!isEOF  &&(i.read()!=  -1))  {	  while(!hasHitEOF    &&(i.read()!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
546	[BUG]  [BUGGY]  int  len  =  coll.length()  +  read;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  int  len  =  coll.length()  +  read;  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	int  len  =  coll.length()  +  read;	  int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
547	[BUG]  [BUGGY]  while(len!=  null  &&  coll.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  null  &&  coll.length()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  null  &&  coll.length()  ==  0)  {	  while(i!=    null    &&    coll.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
548	[BUG]  [BUGGY]  while(!i.hasNext())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasNext())  {	  while(!i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
549	[BUG]  [BUGGY]  while(i!=  null  &&!i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&!i.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&!i.hasMoreElements())  {	  while(!i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
550	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken())  >=  '-')  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken())  >=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.charAt(i.nextToken())  >=  '-')  {	  while(i.hasMoreTokens()    &&    coll.charAt(i.nextToken())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
551	[BUG]  [BUGGY]  while(read  >=  0  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(read  >=  0  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(read  >=  0  &&  coll.isEmpty())  {	  while(len    >=    0    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
552	[BUG]  [BUGGY]  while((  ch  =  coll.readFully(len,  i.length())!=  -1))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.readFully(len,  i.length())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.readFully(len,  i.length())!=  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.length())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
553	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(len,  coll.length())  ==  -1))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(len,  coll.length())  ==  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(len,  coll.length())  ==  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.length())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
554	[BUG]  [BUGGY]  parsePaxHeaders(i,  coll,  encoding);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  parsePaxHeaders(i,  coll,  encoding);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	parsePaxHeaders(i,  coll,  encoding);	  parsePaxHeaders(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
555	[BUG]  [BUGGY]  parsePaxHeaders(len,  coll);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  parsePaxHeaders(len,  coll);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	parsePaxHeaders(len,  coll);	  parsePaxHeaders(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
556	[BUG]  [BUGGY]  parsePaxHeaders(i,  coll,  is);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  parsePaxHeaders(i,  coll,  is);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	parsePaxHeaders(i,  coll,  is);	  parsePaxHeaders(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
557	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.inputStream(i,  read);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  IOUtils.inputStream(i,  read);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  IOUtils.inputStream(i,  read);	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
558	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.inputStream(i);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  IOUtils.inputStream(i);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  IOUtils.inputStream(i);	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
559	[BUG]  [BUGGY]  InputStream  coll  =  TarArchiveEntry.inputStream();  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  TarArchiveEntry.inputStream();  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  TarArchiveEntry.inputStream();	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
560	[BUG]  [BUGGY]  while(!isEOF  &&(ch  <  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!isEOF  &&(ch  <  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!isEOF  &&(ch  <  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
561	[BUG]  [BUGGY]  while(len.isEmpty()  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len.isEmpty()  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len.isEmpty()  &&  coll.length()  >  0)  {	  while(i.isEmpty()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
562	[BUG]  [BUGGY]  while(i!=  null  &&(coll  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(coll  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(coll  =  i.read())!=  -1)  {	  while(i!=    null    &&(ch    =    col.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
563	[BUG]  [BUGGY]  while(i!=  null  &&(c  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(c  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(c  =  coll.read())!=  -1)  {	  while(i!=    null    &&(ch    =    col.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
564	[BUG]  [BUGGY]  while(i!=  null  &&(coll  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(coll  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(coll  =  coll.read())!=  -1)  {	  while(i!=    null    &&(ch    =    col.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
565	[BUG]  [BUGGY]  while((  ch  =  i.read())  >>  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  i.read())  >>  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  i.read())  >>  -1)  {	  while((    ch    =    coll.read())    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
566	[BUG]  [BUGGY]  while(i!=  null  &&(len  =  IOUtils.readFully(i.read())!=  -1))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(len  =  IOUtils.readFully(i.read())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(len  =  IOUtils.readFully(i.read())!=  -1))  {	  while(i!=    null    &&(len    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
567	[BUG]  [BUGGY]  while(i!=  null  &&(len  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(len  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(len  =  i.read())  ==  -1)  {	  while(i!=    null    &&(len    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
568	[BUG]  [BUGGY]  while(i!=  null  &&(len  =  IOUtils.readFully(i,  coll))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(len  =  IOUtils.readFully(i,  coll))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(len  =  IOUtils.readFully(i,  coll))!=  -1)  {	  while(i!=    null    &&(len    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
569	[BUG]  [BUGGY]  IOUtils.readFully(i,  coll  -  read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  IOUtils.readFully(i,  coll  -  read);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	IOUtils.readFully(i,  coll  -  read);	  IOUtils.readFully(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
570	[BUG]  [BUGGY]  IOUtils.readFully(i,  read);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  IOUtils.readFully(i,  read);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	IOUtils.readFully(i,  read);	  IOUtils.readFully(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
571	[BUG]  [BUGGY]  IOUtils.readFully(ch,  coll);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  IOUtils.readFully(ch,  coll);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	IOUtils.readFully(ch,  coll);	  IOUtils.readFully(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
572	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.getMoreElements())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  &&  coll.getMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  &&  coll.getMoreElements())  {	  while(i.hasMoreElements()    &&    coll.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
573	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_4))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_4))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_4))  {	  while(i.hasNext()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
574	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_9))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_9))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_9))  {	  while(i.hasNext()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
575	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_6))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_6))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_6))  {	  while(i.hasNext()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
576	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(CharsetNames.ITF_8))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(CharsetNames.ITF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(CharsetNames.ITF_8))  {	  while(i.hasNext()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
577	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
578	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
579	[BUG]  [BUGGY]  while(len  >=  0  &&  coll.hasNext())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  >=  0  &&  coll.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  >=  0  &&  coll.hasNext())  {	  while(i!=    null    &&    coll.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
580	[BUG]  [BUGGY]  While(i!=  null  &&  coll.hasNext())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  While(i!=  null  &&  coll.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	While(i!=  null  &&  coll.hasNext())  {	  while(i!=    null    &&    coll.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
581	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readInputStream();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  IOUtils.readInputStream();  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  IOUtils.readInputStream();	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
582	[BUG]  [BUGGY]  while(i!=  hasHitEOF  &&(len  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  hasHitEOF  &&(len  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  hasHitEOF  &&(len  =  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(i    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
583	[BUG]  [BUGGY]  while(!isEOF  &&(i  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!isEOF  &&(i  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!isEOF  &&(i  =  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(i    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
584	[BUG]  [BUGGY]  while(!hasHitEOF  &&(record.read()!=  -1))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(record.read()!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(record.read()!=  -1))  {	  while(!hasHitEOF    &&(i    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
585	[BUG]  [BUGGY]  while(!i.hasMoreTokens()  &&  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasMoreTokens()  &&  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasMoreTokens()  &&  coll.size()  >  0)  {	  while(i.hasMoreTokens()    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
586	[BUG]  [BUGGY]  while(i  >=  null  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i  >=  null  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i  >=  null  &&  coll.length()  >  0)  {	  while(i    ==    null    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
587	[BUG]  [BUGGY]  while(i!=  null  ||  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  ||  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  ||  coll.length()  >  0)  {	  while(i    ==    null    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
588	[BUG]  [BUGGY]  while(i.hasNext()  &&(ch  =  coll.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&(ch  =  coll.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&(ch  =  coll.read())  ==  -1)  {	  while(!hasHitEOF    &&(ch    =    coll.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
589	[BUG]  [BUGGY]  while(!i.hasMoreTokens()  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasMoreTokens()  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasMoreTokens()  &&  coll.length()  >  0)  {	  while(i.hasMoreTokens()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
590	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.length()  >  1)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.length()  >  1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.length()  >  1)  {	  while(i.hasMoreTokens()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
591	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.next().length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.next().length  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.next().length  ==  0)  {	  while(i.hasNext()    &&    coll.next().length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
592	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.next().length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.next().length  >=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.next().length  >=  0)  {	  while(i.hasNext()    &&    coll.next().length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
593	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.next().length!=  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.next().length!=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.next().length!=  0)  {	  while(i.hasNext()    &&    coll.next().length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
594	[BUG]  [BUGGY]  While(i.hasMoreElements()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  While(i.hasMoreElements()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	While(i.hasMoreElements()  &&  coll.isEmpty())  {	  while(i.hasMoreElements()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
595	[BUG]  [BUGGY]  while(len  ==  null  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  ==  null  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  ==  null  &&  coll.length()  >  0)  {	  while(len!=    null    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
596	[BUG]  [BUGGY]  while(i!=  null  &&(ch  <  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  <  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  <  =  i.read())  ==  -1)  {	  while(i!=    null    &&(ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
597	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next()  -  1)  ==  '/')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next()  -  1)  ==  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.charAt(i.next()  -  1)  ==  '/')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
598	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next()  +  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next()  +  1)!=  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.charAt(i.next()  +  1)!=  '/')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
599	[BUG]  [BUGGY]  while(i.hasNext()  &&  col.charAt(i.next()  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  col.charAt(i.next()  -  1)!=  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  col.charAt(i.next()  -  1)!=  '/')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
600	[BUG]  [BUGGY]  while(!i.hasNext()  &&  coll.charAt(i.next()  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasNext()  &&  coll.charAt(i.next()  -  1)!=  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasNext()  &&  coll.charAt(i.next()  -  1)!=  '/')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
601	[BUG]  [BUGGY]  while((  ch  =  coll.readFully())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.readFully())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.readFully())!=  -1)  {	  while((    ch    =    IOUtils.readFully(i.readFully()))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
602	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i,  coll.readFully()))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(i,  coll.readFully()))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(i,  coll.readFully()))!=  -1)  {	  while((    ch    =    IOUtils.readFully(i.readFully()))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
603	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i.bytes()))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(i.bytes()))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(i.bytes()))!=  -1)  {	  while((    ch    =    IOUtils.readFully(i.readFully()))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
604	[BUG]  [BUGGY]  while((  i  =  coll.next())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  i  =  coll.next())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  i  =  coll.next())!=  -1)  {	  while((    i.hasNext())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
605	[BUG]  [BUGGY]  while(coll.next()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.next()!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.next()!=  -1)  {	  while(i.next()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
606	[BUG]  [BUGGY]  while(i.getNext()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.getNext()!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.getNext()!=  -1)  {	  while(i.next()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
607	[BUG]  [BUGGY]  while(!hasHitEOF  &&(coll.read()  <  =  -1))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(coll.read()  <  =  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(coll.read()  <  =  -1))  {	  while(!hasHitEOF    &&(ch    <    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
608	[BUG]  [BUGGY]  while(!hasHitEOF  &&(coll.read()  >=  -1))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(coll.read()  >=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(coll.read()  >=  -1))  {	  while(!hasHitEOF    &&(ch    <    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
609	[BUG]  [BUGGY]  while((  i  =  coll.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  i  =  coll.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  i  =  coll.read())  ==  -1)  {	  while((    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
610	[BUG]  [BUGGY]  while(i.hasNext()  &&(ch!=  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&(ch!=  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&(ch!=  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(ch!=    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
611	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.equals(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.equals(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.equals(CharsetNames.UTF_8))  {	  while(i.isEmpty()    &&    coll.equals(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
612	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.equals(CharsetNames.UTF_4))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.equals(CharsetNames.UTF_4))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.equals(CharsetNames.UTF_4))  {	  while(i.isEmpty()    &&    coll.equals(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
613	[BUG]  [BUGGY]  while((  ch  =  i.readFully(ch))!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  i.readFully(ch))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  i.readFully(ch))!=  -1)  {	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
614	[BUG]  [BUGGY]  while((  ch  =  i.readFully(len))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  i.readFully(len))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  i.readFully(len))!=  -1)  {	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
615	[BUG]  [BUGGY]  while(!i.hasNext()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasNext()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasNext()  &&  coll.isEmpty())  {	  while(i.hasNext()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
616	[BUG]  [BUGGY]  while(len  ==  null  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  ==  null  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  ==  null  &&  coll.isEmpty())  {	  while(len!=    null    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
617	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len  ==  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(len  ==  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(len  ==  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    ==    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
618	[BUG]  [BUGGY]  while(i!=  hasHitEOF  &&(ch  ==  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  hasHitEOF  &&(ch  ==  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  hasHitEOF  &&(ch  ==  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    ==    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
619	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next())  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next())  ==  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.charAt(i.next())  ==  '-')  {	  while(i.hasNext()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
620	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next()  -  1)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next()  -  1)!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.charAt(i.next()  -  1)!=  '-')  {	  while(i.hasNext()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
621	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next()  +  1)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next()  +  1)!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.charAt(i.next()  +  1)!=  '-')  {	  while(i.hasNext()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
622	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next())  >=  '-')  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next())  >=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.charAt(i.next())  >=  '-')  {	  while(i.hasNext()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
623	[BUG]  [BUGGY]  while(i.hasNext()  &&  col.charAt(i.next())!=  '-')  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  col.charAt(i.next())!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  col.charAt(i.next())!=  '-')  {	  while(i.hasNext()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
624	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i  <  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i  <  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i  <  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
625	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len  <  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(len  <  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(len  <  =  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
626	[BUG]  [BUGGY]  while(len.hasMoreTokens()  &&  coll.hasMoreTokens())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len.hasMoreTokens()  &&  coll.hasMoreTokens())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len.hasMoreTokens()  &&  coll.hasMoreTokens())  {	  while(i.hasMoreTokens()    &&    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
627	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.getMoreTokens())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.getMoreTokens())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.getMoreTokens())  {	  while(i.hasMoreTokens()    &&    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
628	[BUG]  [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(i.read()  >=  -1))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(i.read()  >=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&!hasHitEOF  &&(i.read()  >=  -1))  {	  while(!hasHitEOF    &&(i.read()    >=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
629	[BUG]  [BUGGY]  while(len!=  1  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  1  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  1  &&  coll.length()  >  0)  {	  while(len!=    0    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
630	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  coll.charAt(len  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.isEmpty()  &&  coll.charAt(len  -  1)!=  'n')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.isEmpty()  &&  coll.charAt(len  -  1)!=  'n')  {	  while(!i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
631	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len  =  IOUtils.readFully(i.read())!=  -1))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(len  =  IOUtils.readFully(i.read())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(len  =  IOUtils.readFully(i.read())!=  -1))  {	  while(!hasHitEOF    &&(len    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
632	[BUG]  [BUGGY]  while(i!=  null  &&(len  <  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(len  <  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(len  <  i.read())!=  -1)  {	  while(i!=    null    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
633	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next()  -  1)  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next()  -  1)  ==  'n')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.charAt(i.next()  -  1)  ==  'n')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
634	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next()  +  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next()  +  1)!=  'n')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.charAt(i.next()  +  1)!=  'n')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
635	[BUG]  [BUGGY]  while(i.hasNext()  &&  col.charAt(i.next()  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  col.charAt(i.next()  -  1)!=  'n')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  col.charAt(i.next()  -  1)!=  'n')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
636	[BUG]  [BUGGY]  while((  ch  =  col.readFully(len))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  col.readFully(len))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  col.readFully(len))!=  -1)  {	  while((    ch    =    IOUtils.readFully(len))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
637	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(Read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(Read);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(Read);	  InputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
638	[BUG]  [BUGGY]  Integer  i  =  coll.readInt(0);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  Integer  i  =  coll.readInt(0);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	Integer  i  =  coll.readInt(0);	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
639	[BUG]  [BUGGY]  Integer  i  =  col.readInt();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  Integer  i  =  col.readInt();  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	Integer  i  =  col.readInt();	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
640	[BUG]  [BUGGY]  Integer  i  =  coll.readInt(len);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  Integer  i  =  coll.readInt(len);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	Integer  i  =  coll.readInt(len);	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
641	[BUG]  [BUGGY]  while(coll!=  null  &&  col.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll!=  null  &&  col.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll!=  null  &&  col.isEmpty())  {	  while(coll!=    null    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
642	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  i).inputStream();  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  i).inputStream();  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  IOUtils.readFully(i,  i).inputStream();	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
643	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  i.inputStream());  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  i.inputStream());  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  IOUtils.readFully(i,  i.inputStream());	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
644	[BUG]  [BUGGY]  while((  i  =  i.next())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  i  =  i.next())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  i  =  i.next())!=  -1)  {	  while((    i.hasNext())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
645	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.hasNext())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.hasNext())  {	  while(i.hasMoreElements()    &&    coll.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
646	[BUG]  [BUGGY]  Integer  i  =  coll.readIntValue();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  Integer  i  =  coll.readIntValue();  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	Integer  i  =  coll.readIntValue();	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
647	[BUG]  [BUGGY]  while(i.hasMoreElements()  ||  coll.nextElement())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  ||  coll.nextElement())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  ||  coll.nextElement())  {	  while(i.hasMoreElements()    ||    coll.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
648	[BUG]  [BUGGY]  while((  ch  =  i.readFully(i))!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  i.readFully(i))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  i.readFully(i))!=  -1)  {	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
649	[BUG]  [BUGGY]  while((  ch  =  i.readFully()))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  i.readFully()))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  i.readFully()))!=  -1)  {	  while((    ch    =    IOUtils.readFully(i.readFully()))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
650	[BUG]  [BUGGY]  while((  ch  =  i.readFully())8)!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  i.readFully())8)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  i.readFully())8)!=  -1)  {	  while((    ch    =    IOUtils.readFully(i.readFully()))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
651	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  ==  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  ==  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  ==  i.read())  ==  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
652	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch!=  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch!=  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch!=  i.read())  ==  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
653	[BUG]  [BUGGY]  while(len  >  0  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  >  0  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  >  0  &&(ch  =  i.read())!=  -1)  {	  while(len!=    0    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
654	[BUG]  [BUGGY]  while(i!=  null  &&(ch  <  coll.toString())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  <  coll.toString())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  <  coll.toString())!=  -1)  {	  while(i!=    null    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
655	[BUG]  [BUGGY]  while(i!=  null  &&(ch  <  coll.size())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  <  coll.size())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  <  coll.size())!=  -1)  {	  while(i!=    null    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
656	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  coll.charAt(len  -  read)!='')  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.isEmpty()  &&  coll.charAt(len  -  read)!='')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.isEmpty()  &&  coll.charAt(len  -  read)!='')  {	  while(!i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
657	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  coll.startsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.isEmpty()  &&  coll.startsWith( "- "))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.isEmpty()  &&  coll.startsWith( "- "))  {	  while(!i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
658	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  coll.endsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.isEmpty()  &&  coll.endsWith( "- "))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.isEmpty()  &&  coll.endsWith( "- "))  {	  while(!i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
659	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.length  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.length  >  0)  {	  while(i.isEmpty()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
660	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.length()  >  0)  {	  while(i.isEmpty()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
661	[BUG]  [BUGGY]  while(i!=  null  &&(ch  <  =  col.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  <  =  col.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  <  =  col.read())!=  -1)  {	  while(i!=    null    &&(ch    =    col.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
662	[BUG]  [BUGGY]  IOUtils.readFully(i,  coll  -  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  IOUtils.readFully(i,  coll  -  1);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	IOUtils.readFully(i,  coll  -  1);	  IOUtils.readFully(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
663	[BUG]  [BUGGY]  IOUtils.readFully(i,  coll  -  len);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  IOUtils.readFully(i,  coll  -  len);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	IOUtils.readFully(i,  coll  -  len);	  IOUtils.readFully(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
664	[BUG]  [BUGGY]  while((  i  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  i  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  i  =  i.read())  ==  -1)  {	  while((    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
665	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.length()  >  1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  &&  coll.length()  >  1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  &&  coll.length()  >  1)  {	  while(i.hasMoreElements()    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
666	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.size()!=  0)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&  coll.size()!=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&  coll.size()!=  0)  {	  while(!hasHitEOF    &&(i.read()!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
667	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.isEOF())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&  coll.isEOF())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&  coll.isEOF())  {	  while(!hasHitEOF    &&(i.read()!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
668	[BUG]  [BUGGY]  hilst((  ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  hilst((  ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	hilst((  ch  =  i.read())!=  -1)  {	  While((    ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
669	[BUG]  [BUGGY]  while(i!=  null  &&  coll.hasMore())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&  coll.hasMore())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&  coll.hasMore())  {	  while(i!=    null    &&    coll.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
670	[BUG]  [BUGGY]  while(i.read()  <  -1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.read()  <  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.read()  <  -1)  {	  while(i.read()    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
671	[BUG]  [BUGGY]  while(i  ==  null  ||(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i  ==  null  ||(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i  ==  null  ||(ch  =  coll.read())!=  -1)  {	  while(i    ==    null    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
672	[BUG]  [BUGGY]  while(i.getCurrent()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.getCurrent()!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.getCurrent()!=  -1)  {	  while(i.next()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
673	[BUG]  [BUGGY]  while(i.isDirectory()  &&  coll.toString(CharsetNames.UTF_8)!=  null)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isDirectory()  &&  coll.toString(CharsetNames.UTF_8)!=  null)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isDirectory()  &&  coll.toString(CharsetNames.UTF_8)!=  null)  {	  while(i.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
674	[BUG]  [BUGGY]  while(i.isDirectory()  &&  coll.isEnabled(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isDirectory()  &&  coll.isEnabled(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isDirectory()  &&  coll.isEnabled(CharsetNames.UTF_8))  {	  while(i.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
675	[BUG]  [BUGGY]  while(i.isDirectory()  &&  coll.equals(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isDirectory()  &&  coll.equals(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isDirectory()  &&  coll.equals(CharsetNames.UTF_8))  {	  while(i.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
676	[BUG]  [BUGGY]  while(i.isDirectory()  &&  coll.toString(CharsetNames.UTF_8)!=  0)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isDirectory()  &&  coll.toString(CharsetNames.UTF_8)!=  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isDirectory()  &&  coll.toString(CharsetNames.UTF_8)!=  0)  {	  while(i.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
677	[BUG]  [BUGGY]  while(i.isDirectory()  ||  coll.isDirectory())  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isDirectory()  ||  coll.isDirectory())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isDirectory()  ||  coll.isDirectory())  {	  while(i.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
678	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  0))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  0))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()  <  0))  {	  while(!hasHitEOF    &&(i.read()    >=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
679	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read());  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(i.read());	  InputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
680	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in.read());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in.read());  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(in.read());	  InputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
681	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  ==  IOUtils.readFully(i,  len))!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  ==  IOUtils.readFully(i,  len))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  ==  IOUtils.readFully(i,  len))!=  -1)  {	  while(!hasHitEOF    &&(ch    =    IOUtils.readFully(len))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
682	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  =  IOUtils.readFully(i,  len))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  =  IOUtils.readFully(i,  len))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  =  IOUtils.readFully(i,  len))!=  -1)  {	  while(!hasHitEOF    &&(ch    =    IOUtils.readFully(len))!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
683	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.equals(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.equals(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.equals(Feature.QUOTE_FIELD_SIZE))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
684	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
685	[BUG]  [BUGGY]  while(len  >  0  ||  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  >  0  ||  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  >  0  ||  coll.isEmpty())  {	  while(len    >=    0    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
686	[BUG]  [BUGGY]  while(len  <  0  ||  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  <  0  ||  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  <  0  ||  coll.isEmpty())  {	  while(len    >=    0    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
687	[BUG]  [BUGGY]  while(Len  >  0  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(Len  >  0  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(Len  >  0  &&  coll.isEmpty())  {	  while(len    >=    0    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
688	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.getCurrentToken())!=  '-')  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.getCurrentToken())!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.charAt(i.getCurrentToken())!=  '-')  {	  while(i.hasMoreTokens()    &&    coll.charAt(i.nextToken())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
689	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.getLength())!=  '-')  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.getLength())!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.charAt(i.getLength())!=  '-')  {	  while(i.hasMoreTokens()    &&    coll.charAt(i.nextToken())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
690	[BUG]  [BUGGY]  while(len!=  2  &&  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  2  &&  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  2  &&  coll.length()  >  0)  {	  while(coll!=    null    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
691	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  <  coll.size())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  <  coll.size())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  <  coll.size())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
692	[BUG]  [BUGGY]  while(i  ==  null  &&  coll.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i  ==  null  &&  coll.length()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i  ==  null  &&  coll.length()  ==  0)  {	  while(i!=    null    &&    coll.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
693	[BUG]  [BUGGY]  while(len.isEmpty()  &&  coll.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len.isEmpty()  &&  coll.length()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len.isEmpty()  &&  coll.length()  ==  0)  {	  while(i.isEmpty()    &&    coll.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
694	[BUG]  [BUGGY]  while(len!=  0  ||  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  0  ||  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  0  ||  coll.length()  >  0)  {	  while(len!=    0    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
695	[BUG]  [BUGGY]  while(len  >=  0  ||  coll.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  >=  0  ||  coll.length()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  >=  0  ||  coll.length()  >  0)  {	  while(len!=    0    &&    coll.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
696	[BUG]  [BUGGY]  while(i.hasNext()  <  len  &&(ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  <  len  &&(ch  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  <  len  &&(ch  =  coll.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
697	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&  coll.isEnabled(CharsetNames.UTF_8))  {	  while(i.isEmpty()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
698	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len);  coll.write(ch);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len);  coll.write(ch);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len);  coll.write(ch);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.write(ch);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
699	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream();  coll.write(ch);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream();  coll.write(ch);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream();  coll.write(ch);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.write(ch);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
700	[BUG]  [BUGGY]  whilst(i!=  null  &&(ch  <  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  whilst(i!=  null  &&(ch  <  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	whilst(i!=  null  &&(ch  <  =  i.read())!=  -1)  {	  whilst(i!=    null    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
701	[BUG]  [BUGGY]  if(coll!=  null)  {  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.close();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  if(coll!=  null)  {  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.close();  }  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	if(coll!=  null)  {  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.close();  }	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
702	[BUG]  [BUGGY]  if(coll!=  null)  {  coll  =  new  ByteArrayOutputStream();  coll.close();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  if(coll!=  null)  {  coll  =  new  ByteArrayOutputStream();  coll.close();  }  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	if(coll!=  null)  {  coll  =  new  ByteArrayOutputStream();  coll.close();  }	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
703	[BUG]  [BUGGY]  while(len!=  SMALL_BUFFER_SIZE  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  SMALL_BUFFER_SIZE  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  SMALL_BUFFER_SIZE  &&  coll.isEmpty())  {	  while(coll!=    null    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
704	[BUG]  [BUGGY]  while(coll.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(coll.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(coll.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_8))  {	  while(i.hasNext()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
705	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_8)||  coll.toString(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_8)||  coll.toString(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(CharsetNames.UTF_8)||  coll.toString(CharsetNames.UTF_8))  {	  while(i.hasNext()    &&    coll.isEnabled(CharsetNames.UTF_8))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
706	[BUG]  [BUGGY]  whil((  ch  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  whil((  ch  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	whil((  ch  =  i.read())  ==  -1)  {	  while((    ch    =    coll.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
707	[BUG]  [BUGGY]  while(i  >=  null  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i  >=  null  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i  >=  null  &&(ch  =  i.read())!=  -1)  {	  while(i    ==    null    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
708	[BUG]  [BUGGY]  while(i.hasNext()  *  coll.charAt(i.next())!=  '-')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  *  coll.charAt(i.next())!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  *  coll.charAt(i.next())!=  '-')  {	  while(i.hasNext()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
709	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch);  coll.write(len);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch);  coll.write(len);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch);  coll.write(len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.write(len);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
710	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(0,  len);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(0,  len);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(0,  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.write(len);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
711	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0);  coll.write(len);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0);  coll.write(len);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0);  coll.write(len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    coll.write(len);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
712	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.getCurrentToken()  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.getCurrentToken()  -  1)!=  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.charAt(i.getCurrentToken()  -  1)!=  '/')  {	  while(i.hasMoreTokens()    &&    coll.charAt(i.nextToken()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
713	[BUG]  [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.getLength()  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  &&  coll.charAt(i.getLength()  -  1)!=  '/')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  &&  coll.charAt(i.getLength()  -  1)!=  '/')  {	  while(i.hasMoreTokens()    &&    coll.charAt(i.nextToken()    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
714	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
715	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.isEmpty()  ||  coll.isEnabled(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreElements()  &&  coll.isEmpty()  ||  coll.isEnabled(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreElements()  &&  coll.isEmpty()  ||  coll.isEnabled(CharsetNames.UTF_8))  {	  while(i.hasMoreElements()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
716	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.isEmpty()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
717	[BUG]  [BUGGY]  parsePaxHeaders(i,  coll,  p);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  parsePaxHeaders(i,  coll,  p);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	parsePaxHeaders(i,  coll,  p);	  parsePaxHeaders(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
718	[BUG]  [BUGGY]  parsePaxHeaders(i,  coll,  c);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  parsePaxHeaders(i,  coll,  c);  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	parsePaxHeaders(i,  coll,  c);	  parsePaxHeaders(i,    coll);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
719	[BUG]  [BUGGY]  while((  i.in())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  i.in())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  i.in())!=  -1)  {	  while((    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
720	[BUG]  [BUGGY]  while(i.hasMoreTokens()  ||  coll.nextToken())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasMoreTokens()  ||  coll.nextToken())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasMoreTokens()  ||  coll.nextToken())  {	  while(i.hasMoreTokens()    ||    coll.hasMoreTokens())    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
721	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.charAt(i.getKey())!=  '-')  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.charAt(i.getKey())!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.charAt(i.getKey())!=  '-')  {	  while(i.isEmpty()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
722	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.charAt(ch.next())!=  '-')  {  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.charAt(ch.next())!=  '-')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.charAt(ch.next())!=  '-')  {	  while(i.isEmpty()    &&    coll.charAt(i.next())!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
723	[BUG]  [BUGGY]  while(i.hasNext().equals(ch))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext().equals(ch))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext().equals(ch))  {	  while(i.hasNext()    &&    coll.next().equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
724	[BUG]  [BUGGY]  while(!i.hasNext()  &&  coll.next().equals(ch))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasNext()  &&  coll.next().equals(ch))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasNext()  &&  coll.next().equals(ch))  {	  while(i.hasNext()    &&    coll.next().equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
725	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.next().equals(CH))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.next().equals(CH))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.next().equals(CH))  {	  while(i.hasNext()    &&    coll.next().equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
726	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.next().endsWith(ch))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.next().endsWith(ch))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.next().endsWith(ch))  {	  while(i.hasNext()    &&    coll.next().equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
727	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE))  {	  while(!hasHitEOF    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
728	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  ch))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  ch))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(i.read()  <  ch))  {	  while(!hasHitEOF    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
729	[BUG]  [BUGGY]  whil((  ch  =  i.read())  >=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  whil((  ch  =  i.read())  >=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	whil((  ch  =  i.read())  >=  -1)  {	  while((    ch    =    coll.read())    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
730	[BUG]  [BUGGY]  while(len  <  =  0  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  <  =  0  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  <  =  0  &&  coll.isEmpty())  {	  while(i    ==    null    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
731	[BUG]  [BUGGY]  while(!hasHitEOF  &&(c  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(c  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(c  =  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(i    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
732	[BUG]  [BUGGY]  while(len  >=  0  &&  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  >=  0  &&  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  >=  0  &&  coll.size()  >  0)  {	  while(i!=    null    &&    coll.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
733	[BUG]  [BUGGY]  while(i.hasNext()  >  0  &&  coll.next().length  >  0)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  >  0  &&  coll.next().length  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  >  0  &&  coll.next().length  >  0)  {	  while(i.hasNext()    &&    coll.next().length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
734	[BUG]  [BUGGY]  while(i.hasNext()  *  coll.next().length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  *  coll.next().length  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  *  coll.next().length  >  0)  {	  while(i.hasNext()    &&    coll.next().length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
735	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  i).readInputStream();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  i).readInputStream();  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	InputStream  coll  =  IOUtils.readFully(i,  i).readInputStream();	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
736	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next())  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.charAt(i.next())  ==  'n')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.charAt(i.next())  ==  'n')  {	  while(i.hasNext()    &&    coll.charAt(i.next()    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
737	[BUG]  [BUGGY]  while(!i.hasMoreElements()  &&  coll.charAt(len  -  read)!='')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasMoreElements()  &&  coll.charAt(len  -  read)!='')  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasMoreElements()  &&  coll.charAt(len  -  read)!='')  {	  while(!i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
738	[BUG]  [BUGGY]  while(!i.hasMoreElements()  ||  coll.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!i.hasMoreElements()  ||  coll.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!i.hasMoreElements()  ||  coll.size()  >  0)  {	  while(!i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
739	[BUG]  [BUGGY]  while(len  >=  0  &&  coll.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len  >=  0  &&  coll.length  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len  >=  0  &&  coll.length  >  0)  {	  while(i!=    null    &&    coll.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
740	[BUG]  [BUGGY]  while(i!=  null  &&  coll.size  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&  coll.size  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&  coll.size  >  0)  {	  while(i!=    null    &&    coll.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
741	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.equals(CharacterEncodingNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.isEmpty()  &&  coll.equals(CharacterEncodingNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.isEmpty()  &&  coll.equals(CharacterEncodingNames.UTF_8))  {	  while(i.isEmpty()    &&    coll.equals(ch))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
742	[BUG]  [BUGGY]  while((  i  =  i.get())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  i  =  i.get())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  i  =  i.get())!=  -1)  {	  while((    i.get())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
743	[BUG]  [BUGGY]  while(!hasHitEOF  &&(c  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(c  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(c  =  i.read())!=  -1)  {	  while(!hasHitEOF    &&(len    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
744	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  <  =  IOUtils.readFully(i,  coll))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  <  =  IOUtils.readFully(i,  coll))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  <  =  IOUtils.readFully(i,  coll))!=  -1)  {	  while(!hasHitEOF    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
745	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  >=  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  >=  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  >=  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
746	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  <  =  IOUtils.readFully(i))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&(ch  <  =  IOUtils.readFully(i))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&(ch  <  =  IOUtils.readFully(i))!=  -1)  {	  while(!hasHitEOF    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
747	[BUG]  [BUGGY]  while(i  ==  null  &&(ch  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i  ==  null  &&(ch  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i  ==  null  &&(ch  =  i.read())  ==  -1)  {	  while(i!=    null    &&(ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
748	[BUG]  [BUGGY]  while(len!=  0  &&(ch  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  0  &&(ch  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  0  &&(ch  =  i.read())  ==  -1)  {	  while(i!=    null    &&(ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
749	[BUG]  [BUGGY]  While((  ch  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  While((  ch  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	While((  ch  =  i.read())  ==  -1)  {	  While((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
750	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE)||  coll.toString(CharsetNames.UTF_8))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE)||  coll.toString(CharsetNames.UTF_8))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE)||  coll.toString(CharsetNames.UTF_8))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
751	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE  ||  coll.toString(CharsetNames.UTF_8)))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE  ||  coll.toString(CharsetNames.UTF_8)))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.AUTO_CLOSE_SOURCE  ||  coll.toString(CharsetNames.UTF_8)))  {	  while(i.hasNext()    &&    coll.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
752	[BUG]  [BUGGY]  while(len!=  0  &&(i  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(len!=  0  &&(i  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(len!=  0  &&(i  =  i.read())!=  -1)  {	  while(i!=    null    &&(len    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
753	[BUG]  [BUGGY]  while(i  ==  null  &&(len  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i  ==  null  &&(len  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i  ==  null  &&(len  =  i.read())!=  -1)  {	  while(i!=    null    &&(len    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
754	[BUG]  [BUGGY]  while(i!=  null  &&(height  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(height  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(height  =  i.read())!=  -1)  {	  while(i!=    null    &&(len    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
755	[BUG]  [BUGGY]  while(i.available()  >  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i.available()  >  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i.available()  >  -1)  {	  while(i.available()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
756	[BUG]  [BUGGY]  while((  ch  =  coll.readFully(i,  coll.read())!=  -1))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.readFully(i,  coll.read())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.readFully(i,  coll.read())!=  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.read())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
757	[BUG]  [BUGGY]  while((  ch  =  coll.readFully(len,  i.readRead())!=  -1))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  coll.readFully(len,  i.readRead())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  coll.readFully(len,  i.readRead())!=  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.read())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
758	[BUG]  [BUGGY]  while(i!=  null  &&(ch  =  IOUtils.readFully(len,  coll.toString(CharsetNames.UTF_8))!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  =  IOUtils.readFully(len,  coll.toString(CharsetNames.UTF_8))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  =  IOUtils.readFully(len,  coll.toString(CharsetNames.UTF_8))!=  -1)  {	  while(i!=    null    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
759	[BUG]  [BUGGY]  while(i!=  null  &&(ch  =  IOUtils.readFully(len))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  =  IOUtils.readFully(len))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  =  IOUtils.readFully(len))!=  -1)  {	  while(i!=    null    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
760	[BUG]  [BUGGY]  while(i!=  null  &&(ch  =  IOUtils.readFully(len,  coll.length())!=  -1))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(i!=  null  &&(ch  =  IOUtils.readFully(len,  coll.length())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(i!=  null  &&(ch  =  IOUtils.readFully(len,  coll.length())!=  -1))  {	  while(i!=    null    &&(ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
761	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while(!hasHitEOF  &&  coll.size()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while(!hasHitEOF  &&  coll.size()  ==  0)  {	  while(!hasHitEOF    &&(i.read()    ==    -1))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
762	[BUG]  [BUGGY]  while((  ch  =  i.readFully(len,  coll.length())!=  -1))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  i.readFully(len,  coll.length())!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  i.readFully(len,  coll.length())!=  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.length())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
763	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(len,  coll.length()  -  1)!=  -1))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();      [BUGGY]  while((  ch  =  IOUtils.readFully(len,  coll.length()  -  1)!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	446	446	1	replace	while((  ch  =  IOUtils.readFully(len,  coll.length()  -  1)!=  -1))  {	  while((    ch    =    IOUtils.readFully(len,    coll.length())!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
