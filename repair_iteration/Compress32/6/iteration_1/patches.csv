bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Entry  <  String,  String>  ent  :  this.headers.keySet())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]                [BUGGY]  for(Entry  <  String,  String>  ent  :  this.headers.keySet())  {  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  ent  :  this.headers.keySet())  {	  for(Entry    <    String,    String>    ent    :    headers.keySet())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  headers.keySet())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]                [BUGGY]  for(Entry  <  String,  String>  currEntry  :  headers.keySet())  {  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  currEntry  :  headers.keySet())  {	  for(Entry    <    String,    String>    ent    :    headers.keySet())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  this.headers.entrySet())  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]                [BUGGY]  for(Entry  <  String,  String>  entry  :  this.headers.entrySet())  {  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  this.headers.entrySet())  {	  for(Entry    <    String,    String>    entry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
4	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.values())  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]                [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.values())  {  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  headers.values())  {	  for(Entry    <    String,    String>    entry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
5	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.keySet())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]                [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.keySet())  {  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  headers.keySet())  {	  for(Entry    <    String,    String>    entry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
6	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  currEntries.entrySet())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]                [BUGGY]  for(Entry  <  String,  String>  entry  :  currEntries.entrySet())  {  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  currEntries.entrySet())  {	  for(Entry    <    String,    String>    entry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  For(Entry  <  String,  String>  entry  :  headers.entrySet())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]                [BUGGY]  For(Entry  <  String,  String>  entry  :  headers.entrySet())  {  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	For(Entry  <  String,  String>  entry  :  headers.entrySet())  {	  for(Entry    <    String,    String>    entry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  entries.entrySet())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]                [BUGGY]  for(Entry  <  String,  String>  entry  :  entries.entrySet())  {  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  entries.entrySet())  {	  for(Entry    <    String,    String>    entry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(val);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]                [BUGGY]  Integer  val  =  Integer.parseInt(val);  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(val);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  Entry  entry  =  currEntry.getEntry(key);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]                [BUGGY]  Entry  entry  =  currEntry.getEntry(key);  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  currEntry.getEntry(key);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]                [BUGGY]  Entry  <  K,  V>  currEntry  =  entry.getValue();  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  entry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getEntry(key);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]                [BUGGY]  Entry  <  K,  V>  currEntry  =  getEntry(key);  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  getEntry(key);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]                [BUGGY]  Entry  <  K,  V>  currEntry  =  currEntry.getValue();  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  currEntry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
14	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  entry.getKey();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]                [BUGGY]  Entry  <  K,  V>  currEntry  =  entry.getKey();  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  entry.getKey();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
15	[BUG]  [BUGGY]  for  (Entry  <  String,  String>  ent  :  this.headers.values())  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]                [BUGGY]  for  (Entry  <  String,  String>  ent  :  this.headers.values())  {  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for  (Entry  <  String,  String>  ent  :  this.headers.values())  {	  for    (Entry    <    String,    String>    ent    :    headers.values())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
16	[BUG]  [BUGGY]  for  (Entry  <  String,  String>  currEntry  :  this.headers.entrySet())  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]                [BUGGY]  for  (Entry  <  String,  String>  currEntry  :  this.headers.entrySet())  {  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for  (Entry  <  String,  String>  currEntry  :  this.headers.entrySet())  {	  for    (Entry    <    String,    String>    currEntry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  for  (Entry  <  String,  String>  currEntry  :  headers.values())  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]                [BUGGY]  for  (Entry  <  String,  String>  currEntry  :  headers.values())  {  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for  (Entry  <  String,  String>  currEntry  :  headers.values())  {	  for    (Entry    <    String,    String>    currEntry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  For  (Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]                [BUGGY]  For  (Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	For  (Entry  <  String,  String>  currEntry  :  headers.entrySet())  {	  for    (Entry    <    String,    String>    currEntry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  for(Entry  <  String,  String>  ent  :  this.headers.iterator().next())  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]                [BUGGY]  for(Entry  <  String,  String>  ent  :  this.headers.iterator().next())  {  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  ent  :  this.headers.iterator().next())  {	  for(Entry    <    String,    String>    ent    :    this.headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
20	[BUG]  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.values())  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]                [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.values())  {  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  currEntry  :  this.headers.values())  {	  for(Entry    <    String,    String>    ent    :    this.headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.keySet())  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]                [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.keySet())  {  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  currEntry  :  this.headers.keySet())  {	  for(Entry    <    String,    String>    ent    :    this.headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]  Entry  currEntry  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]                [BUGGY]  Entry  currEntry  =  entry.getValue();  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  currEntry  =  entry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
23	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainder);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]                [BUGGY]  Integer  val  =  Integer.parseInt(remainder);  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainder);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
24	[BUG]  [BUGGY]  Integer  n  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]                [BUGGY]  Integer  n  =  entry.getValue();  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  n  =  entry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainders);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]                [BUGGY]  Integer  val  =  Integer.parseInt(remainders);  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainders);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.getEntry(key);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]                [BUGGY]  Entry  <  K,  V>  currEntry  =  is.getEntry(key);  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  is.getEntry(key);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
27	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.iterator().next())  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]                [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.iterator().next())  {  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  headers.iterator().next())  {	  for(Entry    <    String,    String>    entry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  Entry  entry  =  getEntry(key);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]                [BUGGY]  Entry  entry  =  getEntry(key);  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(key);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
29	[BUG]  [BUGGY]  Entry  entry  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]                [BUGGY]  Entry  entry  =  entry.getValue();  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  entry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
30	[BUG]  [BUGGY]  Entry  ent  =  getEntry(key);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]                [BUGGY]  Entry  ent  =  getEntry(key);  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  ent  =  getEntry(key);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  Entry  entry  =  getEntry(null);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]                [BUGGY]  Entry  entry  =  getEntry(null);  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(null);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
32	[BUG]  [BUGGY]  Entry  entry  =  getEntry(value);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]                [BUGGY]  Entry  entry  =  getEntry(value);  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(value);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
33	[BUG]  [BUGGY]  Entry  entry  =  this.zipEncoding.getEntry(key);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]                [BUGGY]  Entry  entry  =  this.zipEncoding.getEntry(key);  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  this.zipEncoding.getEntry(key);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
34	[BUG]  [BUGGY]  Entry  entry  =  getEntry(key,  val);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]                [BUGGY]  Entry  entry  =  getEntry(key,  val);  [BUGGY]    String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(key,  val);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
