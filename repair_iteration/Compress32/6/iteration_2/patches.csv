bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  For  (Entry  <  String,  String>  currEntry  :  this.headers.entrySet())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]                  [BUGGY]  For  (Entry  <  String,  String>  currEntry  :  this.headers.entrySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	For  (Entry  <  String,  String>  currEntry  :  this.headers.entrySet())  {	  For    (Entry    <    String,    String>    currEntry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
2	[BUG]  [BUGGY]  For  (Entry  <  String,  String>  currEntry  :  headers.values())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]                  [BUGGY]  For  (Entry  <  String,  String>  currEntry  :  headers.values())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	For  (Entry  <  String,  String>  currEntry  :  headers.values())  {	  For    (Entry    <    String,    String>    currEntry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
3	[BUG]  [BUGGY]  For  (Entry  <  String,  String>  currEntry  :  headers.keySet())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  For  (Entry  <  String,  String>  currEntry  :  headers.keySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	For  (Entry  <  String,  String>  currEntry  :  headers.keySet())  {	  For    (Entry    <    String,    String>    currEntry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
4	[BUG]  [BUGGY]  For  (Entry  <  String,  String>  currEntry  :  headers.iterator().next())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  For  (Entry  <  String,  String>  currEntry  :  headers.iterator().next())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	For  (Entry  <  String,  String>  currEntry  :  headers.iterator().next())  {	  For    (Entry    <    String,    String>    currEntry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
5	[BUG]  [BUGGY]  Entry  entry  =  currEntry.getEntry(entry);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  currEntry.getEntry(entry);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  currEntry.getEntry(entry);	  Entry    entry    =    currEntry.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
6	[BUG]  [BUGGY]  Entry  entry  =  currEntry.getEntry(key,  val);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  currEntry.getEntry(key,  val);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  currEntry.getEntry(key,  val);	  Entry    entry    =    currEntry.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
7	[BUG]  [BUGGY]  Entry  entry  =  currEntry.getEntry(val);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  currEntry.getEntry(val);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  currEntry.getEntry(val);	  Entry    entry    =    currEntry.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
8	[BUG]  [BUGGY]  Entry  entry  =  currEntry.getEntry(key,  value);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  currEntry.getEntry(key,  value);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  currEntry.getEntry(key,  value);	  Entry    entry    =    currEntry.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
9	[BUG]  [BUGGY]  Entry  entry  =  currEntry.getEntry(key,  0);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  currEntry.getEntry(key,  0);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  currEntry.getEntry(key,  0);	  Entry    entry    =    currEntry.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
10	[BUG]  [BUGGY]  Entry  entry  =  currEntry.getEntry(encoding);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  currEntry.getEntry(encoding);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  currEntry.getEntry(encoding);	  Entry    entry    =    currEntry.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  Entry  entry  =  getEntry(entry);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(entry);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(entry);	  Entry    entry    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
12	[BUG]  [BUGGY]  Entry  entry  =  getEntry(entry.getValue());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(entry.getValue());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(entry.getValue());	  Entry    entry    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
13	[BUG]  [BUGGY]  Entry  entry  =  getEntry(entry.getKey());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(entry.getKey());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(entry.getKey());	  Entry    entry    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
14	[BUG]  [BUGGY]  Entry  entry  =  currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  currEntry.getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  currEntry.getValue();	  Entry    entry    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
15	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  this.headers.iterator().next())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  this.headers.iterator().next())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  this.headers.iterator().next())  {	  for(Entry    <    String,    String>    entry    :    this.headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
16	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  this.headers.values())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  this.headers.values())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  this.headers.values())  {	  for(Entry    <    String,    String>    entry    :    this.headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
17	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  this.headers.keySet())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  this.headers.keySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  this.headers.keySet())  {	  for(Entry    <    String,    String>    entry    :    this.headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
18	[BUG]  [BUGGY]  For(Entry  <  String,  String>  entry  :  this.headers.entrySet())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]                  [BUGGY]  For(Entry  <  String,  String>  entry  :  this.headers.entrySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	For(Entry  <  String,  String>  entry  :  this.headers.entrySet())  {	  for(Entry    <    String,    String>    entry    :    this.headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
19	[BUG]  [BUGGY]  for(Entry  <  String,  String>  ent  :  this.headers.entrySet().next())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  ent  :  this.headers.entrySet().next())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  ent  :  this.headers.entrySet().next())  {	  for(Entry    <    String,    String>    ent    :    this.headers.iterator().next())    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
20	[BUG]  [BUGGY]  for(Entry  <  String,  String>  ent  :  this.headers.values().next())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  ent  :  this.headers.values().next())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  ent  :  this.headers.values().next())  {	  for(Entry    <    String,    String>    ent    :    this.headers.iterator().next())    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
21	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  this.headers.entrySet().next())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  this.headers.entrySet().next())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  this.headers.entrySet().next())  {	  for(Entry    <    String,    String>    ent    :    this.headers.iterator().next())    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
22	[BUG]  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.iterator().next())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.iterator().next())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  currEntry  :  this.headers.iterator().next())  {	  for(Entry    <    String,    String>    ent    :    this.headers.iterator().next())    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
23	[BUG]  [BUGGY]  for(Entry  <  String,  String>  ent  :  headers.iterator().next())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  ent  :  headers.iterator().next())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  ent  :  headers.iterator().next())  {	  for(Entry    <    String,    String>    ent    :    this.headers.iterator().next())    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
24	[BUG]  [BUGGY]  for(Entry  <  String,  String>  ent  :  this.headers.keySet().next())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  ent  :  this.headers.keySet().next())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  ent  :  this.headers.keySet().next())  {	  for(Entry    <    String,    String>    ent    :    this.headers.iterator().next())    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
25	[BUG]  [BUGGY]  Entry  entry  =  this.zipEncoding.getEntry(entry);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  this.zipEncoding.getEntry(entry);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  this.zipEncoding.getEntry(entry);	  Entry    entry    =    this.zipEncoding.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
26	[BUG]  [BUGGY]  Entry  entry  =  this.zipEncoding.getEntry(val);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  this.zipEncoding.getEntry(val);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  this.zipEncoding.getEntry(val);	  Entry    entry    =    this.zipEncoding.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
27	[BUG]  [BUGGY]  Entry  entry  =  this.zipEncoding.getEntry(key,  val);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  this.zipEncoding.getEntry(key,  val);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  this.zipEncoding.getEntry(key,  val);	  Entry    entry    =    this.zipEncoding.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
28	[BUG]  [BUGGY]  Entry  entry  =  zipEncoding.getEntry(key);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  zipEncoding.getEntry(key);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  zipEncoding.getEntry(key);	  Entry    entry    =    this.zipEncoding.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
29	[BUG]  [BUGGY]  Entry  entry  =  this.zipEncoding.getEntry(value);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  this.zipEncoding.getEntry(value);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  this.zipEncoding.getEntry(value);	  Entry    entry    =    this.zipEncoding.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
30	[BUG]  [BUGGY]  Entry  ent  =  currEntry.getEntry(key);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  ent  =  currEntry.getEntry(key);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  ent  =  currEntry.getEntry(key);	  Entry    ent    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
31	[BUG]  [BUGGY]  Entry  ent  =  getEntry(remainder);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  ent  =  getEntry(remainder);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  ent  =  getEntry(remainder);	  Entry    ent    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
32	[BUG]  [BUGGY]  Entry  ent  =  getEntry(remainders);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  ent  =  getEntry(remainders);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  ent  =  getEntry(remainders);	  Entry    ent    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
33	[BUG]  [BUGGY]  Entry  ent  =  getEntry(remaining);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  ent  =  getEntry(remaining);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  ent  =  getEntry(remaining);	  Entry    ent    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
34	[BUG]  [BUGGY]  Entry  ent  =  getEntry(key.getValue());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  ent  =  getEntry(key.getValue());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  ent  =  getEntry(key.getValue());	  Entry    ent    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
35	[BUG]  [BUGGY]  Entry  ent  =  getEntry(n);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  ent  =  getEntry(n);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  ent  =  getEntry(n);	  Entry    ent    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
36	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.values()).iterator().hasNext();)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.values()).iterator().hasNext();)  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  headers.values()).iterator().hasNext();)  {	  for(Entry    <    String,    String>    entry    :    headers.values())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
37	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  currEntries.values())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  currEntries.values())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  currEntries.values())  {	  for(Entry    <    String,    String>    entry    :    headers.values())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
38	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.entryCount())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.entryCount())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  headers.entryCount())  {	  for(Entry    <    String,    String>    entry    :    headers.values())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
39	[BUG]  [BUGGY]  Entry  entry  =  currEntry.getEntry(value);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  currEntry.getEntry(value);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  currEntry.getEntry(value);	  Entry    entry    =    getEntry(value);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
40	[BUG]  [BUGGY]  Entry  entry  =  getEntry(encoding);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(encoding);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(encoding);	  Entry    entry    =    getEntry(value);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
41	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainders,  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainders,  1);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainders,  1);	  Integer    val    =    Integer.parseInt(remainders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
42	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(record);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(record);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(record);	  Integer    val    =    Integer.parseInt(remainders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
43	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainders.length);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainders.length);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainders.length);	  Integer    val    =    Integer.parseInt(remainders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
44	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainders)+  1;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainders)+  1;  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainders)+  1;	  Integer    val    =    Integer.parseInt(remainders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
45	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainders,  2);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainders,  2);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainders,  2);	  Integer    val    =    Integer.parseInt(remainders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
46	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainders,  10);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainders,  10);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainders,  10);	  Integer    val    =    Integer.parseInt(remainders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
47	[BUG]  [BUGGY]  Integer  n  =  entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  n  =  entry.getValue()  +  1;  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  n  =  entry.getValue()  +  1;	  Integer    n    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
48	[BUG]  [BUGGY]  Integer  n  =  currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  n  =  currEntry.getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  n  =  currEntry.getValue();	  Integer    n    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
49	[BUG]  [BUGGY]  Integer  n  =  entry.getKey();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  n  =  entry.getKey();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  n  =  entry.getKey();	  Integer    n    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
50	[BUG]  [BUGGY]  Integer  n  =  rest.getValue();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  n  =  rest.getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  n  =  rest.getValue();	  Integer    n    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
51	[BUG]  [BUGGY]  Integer  n  =  this.entryOffset.getValue();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  n  =  this.entryOffset.getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  n  =  this.entryOffset.getValue();	  Integer    n    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
52	[BUG]  [BUGGY]  Integer  n  =  ent.getValue();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  n  =  ent.getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  n  =  ent.getValue();	  Integer    n    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
53	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  currEntries.keySet())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  currEntries.keySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  currEntries.keySet())  {	  for(Entry    <    String,    String>    entry    :    currEntries.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
54	[BUG]  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  currEntries.entrySet())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  currEntries.entrySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  currEntry  :  currEntries.entrySet())  {	  for(Entry    <    String,    String>    entry    :    currEntries.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
55	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  currEntries.iterator().next())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  currEntries.iterator().next())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  currEntries.iterator().next())  {	  for(Entry    <    String,    String>    entry    :    currEntries.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  this.currEntries.entrySet())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  this.currEntries.entrySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  this.currEntries.entrySet())  {	  for(Entry    <    String,    String>    entry    :    currEntries.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
57	[BUG]  [BUGGY]  For(Entry  <  String,  String>  entry  :  currEntries.entrySet())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  For(Entry  <  String,  String>  entry  :  currEntries.entrySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	For(Entry  <  String,  String>  entry  :  currEntries.entrySet())  {	  for(Entry    <    String,    String>    entry    :    currEntries.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
58	[BUG]  [BUGGY]  Entry  currEntry  =  entry.getKey();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  currEntry  =  entry.getKey();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  currEntry  =  entry.getKey();	  Entry    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
59	[BUG]  [BUGGY]  Entry  currEntry  =  ent.getValue();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  currEntry  =  ent.getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  currEntry  =  ent.getValue();	  Entry    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
60	[BUG]  [BUGGY]  Entry  currEntry  =  new  Entry(entry.getValue());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  currEntry  =  new  Entry(entry.getValue());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  currEntry  =  new  Entry(entry.getValue());	  Entry    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
61	[BUG]  [BUGGY]  Entry  currEntry  =  this.entry.getValue();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  currEntry  =  this.entry.getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  currEntry  =  this.entry.getValue();	  Entry    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
62	[BUG]  [BUGGY]  Entry  currEntry  =  entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  currEntry  =  entry.getValue()  +  1;  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  currEntry  =  entry.getValue()  +  1;	  Entry    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
63	[BUG]  [BUGGY]  Entry  currEntry  =  new  Entry(entry.getKey());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  currEntry  =  new  Entry(entry.getKey());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  currEntry  =  new  Entry(entry.getKey());	  Entry    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
64	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  entries.values())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  entries.values())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  entries.values())  {	  for(Entry    <    String,    String>    entry    :    entries.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  entries.iterator().next())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  entries.iterator().next())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  entries.iterator().next())  {	  for(Entry    <    String,    String>    entry    :    entries.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
66	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  entries.keySet())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  entries.keySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  entries.keySet())  {	  for(Entry    <    String,    String>    entry    :    entries.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
67	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  this.entries.entrySet())  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  this.entries.entrySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  this.entries.entrySet())  {	  for(Entry    <    String,    String>    entry    :    entries.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
68	[BUG]  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.entryCount())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.entryCount())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  currEntry  :  this.headers.entryCount())  {	  for(Entry    <    String,    String>    currEntry    :    this.headers.values())    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
69	[BUG]  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.values()).iterator().hasNext();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.values()).iterator().hasNext();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  currEntry  :  this.headers.values()).iterator().hasNext();	  for(Entry    <    String,    String>    currEntry    :    this.headers.values())    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
70	[BUG]  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.values()).iterator().hasNext();)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.values()).iterator().hasNext();)  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  currEntry  :  this.headers.values()).iterator().hasNext();)  {	  for(Entry    <    String,    String>    currEntry    :    this.headers.values())    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
71	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  ent.getValue();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  ent.getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  ent.getValue();	  Entry    <    K,    V>    currEntry    =    entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
72	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  this.entry.getKey();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  this.entry.getKey();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  this.entry.getKey();	  Entry    <    K,    V>    currEntry    =    entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
73	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  this.entry.getValue();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  this.entry.getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  this.entry.getValue();	  Entry    <    K,    V>    currEntry    =    entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
74	[BUG]  [BUGGY]  Entry  entry  =  currEntry.getKey();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  currEntry.getKey();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  currEntry.getKey();	  Entry    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
75	[BUG]  [BUGGY]  Entry  entry  =  this.entry.getValue();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  this.entry.getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  this.entry.getValue();	  Entry    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
76	[BUG]  [BUGGY]  Entry  entry  =  ent.getValue();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  ent.getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  ent.getValue();	  Entry    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
77	[BUG]  [BUGGY]  Entry  entry  =  new  Entry(entry.getValue());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  new  Entry(entry.getValue());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  new  Entry(entry.getValue());	  Entry    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
78	[BUG]  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  headers.iterator().next())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  headers.iterator().next())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  currEntry  :  headers.iterator().next())  {	  for(Entry    <    String,    String>    currEntry    :    headers.keySet())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
79	[BUG]  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  getHeaders())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  getHeaders())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  currEntry  :  getHeaders())  {	  for(Entry    <    String,    String>    currEntry    :    headers.keySet())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
80	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(currEntry.getValue());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(currEntry.getValue());	  Integer    val    =    Integer.parseInt(val);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
81	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(length);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(length);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(length);	  Integer    val    =    Integer.parseInt(val);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
82	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(int);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(int);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(int);	  Integer    val    =    Integer.parseInt(val);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
83	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainingSize);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainingSize);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainingSize);	  Integer    val    =    Integer.parseInt(val);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
84	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(string);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(string);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(string);	  Integer    val    =    Integer.parseInt(val);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
85	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainingLen);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainingLen);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainingLen);	  Integer    val    =    Integer.parseInt(val);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
86	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.entrySet().next())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.entrySet().next())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  headers.entrySet().next())  {	  for(Entry    <    String,    String>    entry    :    headers.iterator().next())    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
87	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.entrySet().iterator().next())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.entrySet().iterator().next())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  headers.entrySet().iterator().next())  {	  for(Entry    <    String,    String>    entry    :    headers.iterator().next())    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
88	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.values().next())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.values().next())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  headers.values().next())  {	  for(Entry    <    String,    String>    entry    :    headers.iterator().next())    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
89	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.keySet().iterator().next())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.keySet().iterator().next())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  headers.keySet().iterator().next())  {	  for(Entry    <    String,    String>    entry    :    headers.iterator().next())    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
90	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.iterator().next().getKey())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.iterator().next().getKey())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  headers.iterator().next().getKey())  {	  for(Entry    <    String,    String>    entry    :    headers.iterator().next())    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
91	[BUG]  [BUGGY]  For(Entry  <  String,  String>  entry  :  headers.keySet())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  For(Entry  <  String,  String>  entry  :  headers.keySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	For(Entry  <  String,  String>  entry  :  headers.keySet())  {	  For(Entry    <    String,    String>    entry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
92	[BUG]  [BUGGY]  For(Entry  <  String,  String>  entry  :  headers.values())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  For(Entry  <  String,  String>  entry  :  headers.values())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	For(Entry  <  String,  String>  entry  :  headers.values())  {	  For(Entry    <    String,    String>    entry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
93	[BUG]  [BUGGY]  For(Entry  <  String,  String>  entry  :  super.headers.entrySet())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  For(Entry  <  String,  String>  entry  :  super.headers.entrySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	For(Entry  <  String,  String>  entry  :  super.headers.entrySet())  {	  For(Entry    <    String,    String>    entry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
94	[BUG]  [BUGGY]  For(Entry  <  String,  String>  entry  :  entries.entrySet())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  For(Entry  <  String,  String>  entry  :  entries.entrySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	For(Entry  <  String,  String>  entry  :  entries.entrySet())  {	  For(Entry    <    String,    String>    entry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
95	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getEntry(entry);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  getEntry(entry);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  getEntry(entry);	  Entry    <    K,    V>    currEntry    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
96	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getEntry(key,  val);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  getEntry(key,  val);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  getEntry(key,  val);	  Entry    <    K,    V>    currEntry    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
97	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getEntry(entry.getValue());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  getEntry(entry.getValue());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  getEntry(entry.getValue());	  Entry    <    K,    V>    currEntry    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
98	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getEntry(entry.getKey());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  getEntry(entry.getKey());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  getEntry(entry.getKey());	  Entry    <    K,    V>    currEntry    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
99	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainder.length);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainder.length);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainder.length);	  Integer    val    =    Integer.parseInt(remainder);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
100	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainder.length());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainder.length());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainder.length());	  Integer    val    =    Integer.parseInt(remainder);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
101	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainder)+  1;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainder)+  1;  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainder)+  1;	  Integer    val    =    Integer.parseInt(remainder);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
102	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainder  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainder  +  1);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainder  +  1);	  Integer    val    =    Integer.parseInt(remainder);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
103	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainder.substring(1));  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainder.substring(1));  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainder.substring(1));	  Integer    val    =    Integer.parseInt(remainder);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
104	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  entry.getValue()  +  1;  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  entry.getValue()  +  1;	  Entry    <    K,    V>    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
105	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.getEntry(entry);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.getEntry(entry);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  is.getEntry(entry);	  Entry    <    K,    V>    currEntry    =    is.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
106	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  i.getEntry(key);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  i.getEntry(key);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  i.getEntry(key);	  Entry    <    K,    V>    currEntry    =    is.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
107	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.getEntry(val);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.getEntry(val);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  is.getEntry(val);	  Entry    <    K,    V>    currEntry    =    is.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
108	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.getEntry(key,  val);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.getEntry(key,  val);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  is.getEntry(key,  val);	  Entry    <    K,    V>    currEntry    =    is.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
109	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.getEntry(value);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.getEntry(value);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  is.getEntry(value);	  Entry    <    K,    V>    currEntry    =    is.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
110	[BUG]  [BUGGY]  for(String  key  :  this.headers.keySet())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]                  [BUGGY]  for(String  key  :  this.headers.keySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(String  key  :  this.headers.keySet())  {	  for(Entry    <    String,    String>    currEntry    :    this.headers.keySet())    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
111	[BUG]  [BUGGY]  Entry  entry  =  getEntry(null,  null);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(null,  null);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(null,  null);	  Entry    entry    =    getEntry(null);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
112	[BUG]  [BUGGY]  Entry  entry  =  getEntry(null,  0);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(null,  0);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(null,  0);	  Entry    entry    =    getEntry(null);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
113	[BUG]  [BUGGY]  Entry  entry  =  getEntry(null,  false);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(null,  false);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(null,  false);	  Entry    entry    =    getEntry(null);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
114	[BUG]  [BUGGY]  Entry  entry  =  getEntry(null,  true);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(null,  true);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(null,  true);	  Entry    entry    =    getEntry(null);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
115	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  currEntry.getKey();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  currEntry.getKey();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  currEntry.getKey();	  Entry    <    K,    V>    currEntry    =    currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
116	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  this.currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  this.currEntry.getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  this.currEntry.getValue();	  Entry    <    K,    V>    currEntry    =    currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
117	[BUG]  [BUGGY]  Entry  entry  =  getEntry(key,  value);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(key,  value);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(key,  value);	  Entry    entry    =    getEntry(key,    val);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
118	[BUG]  [BUGGY]  Entry  entry  =  getEntry(val,  key);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(val,  key);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(val,  key);	  Entry    entry    =    getEntry(key,    val);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
119	[BUG]  [BUGGY]  Entry  entry  =  getEntry(key,  val,  true);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(key,  val,  true);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(key,  val,  true);	  Entry    entry    =    getEntry(key,    val);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
120	[BUG]  [BUGGY]  Entry  entry  =  getEntry(entry,  val);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(entry,  val);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(entry,  val);	  Entry    entry    =    getEntry(key,    val);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
121	[BUG]  [BUGGY]  Entry  entry  =  getEntry(key,  val,  val);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(key,  val,  val);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(key,  val,  val);	  Entry    entry    =    getEntry(key,    val);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
122	[BUG]  [BUGGY]  Entry  entry  =  getEntry(key,  val,  false);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(key,  val,  false);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(key,  val,  false);	  Entry    entry    =    getEntry(key,    val);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
123	[BUG]  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  entries.entrySet())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  entries.entrySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  currEntry  :  entries.entrySet())  {	  for(Entry    <    String,    String>    entry    :    entries.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
124	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  is.entrySet())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  is.entrySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  is.entrySet())  {	  for(Entry    <    String,    String>    entry    :    entries.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
125	[BUG]  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.entrySet().next())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.entrySet().next())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  currEntry  :  this.headers.entrySet().next())  {	  for(Entry    <    String,    String>    ent    :    this.headers.iterator().next())    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
126	[BUG]  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.values().next())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.values().next())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  currEntry  :  this.headers.values().next())  {	  for(Entry    <    String,    String>    ent    :    this.headers.iterator().next())    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
127	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  currEntry.getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  currEntry.getCurrentEntry();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  currEntry.getCurrentEntry();	  Entry    <    K,    V>    currEntry    =    currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
128	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  currEntry.next();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  currEntry.next();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  currEntry.next();	  Entry    <    K,    V>    currEntry    =    currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
129	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainders  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainders  +  1);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainders  +  1);	  Integer    val    =    Integer.parseInt(remainders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
130	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainders).intValue();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainders).intValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainders).intValue();	  Integer    val    =    Integer.parseInt(remainders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
131	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainders,  16);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainders,  16);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainders,  16);	  Integer    val    =    Integer.parseInt(remainders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
132	[BUG]  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.iterator().values())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.iterator().values())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  currEntry  :  this.headers.iterator().values())  {	  for(Entry    <    String,    String>    currEntry    :    this.headers.values())    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
133	[BUG]  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.iterator())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.iterator())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  currEntry  :  this.headers.iterator())  {	  for(Entry    <    String,    String>    currEntry    :    this.headers.values())    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
134	[BUG]  [BUGGY]  Entry  entry  =  getEntry(currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(currEntry.getValue());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(currEntry.getValue());	  Entry    entry    =    getEntry(value);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
135	[BUG]  [BUGGY]  Entry  entry  =  getEntry(currEntry.getKey());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(currEntry.getKey());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(currEntry.getKey());	  Entry    entry    =    getEntry(value);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
136	[BUG]  [BUGGY]  Entry  entry  =  getEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(currEntry);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(currEntry);	  Entry    entry    =    getEntry(value);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
137	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  getHeaders())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  getHeaders())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  getHeaders())  {	  for(Entry    <    String,    String>    entry    :    headers.values())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
138	[BUG]  [BUGGY]  Entry  entry  =  getEntry(value,  val);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(value,  val);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(value,  val);	  Entry    entry    =    getEntry(key,    val);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
139	[BUG]  [BUGGY]  Entry  entry  =  getEntry(key,  val,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(key,  val,  hasHitEOF);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(key,  val,  hasHitEOF);	  Entry    entry    =    getEntry(key,    val);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
140	[BUG]  [BUGGY]  Entry  entry  =  getEntry(key,  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(key,  currEntry.getValue());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(key,  currEntry.getValue());	  Entry    entry    =    getEntry(key,    val);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
141	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(value);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(value);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(value);	  Integer    val    =    Integer.parseInt(val);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
142	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remaining);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remaining);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remaining);	  Integer    val    =    Integer.parseInt(val);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
143	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  currEntries.iterator())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  currEntries.iterator())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  currEntries.iterator())  {	  for(Entry    <    String,    String>    entry    :    currEntries.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
144	[BUG]  [BUGGY]  Entry  currEntry  =  currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  currEntry  =  currEntry.getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  currEntry  =  currEntry.getValue();	  Entry    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
145	[BUG]  [BUGGY]  Entry  currEntry  =  isArchiveEntry(entry.getValue());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  currEntry  =  isArchiveEntry(entry.getValue());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  currEntry  =  isArchiveEntry(entry.getValue());	  Entry    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
146	[BUG]  [BUGGY]  Entry  entry  =  this.zipEncoding.getEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  this.zipEncoding.getEntry(currEntry);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  this.zipEncoding.getEntry(currEntry);	  Entry    entry    =    this.zipEncoding.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
147	[BUG]  [BUGGY]  Entry  entry  =  this.zipEncoding.getEntry(i);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  this.zipEncoding.getEntry(i);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  this.zipEncoding.getEntry(i);	  Entry    entry    =    this.zipEncoding.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
148	[BUG]  [BUGGY]  Entry  currEntry  =  getEntry(key);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  currEntry  =  getEntry(key);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  currEntry  =  getEntry(key);	  Entry    ent    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
149	[BUG]  [BUGGY]  Entry  ent  =  getEntry(entry.getValue());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  ent  =  getEntry(entry.getValue());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  ent  =  getEntry(entry.getValue());	  Entry    ent    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
150	[BUG]  [BUGGY]  Entry  ent  =  getEntry(currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  ent  =  getEntry(currEntry.getValue());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  ent  =  getEntry(currEntry.getValue());	  Entry    ent    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
151	[BUG]  [BUGGY]  Entry  ent  =  getEntry(entry);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  ent  =  getEntry(entry);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  ent  =  getEntry(entry);	  Entry    ent    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
152	[BUG]  [BUGGY]  Integer  n  =  currEntry.getKey();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  n  =  currEntry.getKey();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  n  =  currEntry.getKey();	  Integer    n    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
153	[BUG]  [BUGGY]  Integer  n  =  this.entry.getValue();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  n  =  this.entry.getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  n  =  this.entry.getValue();	  Integer    n    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
154	[BUG]  [BUGGY]  Entry  entry  =  restEntry.getValue();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  restEntry.getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  restEntry.getValue();	  Entry    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
155	[BUG]  [BUGGY]  Entry  entry  =  currEntry.getEntry(null);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  currEntry.getEntry(null);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  currEntry.getEntry(null);	  Entry    entry    =    currEntry.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
156	[BUG]  [BUGGY]  Entry  entry  =  currEntry.getEntry(n);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  currEntry.getEntry(n);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  currEntry.getEntry(n);	  Entry    entry    =    currEntry.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
157	[BUG]  [BUGGY]  Entry  entry  =  getEntry(null,  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(null,  currEntry.getValue());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(null,  currEntry.getValue());	  Entry    entry    =    getEntry(null);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
158	[BUG]  [BUGGY]  Entry  entry  =  getEntry(null,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(null,  hasHitEOF);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(null,  hasHitEOF);	  Entry    entry    =    getEntry(null);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
159	[BUG]  [BUGGY]  Entry  entry  =  getEntry(null,  currEntry);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(null,  currEntry);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(null,  currEntry);	  Entry    entry    =    getEntry(null);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
160	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getEntry(currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  getEntry(currEntry.getValue());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  getEntry(currEntry.getValue());	  Entry    <    K,    V>    currEntry    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
161	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getEntry(currEntry.getKey());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  getEntry(currEntry.getKey());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  getEntry(currEntry.getKey());	  Entry    <    K,    V>    currEntry    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
162	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainder).intValue();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainder).intValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainder).intValue();	  Integer    val    =    Integer.parseInt(remainder);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
163	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainder  *  2);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainder  *  2);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainder  *  2);	  Integer    val    =    Integer.parseInt(remainder);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
164	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.getEntry(remainder);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.getEntry(remainder);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  is.getEntry(remainder);	  Entry    <    K,    V>    currEntry    =    is.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
165	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.getEntry(currEntry.getKey());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.getEntry(currEntry.getKey());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  is.getEntry(currEntry.getKey());	  Entry    <    K,    V>    currEntry    =    is.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
166	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.getEntry(n);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.getEntry(n);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  is.getEntry(n);	  Entry    <    K,    V>    currEntry    =    is.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
167	[BUG]  [BUGGY]  Entry  currEntry  =  rest.getValue();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  currEntry  =  rest.getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  currEntry  =  rest.getValue();	  Entry    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
168	[BUG]  [BUGGY]  Entry  entry  =  getEntry(null,  val);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(null,  val);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(null,  val);	  Entry    entry    =    getEntry(null);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
169	[BUG]  [BUGGY]  Entry  currEntry  =  getEntry(null);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  currEntry  =  getEntry(null);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  currEntry  =  getEntry(null);	  Entry    entry    =    getEntry(null);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
170	[BUG]  [BUGGY]  Entry  entry  =  getEntry(remainder);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(remainder);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(remainder);	  Entry    entry    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
171	[BUG]  [BUGGY]  Entry  entry  =  getEntry(key,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(key,  hasHitEOF);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(key,  hasHitEOF);	  Entry    entry    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
172	[BUG]  [BUGGY]  Entry  entry  =  this.zipEncoding.getEntry(key,  i);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  this.zipEncoding.getEntry(key,  i);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  this.zipEncoding.getEntry(key,  i);	  Entry    entry    =    this.zipEncoding.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
173	[BUG]  [BUGGY]  Entry  entry  =  this.zipEncoding.getEntry(encoding);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  this.zipEncoding.getEntry(encoding);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  this.zipEncoding.getEntry(encoding);	  Entry    entry    =    this.zipEncoding.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
174	[BUG]  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.values()),  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  currEntry  :  this.headers.values()),  hasHitEOF)  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  currEntry  :  this.headers.values()),  hasHitEOF)  {	  for(Entry    <    String,    String>    currEntry    :    this.headers.values())    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
175	[BUG]  [BUGGY]  Entry  currEntry  =  currEntry.getEntry(key);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  currEntry  =  currEntry.getEntry(key);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  currEntry  =  currEntry.getEntry(key);	  Entry    entry    =    currEntry.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
176	[BUG]  [BUGGY]  Entry  entry  =  currEntry.getEntry(key,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  currEntry.getEntry(key,  hasHitEOF);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  currEntry.getEntry(key,  hasHitEOF);	  Entry    entry    =    currEntry.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
177	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainder,  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainder,  1);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainder,  1);	  Integer    val    =    Integer.parseInt(remainder);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
178	[BUG]  [BUGGY]  Entry  ent  =  getEntry(entry.getKey());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  ent  =  getEntry(entry.getKey());  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  ent  =  getEntry(entry.getKey());	  Entry    ent    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
179	[BUG]  [BUGGY]  Entry  ent  =  getEntry(remainderLen);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  ent  =  getEntry(remainderLen);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  ent  =  getEntry(remainderLen);	  Entry    ent    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
180	[BUG]  [BUGGY]  Entry  ent  =  getEntry(key,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  ent  =  getEntry(key,  hasHitEOF);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  ent  =  getEntry(key,  hasHitEOF);	  Entry    ent    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
181	[BUG]  [BUGGY]  Entry  entry  =  rest.getValue();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  rest.getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  rest.getValue();	  Entry    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
182	[BUG]  [BUGGY]  Entry  entry  =  i.getValue();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  i.getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  i.getValue();	  Entry    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
183	[BUG]  [BUGGY]  For(Entry  <  String,  String>  entry  :  headers.iterator().next())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]                  [BUGGY]  For(Entry  <  String,  String>  entry  :  headers.iterator().next())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	For(Entry  <  String,  String>  entry  :  headers.iterator().next())  {	  For(Entry    <    String,    String>    entry    :    headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
184	[BUG]  [BUGGY]  Entry  entry  =  getEntry(key,  val).getValue();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  entry  =  getEntry(key,  val).getValue();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  entry  =  getEntry(key,  val).getValue();	  Entry    entry    =    getEntry(key,    val);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
185	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(remainders,  3);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(remainders,  3);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(remainders,  3);	  Integer    val    =    Integer.parseInt(remainders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
186	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.iterator().entrySet())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.iterator().entrySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  headers.iterator().entrySet())  {	  for(Entry    <    String,    String>    entry    :    headers.iterator().next())    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
187	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  entry.getValue()  -  1;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  entry.getValue()  -  1;  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  entry.getValue()  -  1;	  Entry    <    K,    V>    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
188	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.values()).iterator().next();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  headers.values()).iterator().next();  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  headers.values()).iterator().next();	  for(Entry    <    String,    String>    entry    :    headers.values())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
189	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  cachedEntries.entrySet())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  cachedEntries.entrySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  cachedEntries.entrySet())  {	  for(Entry    <    String,    String>    entry    :    currEntries.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
190	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  super.headers.entrySet())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  super.headers.entrySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  super.headers.entrySet())  {	  for(Entry    <    String,    String>    entry    :    this.headers.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
191	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.readEntry(key);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.readEntry(key);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  is.readEntry(key);	  Entry    <    K,    V>    currEntry    =    is.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
192	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  this.zipEncoding.getEntry(key);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  this.zipEncoding.getEntry(key);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  this.zipEncoding.getEntry(key);	  Entry    <    K,    V>    currEntry    =    is.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
193	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  entry.getEntry(key);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  entry.getEntry(key);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  entry.getEntry(key);	  Entry    <    K,    V>    currEntry    =    is.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
194	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.readEntry(entry);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  is.readEntry(entry);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  is.readEntry(entry);	  Entry    <    K,    V>    currEntry    =    is.getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
195	[BUG]  [BUGGY]  for(Entry  <  String,  String>  entry  :  this.entrySet.entrySet())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]                  [BUGGY]  for(Entry  <  String,  String>  entry  :  this.entrySet.entrySet())  {  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	for(Entry  <  String,  String>  entry  :  this.entrySet.entrySet())  {	  for(Entry    <    String,    String>    entry    :    entries.entrySet())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
196	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(blockSize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]                  [BUGGY]  Integer  val  =  Integer.parseInt(blockSize);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Integer  val  =  Integer.parseInt(blockSize);	  Integer    val    =    Integer.parseInt(val);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
197	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getEntry(key,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]                  [BUGGY]  Entry  <  K,  V>  currEntry  =  getEntry(key,  hasHitEOF);  [BUGGY]      String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	493	493	1	replace	Entry  <  K,  V>  currEntry  =  getEntry(key,  hasHitEOF);	  Entry    <    K,    V>    currEntry    =    getEntry(key);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
